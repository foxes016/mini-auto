<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\obj\MR9300.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\obj\MR9300.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Sun Apr 21 18:04:06 2019
<BR><P>
<H3>Maximum Stack Usage =      10592 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Task_SessionHandler &rArr; Handle_IOCTRL_Cmd &rArr; Remoteplayback_busy &rArr; SendVideoFrameData &rArr; avSendFrameData &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9b5]">OSStartHighRdy</a>
 <LI><a href="#[9b7]">OSCtxSw</a>
 <LI><a href="#[9c3]">OSIntIRQCtxSw</a>
 <LI><a href="#[9c2]">OSIntFIQCtxSw</a>
 <LI><a href="#[9c1]">OSIntFIQNestIRQ</a>
 <LI><a href="#[80]">UCOS_IRQHandler</a>
 <LI><a href="#[81]">UCOS_FIQHandler</a>
 <LI><a href="#[29a]">OSCPUSaveSR</a>
 <LI><a href="#[29b]">OSCPURestoreSR</a>
 <LI><a href="#[1ae]">board_activate_mmu</a>
 <LI><a href="#[1af]">Test_Clean_Dcache</a>
 <LI><a href="#[1b0]">Disable_Dcache</a>
 <LI><a href="#[7c]">Undefined_Handler</a>
 <LI><a href="#[7d]">SWI_Handler</a>
 <LI><a href="#[7e]">Prefetch_Handler</a>
 <LI><a href="#[7f]">Abort_Handler</a>
 <LI><a href="#[123]">__switch$$</a>
 <LI><a href="#[125]">__switch$$</a>
 <LI><a href="#[126]">__switch$$</a>
 <LI><a href="#[127]">__switch$$</a>
 <LI><a href="#[128]">__switch$$</a>
 <LI><a href="#[129]">__switch$$</a>
 <LI><a href="#[12a]">__switch$$</a>
 <LI><a href="#[130]">__switch$$</a>
 <LI><a href="#[d2]">__switch$$</a>
 <LI><a href="#[d3]">__switch$$</a>
 <LI><a href="#[d4]">__switch$$</a>
 <LI><a href="#[d5]">__switch$$</a>
 <LI><a href="#[d6]">__switch$$</a>
 <LI><a href="#[cb]">__switch$$</a>
 <LI><a href="#[14b]">__switch$$</a>
 <LI><a href="#[166]">__switch$$</a>
 <LI><a href="#[167]">__switch$$</a>
 <LI><a href="#[168]">__switch$$</a>
 <LI><a href="#[169]">__switch$$</a>
 <LI><a href="#[16a]">__switch$$</a>
 <LI><a href="#[16b]">__switch$$</a>
 <LI><a href="#[14c]">__switch$$</a>
 <LI><a href="#[14d]">__switch$$</a>
 <LI><a href="#[14e]">__switch$$</a>
 <LI><a href="#[14f]">__switch$$</a>
 <LI><a href="#[150]">__switch$$</a>
 <LI><a href="#[151]">__switch$$</a>
 <LI><a href="#[162]">__switch$$</a>
 <LI><a href="#[152]">__switch$$</a>
 <LI><a href="#[153]">__switch$$</a>
 <LI><a href="#[154]">__switch$$</a>
 <LI><a href="#[155]">__switch$$</a>
 <LI><a href="#[156]">__switch$$</a>
 <LI><a href="#[157]">__switch$$</a>
 <LI><a href="#[158]">__switch$$</a>
 <LI><a href="#[159]">__switch$$</a>
 <LI><a href="#[15a]">__switch$$</a>
 <LI><a href="#[15b]">__switch$$</a>
 <LI><a href="#[15c]">__switch$$</a>
 <LI><a href="#[15d]">__switch$$</a>
 <LI><a href="#[15e]">__switch$$</a>
 <LI><a href="#[15f]">__switch$$</a>
 <LI><a href="#[164]">__switch$$</a>
 <LI><a href="#[165]">__switch$$</a>
 <LI><a href="#[163]">__switch$$</a>
 <LI><a href="#[11d]">__switch$$</a>
 <LI><a href="#[11f]">__switch$$</a>
 <LI><a href="#[137]">__switch$$</a>
 <LI><a href="#[13d]">__switch$$</a>
 <LI><a href="#[d1]">__switch$$</a>
 <LI><a href="#[e6]">__switch$$</a>
 <LI><a href="#[eb]">__switch$$</a>
 <LI><a href="#[e4]">__switch$$</a>
 <LI><a href="#[90]">__switch$$</a>
 <LI><a href="#[a0]">__switch$$</a>
 <LI><a href="#[a2]">__switch$$</a>
 <LI><a href="#[ab]">__switch$$</a>
 <LI><a href="#[ad]">__switch$$</a>
 <LI><a href="#[b0]">__switch$$</a>
 <LI><a href="#[d7]">__switch$$</a>
 <LI><a href="#[d8]">__switch$$</a>
 <LI><a href="#[d9]">__switch$$</a>
 <LI><a href="#[da]">__switch$$</a>
 <LI><a href="#[db]">__switch$$</a>
 <LI><a href="#[dc]">__switch$$</a>
 <LI><a href="#[dd]">__switch$$</a>
 <LI><a href="#[de]">__switch$$</a>
 <LI><a href="#[df]">__switch$$</a>
 <LI><a href="#[9e]">__switch$$</a>
 <LI><a href="#[9f]">__switch$$</a>
 <LI><a href="#[8f]">__switch$$</a>
 <LI><a href="#[cc]">__switch$$</a>
 <LI><a href="#[16e]">__switch$$</a>
 <LI><a href="#[16f]">__switch$$</a>
 <LI><a href="#[170]">__switch$$</a>
 <LI><a href="#[99]">__switch$$</a>
 <LI><a href="#[be]">__switch$$</a>
 <LI><a href="#[c0]">__switch$$</a>
 <LI><a href="#[c5]">__switch$$</a>
 <LI><a href="#[140]">__switch$$</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[556]">_BinaryTreeSearch</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[556]">_BinaryTreeSearch</a><BR>
 <LI><a href="#[554]">_BinaryTreeInsertBlock</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[554]">_BinaryTreeInsertBlock</a><BR>
 <LI><a href="#[552]">_BinaryTreeGetFrm</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[552]">_BinaryTreeGetFrm</a><BR>
 <LI><a href="#[557]">_BinaryTreeSearchMax</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[557]">_BinaryTreeSearchMax</a><BR>
 <LI><a href="#[551]">_BinaryTreeEmpty</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[551]">_BinaryTreeEmpty</a><BR>
 <LI><a href="#[555]">_BinaryTreeInsertFrame</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[555]">_BinaryTreeInsertFrame</a><BR>
 <LI><a href="#[553]">_BinaryTreeGetPos</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[553]">_BinaryTreeGetPos</a><BR>
 <LI><a href="#[670]">exifApp1Parse</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[672]">exifFileParse</a><BR>
 <LI><a href="#[319]">FS__fat_dir_realsec</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[320]">FS__fat_find_dir</a><BR>
 <LI><a href="#[1f1]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f1]">_sys_exit</a><BR>
 <LI><a href="#[43f]">lwip_sendto</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35a]">lwip_send</a><BR>
 <LI><a href="#[2d1]">FSFATFileDelete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d1]">FSFATFileDelete</a><BR>
 <LI><a href="#[502]">tutk_bst_walkpre</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[502]">tutk_bst_walkpre</a><BR>
 <LI><a href="#[50d]">Task_RunAction</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50c]">tutk_TaskMng_Purge</a><BR>
 <LI><a href="#[4fe]">tutk_bst_walk_purge</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4fe]">tutk_bst_walk_purge</a><BR>
 <LI><a href="#[87d]">tutk_bst_delete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[87d]">tutk_bst_delete</a><BR>
 <LI><a href="#[558]">_BinaryTreeSearchMin</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[558]">_BinaryTreeSearchMin</a><BR>
 <LI><a href="#[4fc]">TCP_PurgeFd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4ff]">TCP_RunAction</a><BR>
 <LI><a href="#[70c]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[70c]">netconn_drain</a><BR>
 <LI><a href="#[92e]">uiMenuSet_Overwrite</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[92e]">uiMenuSet_Overwrite</a><BR>
 <LI><a href="#[930]">uiMenuSet_Default</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[896]">uiMenuAction</a><BR>
 <LI><a href="#[913]">uiMenuSet_TX_CameraResolution</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[913]">uiMenuSet_TX_CameraResolution</a><BR>
 <LI><a href="#[92d]">uiMenuSet_REC_MODE_BY_CH</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[92d]">uiMenuSet_REC_MODE_BY_CH</a><BR>
 <LI><a href="#[93d]">uiMenuSet_Motion_Section</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[93d]">uiMenuSet_Motion_Section</a><BR>
 <LI><a href="#[937]">uiMenuSet_LS_Status</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[937]">uiMenuSet_LS_Status</a><BR>
 <LI><a href="#[938]">uiMenuSet_LS_ONOFF</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[938]">uiMenuSet_LS_ONOFF</a><BR>
 <LI><a href="#[93a]">uiMenuSet_CameraAlarm_Status</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[93a]">uiMenuSet_CameraAlarm_Status</a><BR>
 <LI><a href="#[93b]">uiMenuSet_CA_ONOFF</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[93b]">uiMenuSet_CA_ONOFF</a><BR>
 <LI><a href="#[8de]">uiGraphDrawPlaybackList</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8dc]">uiOsdDrawPlaybackMenu</a><BR>
 <LI><a href="#[8c9]">uiGraphDrawTimezone</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89d]">uiGraphDrawMenu</a><BR>
 <LI><a href="#[8cc]">uiGraphDrawStaticIP</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89d]">uiGraphDrawMenu</a><BR>
 <LI><a href="#[8c7]">uiGraphDrawScheduledSetting</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89d]">uiGraphDrawMenu</a><BR>
 <LI><a href="#[8c6]">uiGraphDrawScheduled</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89d]">uiGraphDrawMenu</a><BR>
 <LI><a href="#[8c2]">uiGraphDrawResolution</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89d]">uiGraphDrawMenu</a><BR>
 <LI><a href="#[8c4]">uiGraphDrawRECMode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89d]">uiGraphDrawMenu</a><BR>
 <LI><a href="#[8c5]">uiGraphDrawMotionSensitivity</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89d]">uiGraphDrawMenu</a><BR>
 <LI><a href="#[8ce]">uiGraphDrawKeypad</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89d]">uiGraphDrawMenu</a><BR>
 <LI><a href="#[8c8]">uiGraphDrawDateTime</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89d]">uiGraphDrawMenu</a><BR>
 <LI><a href="#[8c0]">uiGraphDrawCameraOnOff</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89d]">uiGraphDrawMenu</a><BR>
 <LI><a href="#[8c1]">uiGraphDrawCameraAlarmOnOff</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89d]">uiGraphDrawMenu</a><BR>
 <LI><a href="#[8c3]">uiGraphDrawBrightness</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89d]">uiGraphDrawMenu</a><BR>
 <LI><a href="#[984]">usb_hub_configure</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[698]">usb_hub_port_connect_change</a><BR>
 <LI><a href="#[1af]">Test_Clean_Dcache</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1af]">Test_Clean_Dcache</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[54]">A7196_WOR_enable_B1</a> from amic7196.o(i.A7196_WOR_enable_B1) referenced 2 times from sys.o(.data)
 <LI><a href="#[7f]">Abort_Handler</a> from vectors.o(Vect) referenced from vectors.o(Vect)
 <LI><a href="#[c6]">AvClientRecvIotcData</a> from avapis.o(i.AvClientRecvIotcData) referenced from avapis.o(i.avClientStart_inner)
 <LI><a href="#[c9]">AvSrvRecvIotcData</a> from avapis.o(i.AvSrvRecvIotcData) referenced from avapis.o(i.avServStart)
 <LI><a href="#[ed]">DrawLogoTask</a> from main_task_project.o(i.DrawLogoTask) referenced from main_task_project.o(i.mainTask)
 <LI><a href="#[47]">FSFATFreeFATLink_bg</a> from fat_misc.o(i.FSFATFreeFATLink_bg) referenced 2 times from sys.o(.data)
 <LI><a href="#[195]">FS__fat_MkRmDir</a> from fat_dir.o(i.FS__fat_MkRmDir) referenced 2 times from fat_misc.o(.constdata)
 <LI><a href="#[193]">FS__fat_closedir</a> from fat_dir.o(i.FS__fat_closedir) referenced from fat_misc.o(.constdata)
 <LI><a href="#[18e]">FS__fat_fclose</a> from fat_out.o(i.FS__fat_fclose) referenced from fat_misc.o(.constdata)
 <LI><a href="#[18d]">FS__fat_fopen</a> from fat_open.o(i.FS__fat_fopen) referenced from fat_misc.o(.constdata)
 <LI><a href="#[18f]">FS__fat_fread</a> from fat_in.o(i.FS__fat_fread) referenced from fat_misc.o(.constdata)
 <LI><a href="#[190]">FS__fat_fwrite</a> from fat_out.o(i.FS__fat_fwrite) referenced from fat_misc.o(.constdata)
 <LI><a href="#[191]">FS__fat_ioctl</a> from fat_ioct.o(i.FS__fat_ioctl) referenced from fat_misc.o(.constdata)
 <LI><a href="#[192]">FS__fat_opendir</a> from fat_dir.o(i.FS__fat_opendir) referenced from fat_misc.o(.constdata)
 <LI><a href="#[194]">FS__fat_readdir</a> from fat_dir.o(i.FS__fat_readdir) referenced from fat_misc.o(.constdata)
 <LI><a href="#[142]">Fd_Compare</a> from tutk_taskmng.o(i.Fd_Compare) referenced from tutk_taskmng.o(i.tutk_SockMng_Remove)
 <LI><a href="#[141]">Fd_IsDeleted</a> from tutk_taskmng.o(i.Fd_IsDeleted) referenced from tutk_taskmng.o(i.tutk_SockMng_Purge)
 <LI><a href="#[143]">Fd_RootAction</a> from tutk_taskmng.o(i.Fd_RootAction) referenced from tutk_taskmng.o(i.tutk_SockTaskMng_DeInit)
 <LI><a href="#[143]">Fd_RootAction</a> from tutk_taskmng.o(i.Fd_RootAction) referenced from tutk_taskmng.o(i.tutk_SockTaskMng_Run)
 <LI><a href="#[ba]">H264Dec_DecompressOneFrame</a> from h264.o(i.H264Dec_DecompressOneFrame) referenced from videocodec_common.o(i.VideoCodecInit)
 <LI><a href="#[b9]">H264Enc_CompressOneFrame</a> from h264.o(i.H264Enc_CompressOneFrame) referenced from videocodec_common.o(i.VideoCodecInit)
 <LI><a href="#[b7]">H264Enc_DecSliceType</a> from h264.o(i.H264Enc_DecSliceType) referenced from videocodec_common.o(i.VideoCodecInit)
 <LI><a href="#[b8]">H264Enc_SetResolution</a> from h264.o(i.H264Enc_SetResolution) referenced from videocodec_common.o(i.VideoCodecInit)
 <LI><a href="#[fc]">IRIntHandler</a> from ir_ppm.o(i.IRIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[97]">LanSearchPrecheckRTaskCB</a> from iotcapis.o(i.LanSearchPrecheckRTaskCB) referenced from iotcapis.o(i.IOTC_Handler_MSG_LAN_SEARCH)
 <LI><a href="#[198]">LinuxConnMgr_createNewConnection</a> from tconn_manager.o(i.LinuxConnMgr_createNewConnection) referenced from tconn_manager.o(.constdata)
 <LI><a href="#[199]">LinuxConnMgr_destroyConnection</a> from tconn_manager.o(i.LinuxConnMgr_destroyConnection) referenced from tconn_manager.o(.constdata)
 <LI><a href="#[19a]">LinuxConnMgr_setTimeout</a> from tconn_manager.o(i.LinuxConnMgr_setTimeout) referenced from tconn_manager.o(.constdata)
 <LI><a href="#[1a3]">LinuxTConnection_changeDistance</a> from tconnection.o(i.LinuxTConnection_changeDistance) referenced from tconnection.o(.constdata)
 <LI><a href="#[1a5]">LinuxTConnection_getAttribute</a> from tconnection.o(i.LinuxTConnection_getAttribute) referenced from tconnection.o(.constdata)
 <LI><a href="#[1a2]">LinuxTConnection_getLocal</a> from tconnection.o(i.LinuxTConnection_getLocal) referenced from tconnection.o(.constdata)
 <LI><a href="#[1a1]">LinuxTConnection_getStatus</a> from tconnection.o(i.LinuxTConnection_getStatus) referenced from tconnection.o(.constdata)
 <LI><a href="#[1a6]">LinuxTConnection_keepRecvMessage</a> from tconnection.o(i.LinuxTConnection_keepRecvMessage) referenced from tconnection.o(.constdata)
 <LI><a href="#[19b]">LinuxTConnection_registerBreakTimeCB</a> from tconn_manager.o(i.LinuxTConnection_registerBreakTimeCB) referenced from tconn_manager.o(.constdata)
 <LI><a href="#[1a0]">LinuxTConnection_registerErrHandlingCB</a> from tconnection.o(i.LinuxTConnection_registerErrHandlingCB) referenced from tconnection.o(.constdata)
 <LI><a href="#[19f]">LinuxTConnection_registerRecvMsgCb</a> from tconnection.o(i.LinuxTConnection_registerRecvMsgCb) referenced from tconnection.o(.constdata)
 <LI><a href="#[19d]">LinuxTConnection_sendMessage</a> from tconnection.o(i.LinuxTConnection_sendMessage) referenced from tconnection.o(.constdata)
 <LI><a href="#[19e]">LinuxTConnection_sendMessageTo</a> from tconnection.o(i.LinuxTConnection_sendMessageTo) referenced from tconnection.o(.constdata)
 <LI><a href="#[1a4]">LinuxTConnection_setAttribute</a> from tconnection.o(i.LinuxTConnection_setAttribute) referenced from tconnection.o(.constdata)
 <LI><a href="#[19c]">LinuxTConnection_setup</a> from tconnection.o(i.LinuxTConnection_setup) referenced from tconnection.o(.constdata)
 <LI><a href="#[ae]">LoginInfoCB</a> from tutk_av_sample.o(i.LoginInfoCB) referenced from tutk_av_sample.o(i.Task_SessionHandler)
 <LI><a href="#[bc]">MultiChannelH264Enc_CompressOneFrame</a> from multichannelh264.o(i.MultiChannelH264Enc_CompressOneFrame) referenced from videocodec_common.o(i.VideoCodecInit)
 <LI><a href="#[bb]">MultiChannelH264Enc_DecSliceType</a> from multichannelh264.o(i.MultiChannelH264Enc_DecSliceType) referenced from videocodec_common.o(i.VideoCodecInit)
 <LI><a href="#[103]">MultiChannelH264IntHandler</a> from multichannelh264.o(i.MultiChannelH264IntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[1a7]">OS_TaskIdle</a> from os_core_1.o(i.OS_TaskIdle) referenced from os_core_1.o(i.OSInit)
 <LI><a href="#[8d]">P2PConnectionRecvCallback</a> from iotcapis.o(i.P2PConnectionRecvCallback) referenced from iotcapis.o(i.AddTryPortNode)
 <LI><a href="#[8d]">P2PConnectionRecvCallback</a> from iotcapis.o(i.P2PConnectionRecvCallback) referenced from iotcapis.o(i.IOTC_OpenUDP_LANSocket)
 <LI><a href="#[8d]">P2PConnectionRecvCallback</a> from iotcapis.o(i.P2PConnectionRecvCallback) referenced from iotcapis.o(i.IOTC_OpenUDP_P2PSocket)
 <LI><a href="#[66]">P2PSendEvent</a> from tutk_av_sample.o(i.P2PSendEvent) referenced 2 times from sys.o(.data)
 <LI><a href="#[7e]">Prefetch_Handler</a> from vectors.o(Vect) referenced from vectors.o(Vect)
 <LI><a href="#[1a9]">Reset_Handler</a> from init.o(INIT) referenced from vectors.o(Vect)
 <LI><a href="#[a1]">RfRxVideoPackerSubTask</a> from sys_project.o(i.RfRxVideoPackerSubTask) referenced from sys_project.o(i.RfRxVideoPackerSubTaskCreate)
 <LI><a href="#[7d]">SWI_Handler</a> from vectors.o(Vect) referenced from vectors.o(Vect)
 <LI><a href="#[60]">Save_UI_Setting_Task</a> from ui.o(i.Save_UI_Setting_Task) referenced 2 times from sys.o(.data)
 <LI><a href="#[93]">SendDeviceLoginCB</a> from iotcapis.o(i.SendDeviceLoginCB) referenced from iotcapis.o(i.IOTC_Device_Login)
 <LI><a href="#[93]">SendDeviceLoginCB</a> from iotcapis.o(i.SendDeviceLoginCB) referenced from iotcapis.o(i.SendDeviceLoginCB)
 <LI><a href="#[93]">SendDeviceLoginCB</a> from iotcapis.o(i.SendDeviceLoginCB) referenced from iotcapis.o(i._IOTC_Packet_Handler)
 <LI><a href="#[95]">SendKeepNATCB</a> from iotcapis.o(i.SendKeepNATCB) referenced from iotcapis.o(i.IOTC_Device_Login)
 <LI><a href="#[8c]">SendLanSearchTaskCB</a> from iotcapis.o(i.SendLanSearchTaskCB) referenced from iotcapis.o(i.AddSendLANSearch)
 <LI><a href="#[af]">ShowOnlineUserNum</a> from tutk_av_sample.o(i.ShowOnlineUserNum) referenced from tutk_av_sample.o(i.Task_SessionHandler)
 <LI><a href="#[c8]">StopSendIOCtrl</a> from tutk_av_sample.o(i.StopSendIOCtrl) referenced from tutk_av_sample.o(i.avSendIOCtrlWithTimeout)
 <LI><a href="#[13e]">SysTimerTask</a> from timer.o(i.SysTimerTask) referenced from timer.o(i.timerInit)
 <LI><a href="#[13f]">SysTimerTickTask</a> from timer.o(i.SysTimerTickTask) referenced from timer.o(i.timerInit)
 <LI><a href="#[a4]">TCP_Compare</a> from tutk_taskmng.o(i.TCP_Compare) referenced from tutk_taskmng.o(i.TCP_RootAction)
 <LI><a href="#[a4]">TCP_Compare</a> from tutk_taskmng.o(i.TCP_Compare) referenced from tutk_taskmng.o(i.tutk_SockMng_Remove)
 <LI><a href="#[a3]">TCP_IsDeleted</a> from tutk_taskmng.o(i.TCP_IsDeleted) referenced from tutk_taskmng.o(i.TCP_PurgeFd)
 <LI><a href="#[a5]">TCP_RootAction</a> from tutk_taskmng.o(i.TCP_RootAction) referenced from tutk_taskmng.o(i.TCP_RunAction)
 <LI><a href="#[a6]">TConnManager_destroy</a> from tconn_manager.o(i.TConnManager_destroy) referenced from tconn_manager.o(i.TConnManager_create)
 <LI><a href="#[a9]">TConnection_destroy</a> from tconnection.o(i.TConnection_destroy) referenced from tconnection.o(i.TConnection_new)
 <LI><a href="#[197]">TObject_decRef</a> from tobject.o(i.TObject_decRef) referenced 2 times from tconn_manager.o(.constdata)
 <LI><a href="#[196]">TObject_incRef</a> from tobject.o(i.TObject_incRef) referenced 2 times from tconn_manager.o(.constdata)
 <LI><a href="#[8e]">T_LwIPEntry</a> from lwipentry.o(i.T_LwIPEntry) referenced from ftmac110.o(i.FTMAC110_main)
 <LI><a href="#[145]">Task_Compare</a> from tutk_taskmng.o(i.Task_Compare) referenced from tutk_taskmng.o(i.tutk_TaskMng_Create)
 <LI><a href="#[146]">Task_IsDeleted</a> from tutk_taskmng.o(i.Task_IsDeleted) referenced from tutk_taskmng.o(i.tutk_TaskMng_Purge)
 <LI><a href="#[149]">Task_Listen</a> from tutk_av_sample.o(i.Task_Listen) referenced from tutk_av_sample.o(i.tutk_av_sample)
 <LI><a href="#[147]">Task_Login</a> from tutk_av_sample.o(i.Task_Login) referenced from tutk_av_sample.o(i.tutk_av_sample)
 <LI><a href="#[ac]">Task_RootAction</a> from tutk_taskmng.o(i.Task_RootAction) referenced from tutk_taskmng.o(i.Task_RunAction)
 <LI><a href="#[148]">Task_SessionHandler</a> from tutk_av_sample.o(i.Task_SessionHandler) referenced from tutk_av_sample.o(i.tutk_av_sample)
 <LI><a href="#[91]">Task_Speaker</a> from tutk_av_sample.o(i.Task_Speaker) referenced from tutk_av_sample.o(i.Handle_IOCTRL_Cmd)
 <LI><a href="#[92]">Task_remote_file_playback</a> from tutk_av_sample.o(i.Task_remote_file_playback) referenced from tutk_av_sample.o(i.Handle_IOCTRL_Cmd)
 <LI><a href="#[b6]">TmrTask</a> from tmr.o(i.TmrTask) referenced from tmr.o(i.TmrInit)
 <LI><a href="#[81]">UCOS_FIQHandler</a> from os_cpu_a.o(UCOS_ARM) referenced from vectors.o(Vect)
 <LI><a href="#[80]">UCOS_IRQHandler</a> from os_cpu_a.o(UCOS_ARM) referenced from vectors.o(Vect)
 <LI><a href="#[bf]">UDPRelaySessionInfoRequestTaskCB</a> from iotcapis.o(i.UDPRelaySessionInfoRequestTaskCB) referenced from iotcapis.o(i._UpdateUdpServerRelayRequestRStatus)
 <LI><a href="#[7c]">Undefined_Handler</a> from vectors.o(Vect) referenced from vectors.o(Vect)
 <LI><a href="#[68]">Upgrade_fw_net</a> from tutk_av_sample.o(i.Upgrade_fw_net) referenced 2 times from sys.o(.data)
 <LI><a href="#[bd]">VideoTask</a> from videocodec_common.o(i.VideoTask) referenced from videocodec_common.o(i.VideoCodecInit)
 <LI><a href="#[98]">_IOTC_callback_Try_Port</a> from iotcapis.o(i._IOTC_callback_Try_Port) referenced from iotcapis.o(i.IOTC_Handler_MSG_P2P_PUNCH_TO2)
 <LI><a href="#[98]">_IOTC_callback_Try_Port</a> from iotcapis.o(i._IOTC_callback_Try_Port) referenced from iotcapis.o(i._IOTC_callback_Try_Port)
 <LI><a href="#[9b]">_IOTC_thread_Session_Alive</a> from iotcapis.o(i._IOTC_thread_Session_Alive) referenced from iotcapis.o(i.IOTC_Initialize2)
 <LI><a href="#[1aa]">__main</a> from __main.o(!!!main) referenced from init.o(INIT)
 <LI><a href="#[8f]">__switch$$</a> from h264.o(i.H264Dec_ParseHeader) referenced 13 times from h264.o(i.H264Dec_ParseHeader)
 <LI><a href="#[90]">__switch$$</a> from tutk_av_sample.o(i.Handle_IOCTRL_Cmd) referenced 5 times from tutk_av_sample.o(i.Handle_IOCTRL_Cmd)
 <LI><a href="#[99]">__switch$$</a> from iotcapis.o(i.IOTC_Handler_MSG_RLY_REQUEST_R2) referenced 9 times from iotcapis.o(i.IOTC_Handler_MSG_RLY_REQUEST_R2)
 <LI><a href="#[9e]">__switch$$</a> from multichannelh264.o(i.MultiChannelH264Enc_CompressOneFrame) referenced 5 times from multichannelh264.o(i.MultiChannelH264Enc_CompressOneFrame)
 <LI><a href="#[9f]">__switch$$</a> from multichannelh264.o(i.MultiChannelH264Enc_InitBuf) referenced 6 times from multichannelh264.o(i.MultiChannelH264Enc_InitBuf)
 <LI><a href="#[a0]">__switch$$</a> from tutk_av_sample.o(i.PrintErrHandling) referenced 43 times from tutk_av_sample.o(i.PrintErrHandling)
 <LI><a href="#[a2]">__switch$$</a> from tutk_av_sample.o(i.Start_P2P_Session) referenced 6 times from tutk_av_sample.o(i.Start_P2P_Session)
 <LI><a href="#[ab]">__switch$$</a> from tutk_av_sample.o(i.Task_Listen) referenced 5 times from tutk_av_sample.o(i.Task_Listen)
 <LI><a href="#[ad]">__switch$$</a> from tutk_av_sample.o(i.Task_SessionHandler) referenced 5 times from tutk_av_sample.o(i.Task_SessionHandler)
 <LI><a href="#[b0]">__switch$$</a> from timer.o(i.TimerGetTimerCounter) referenced 8 times from timer.o(i.TimerGetTimerCounter)
 <LI><a href="#[be]">__switch$$</a> from iotcapis.o(i._IOTC_Packet_Handler) referenced 7 times from iotcapis.o(i._IOTC_Packet_Handler)
 <LI><a href="#[c0]">__switch$$</a> from avapis.o(i._doClientAVTrans) referenced 7 times from avapis.o(i._doClientAVTrans)
 <LI><a href="#[c5]">__switch$$</a> from avapis.o(i.avCalu) referenced 30 times from avapis.o(i.avCalu)
 <LI><a href="#[cb]">__switch$$</a> from dcf.o(i.dcfGetNewFileTime) referenced 7 times from dcf.o(i.dcfGetNewFileTime)
 <LI><a href="#[cc]">__switch$$</a> from usb_storage.o(i.dev_print) referenced 9 times from usb_storage.o(i.dev_print)
 <LI><a href="#[d1]">__switch$$</a> from sockets.o(i.event_callback) referenced 5 times from sockets.o(i.event_callback)
 <LI><a href="#[d2]">__switch$$</a> from exif.o(i.exifFileParse) referenced 33 times from exif.o(i.exifFileParse)
 <LI><a href="#[d4]">__switch$$</a> from exif.o(i.exifIfdParse) referenced 11 times from exif.o(i.exifIfdParse)
 <LI><a href="#[d5]">__switch$$</a> from exif.o(i.exifIfdTag) referenced 35 times from exif.o(i.exifIfdTag)
 <LI><a href="#[d7]">__switch$$</a> from idu.o(i.iduIntHandler) referenced 12 times from idu.o(i.iduIntHandler)
 <LI><a href="#[d9]">__switch$$</a> from idu.o(i.iduOSDDisable) referenced 7 times from idu.o(i.iduOSDDisable)
 <LI><a href="#[da]">__switch$$</a> from idu.o(i.iduOSDDisable_All) referenced 7 times from idu.o(i.iduOSDDisable_All)
 <LI><a href="#[db]">__switch$$</a> from idu.o(i.iduOSDEnable) referenced 7 times from idu.o(i.iduOSDEnable)
 <LI><a href="#[dc]">__switch$$</a> from idu.o(i.iduOSDGetYStartEnd) referenced 5 times from idu.o(i.iduOSDGetYStartEnd)
 <LI><a href="#[dd]">__switch$$</a> from idu.o(i.iduTVOSDDisable) referenced 6 times from idu.o(i.iduTVOSDDisable)
 <LI><a href="#[de]">__switch$$</a> from idu.o(i.iduTVOSDDisable_All) referenced 6 times from idu.o(i.iduTVOSDDisable_All)
 <LI><a href="#[df]">__switch$$</a> from idu.o(i.iduTVOSDEnable) referenced 6 times from idu.o(i.iduTVOSDEnable)
 <LI><a href="#[e4]">__switch$$</a> from ip4_addr.o(i.ip4addr_aton) referenced 5 times from ip4_addr.o(i.ip4addr_aton)
 <LI><a href="#[e6]">__switch$$</a> from sockets.o(i.lwip_getsockopt) referenced 6 times from sockets.o(i.lwip_getsockopt)
 <LI><a href="#[eb]">__switch$$</a> from sockets.o(i.lwip_setsockopt) referenced 6 times from sockets.o(i.lwip_setsockopt)
 <LI><a href="#[11d]">__switch$$</a> from pbuf.o(i.pbuf_alloc) referenced 5 times from pbuf.o(i.pbuf_alloc)
 <LI><a href="#[11f]">__switch$$</a> from pbuf.o(i.pbuf_alloced_custom) referenced 5 times from pbuf.o(i.pbuf_alloced_custom)
 <LI><a href="#[123]">__switch$$</a> from rfiu.o(i.rfiu_Rx_Task_UnitX) referenced 12 times from rfiu.o(i.rfiu_Rx_Task_UnitX)
 <LI><a href="#[125]">__switch$$</a> from spiapi.o(i.spiAddressLocate) referenced 16 times from spiapi.o(i.spiAddressLocate)
 <LI><a href="#[126]">__switch$$</a> from spi_wbd_eon.o(i.spiIdentification) referenced 19 times from spi_wbd_eon.o(i.spiIdentification)
 <LI><a href="#[129]">__switch$$</a> from spi_wbd_eon.o(i.spiSemProcess) referenced 24 times from spi_wbd_eon.o(i.spiSemProcess)
 <LI><a href="#[130]">__switch$$</a> from sys_project.o(i.sysProjectSDCD_IN) referenced 21 times from sys_project.o(i.sysProjectSDCD_IN)
 <LI><a href="#[137]">__switch$$</a> from tcp_in.o(i.tcp_process) referenced 8 times from tcp_in.o(i.tcp_process)
 <LI><a href="#[13d]">__switch$$</a> from tcpip.o(i.tcpip_thread) referenced 5 times from tcpip.o(i.tcpip_thread)
 <LI><a href="#[140]">__switch$$</a> from terror.o(i.tos_convert_error) referenced 125 times from terror.o(i.tos_convert_error)
 <LI><a href="#[14b]">__switch$$</a> from ui.o(i.uiClearFfQuadBuf) referenced 6 times from ui.o(i.uiClearFfQuadBuf)
 <LI><a href="#[14c]">__switch$$</a> from ui_flow_project.o(i.uiEventHandler) referenced 14 times from ui_flow_project.o(i.uiEventHandler)
 <LI><a href="#[14d]">__switch$$</a> from ui_flow_project.o(i.uiFlowPlaybackListMode) referenced 6 times from ui_flow_project.o(i.uiFlowPlaybackListMode)
 <LI><a href="#[14e]">__switch$$</a> from ui_flow_project.o(i.uiFlowPlaybackMode) referenced 14 times from ui_flow_project.o(i.uiFlowPlaybackMode)
 <LI><a href="#[14f]">__switch$$</a> from ui_flow_project.o(i.uiFlowQuadMode) referenced 7 times from ui_flow_project.o(i.uiFlowQuadMode)
 <LI><a href="#[150]">__switch$$</a> from ui_flow_project.o(i.uiFlowSdCardMode) referenced 12 times from ui_flow_project.o(i.uiFlowSdCardMode)
 <LI><a href="#[151]">__switch$$</a> from ui_flow_project.o(i.uiFlowVideoMode) referenced 15 times from ui_flow_project.o(i.uiFlowVideoMode)
 <LI><a href="#[152]">__switch$$</a> from ui_graph_project.o(i.uiGraphDrawBrightness) referenced 7 times from ui_graph_project.o(i.uiGraphDrawBrightness)
 <LI><a href="#[153]">__switch$$</a> from ui_graph_project.o(i.uiGraphDrawCameraAlarmOnOff) referenced 7 times from ui_graph_project.o(i.uiGraphDrawCameraAlarmOnOff)
 <LI><a href="#[154]">__switch$$</a> from ui_graph_project.o(i.uiGraphDrawCameraOnOff) referenced 7 times from ui_graph_project.o(i.uiGraphDrawCameraOnOff)
 <LI><a href="#[155]">__switch$$</a> from ui_graph_project.o(i.uiGraphDrawKeypadGraph) referenced 12 times from ui_graph_project.o(i.uiGraphDrawKeypadGraph)
 <LI><a href="#[156]">__switch$$</a> from ui_graph_project.o(i.uiGraphDrawMotionSensitivity) referenced 7 times from ui_graph_project.o(i.uiGraphDrawMotionSensitivity)
 <LI><a href="#[157]">__switch$$</a> from ui_graph_project.o(i.uiGraphDrawRECMode) referenced 7 times from ui_graph_project.o(i.uiGraphDrawRECMode)
 <LI><a href="#[158]">__switch$$</a> from ui_graph_project.o(i.uiGraphDrawResolution) referenced 7 times from ui_graph_project.o(i.uiGraphDrawResolution)
 <LI><a href="#[159]">__switch$$</a> from ui_graph_project.o(i.uiGraphDrawScheduled) referenced 7 times from ui_graph_project.o(i.uiGraphDrawScheduled)
 <LI><a href="#[15a]">__switch$$</a> from ui_graph_project.o(i.uiGraphDrawScheduledSetting) referenced 7 times from ui_graph_project.o(i.uiGraphDrawScheduledSetting)
 <LI><a href="#[15b]">__switch$$</a> from ui_graph_project.o(i.uiGraphDrawSelectDateTime) referenced 26 times from ui_graph_project.o(i.uiGraphDrawSelectDateTime)
 <LI><a href="#[15e]">__switch$$</a> from ui_graph_project.o(i.uiGraphDrawTimeGraph) referenced 6 times from ui_graph_project.o(i.uiGraphDrawTimeGraph)
 <LI><a href="#[15f]">__switch$$</a> from ui_graph_project.o(i.uiGraphDrawTimezone) referenced 7 times from ui_graph_project.o(i.uiGraphDrawTimezone)
 <LI><a href="#[162]">__switch$$</a> from ui_flow_project.o(i.uiKeyParse) referenced 66 times from ui_flow_project.o(i.uiKeyParse)
 <LI><a href="#[163]">__switch$$</a> from ui_act_project.o(i.uiMenuAction) referenced 89 times from ui_act_project.o(i.uiMenuAction)
 <LI><a href="#[164]">__switch$$</a> from ui_osd_project.o(i.uiOsdDrawPlaybackMenuDoor) referenced 8 times from ui_osd_project.o(i.uiOsdDrawPlaybackMenuDoor)
 <LI><a href="#[165]">__switch$$</a> from ui_osd_project.o(i.uiOsdDrawPlaybackMenuTitle) referenced 6 times from ui_osd_project.o(i.uiOsdDrawPlaybackMenuTitle)
 <LI><a href="#[166]">__switch$$</a> from ui.o(i.uiSetP2PStatueToRF) referenced 8 times from ui.o(i.uiSetP2PStatueToRF)
 <LI><a href="#[167]">__switch$$</a> from ui.o(i.uiSetRfChangeAudio_QuadMode) referenced 6 times from ui.o(i.uiSetRfChangeAudio_QuadMode)
 <LI><a href="#[168]">__switch$$</a> from ui.o(i.uiSetRfChangeChannel) referenced 7 times from ui.o(i.uiSetRfChangeChannel)
 <LI><a href="#[169]">__switch$$</a> from ui.o(i.uiSetRfChgPTZ_CH) referenced 6 times from ui.o(i.uiSetRfChgPTZ_CH)
 <LI><a href="#[16a]">__switch$$</a> from ui.o(i.uiSetRfDisplayMode) referenced 6 times from ui.o(i.uiSetRfDisplayMode)
 <LI><a href="#[16b]">__switch$$</a> from ui.o(i.uiSetRfResolutionRxToTx) referenced 9 times from ui.o(i.uiSetRfResolutionRxToTx)
 <LI><a href="#[16e]">__switch$$</a> from usb-transfer.o(i.usb_hid_bit_format) referenced 10 times from usb-transfer.o(i.usb_hid_bit_format)
 <LI><a href="#[16f]">__switch$$</a> from usb-transfer.o(i.usb_hid_report_descriptor_handler) referenced 15 times from usb-transfer.o(i.usb_hid_report_descriptor_handler)
 <LI><a href="#[82]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[87]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[86]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[89]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[85]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[83]">_snputc</a> from _snputc.o(.text) referenced 2 times from vsnprintf.o(.text)
 <LI><a href="#[84]">_sputc</a> from _sputc.o(.text) referenced 2 times from __2sprintf.o(.text)
 <LI><a href="#[e9]">accept_function</a> from api_msg.o(i.accept_function) referenced from api_msg.o(i.lwip_netconn_do_listen)
 <LI><a href="#[ef]">adcIntHandler</a> from adc_project.o(i.adcIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[17b]">autoip_tmr</a> from autoip.o(i.autoip_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[c7]">avIOTCSesstionCloseCB</a> from avapis.o(i.avIOTCSesstionCloseCB) referenced from avapis.o(i.avClientStart_inner)
 <LI><a href="#[c7]">avIOTCSesstionCloseCB</a> from avapis.o(i.avIOTCSesstionCloseCB) referenced from avapis.o(i.avServStart)
 <LI><a href="#[9a]">breakTimeCallBack</a> from iotcapis.o(i.breakTimeCallBack) referenced from iotcapis.o(i.IOTC_Initialize2)
 <LI><a href="#[107]">ciuIntHandler_CH1</a> from ciu.o(i.ciuIntHandler_CH1) referenced from main.o(i.main_intInit)
 <LI><a href="#[108]">ciuIntHandler_CH2</a> from ciu.o(i.ciuIntHandler_CH2) referenced from main.o(i.main_intInit)
 <LI><a href="#[109]">ciuIntHandler_CH3</a> from ciu.o(i.ciuIntHandler_CH3) referenced from main.o(i.main_intInit)
 <LI><a href="#[10a]">ciuIntHandler_CH4</a> from ciu.o(i.ciuIntHandler_CH4) referenced from main.o(i.main_intInit)
 <LI><a href="#[a7]">connectionHandlerThread</a> from tconn_manager.o(i.connectionHandlerThread) referenced from tconn_manager.o(i.TConnManager_create)
 <LI><a href="#[ca]">cyclic_timer</a> from timeouts.o(i.cyclic_timer) referenced from timeouts.o(i.cyclic_timer)
 <LI><a href="#[ca]">cyclic_timer</a> from timeouts.o(i.cyclic_timer) referenced from timeouts.o(i.sys_timeouts_init)
 <LI><a href="#[16c]">dailyUpdateSendQueryTask</a> from iotcapis.o(i.dailyUpdateSendQueryTask) referenced from iotcapis.o(i.updateVPGServerListDailyRoutine)
 <LI><a href="#[6e]">dcfPlaybackDirBackward</a> from dcf.o(i.dcfPlaybackDirBackward) referenced 2 times from ui_osd_project.o(.data)
 <LI><a href="#[6b]">dcfPlaybackDirForward</a> from dcf.o(i.dcfPlaybackDirForward) referenced 2 times from ui_osd_project.o(.data)
 <LI><a href="#[6d]">dcfPlaybackFileNext</a> from dcf.o(i.dcfPlaybackFileNext) referenced 4 times from ui_osd_project.o(.data)
 <LI><a href="#[70]">dcfPlaybackFilePrev</a> from dcf.o(i.dcfPlaybackFilePrev) referenced 4 times from ui_osd_project.o(.data)
 <LI><a href="#[96]">deviceSessionRecyclingTask</a> from iotcapis.o(i.deviceSessionRecyclingTask) referenced from iotcapis.o(i.IOTC_Handler_MSG_LAN_SEARCH)
 <LI><a href="#[96]">deviceSessionRecyclingTask</a> from iotcapis.o(i.deviceSessionRecyclingTask) referenced from iotcapis.o(i.IOTC_Handler_MSG_P2P_PUNCH_TO2)
 <LI><a href="#[96]">deviceSessionRecyclingTask</a> from iotcapis.o(i.deviceSessionRecyclingTask) referenced from iotcapis.o(i._IOTC_Packet_Handler)
 <LI><a href="#[179]">dhcp_coarse_tmr</a> from dhcp.o(i.dhcp_coarse_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[17a]">dhcp_fine_tmr</a> from dhcp.o(i.dhcp_fine_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[cd]">dhcp_recv</a> from dhcp.o(i.dhcp_recv) referenced from dhcp.o(i.dhcp_start)
 <LI><a href="#[ce]">dns_recv</a> from dns.o(i.dns_recv) referenced from dns.o(i.dns_gethostbyname_addrtype)
 <LI><a href="#[17c]">dns_tmr</a> from dns.o(i.dns_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[10b]">encryptIntHandler</a> from des.o(i.encryptIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[c4]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.accept_function)
 <LI><a href="#[c4]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[c4]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.lwip_netconn_do_connect)
 <LI><a href="#[c4]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.lwip_netconn_do_connected)
 <LI><a href="#[c4]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.lwip_netconn_do_newconn)
 <LI><a href="#[cf]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[178]">etharp_tmr</a> from etharp.o(i.etharp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[13b]">ethernet_input</a> from ethernet.o(i.ethernet_input) referenced from tcpip.o(i.tcpip_input)
 <LI><a href="#[13a]">ethernetif_init</a> from ethernetif.o(i.ethernetif_init) referenced from lwipentry.o(i.tcpip_init_done)
 <LI><a href="#[e5]">event_callback</a> from sockets.o(i.event_callback) referenced from sockets.o(i.lwip_accept)
 <LI><a href="#[e5]">event_callback</a> from sockets.o(i.event_callback) referenced from sockets.o(i.lwip_socket)
 <LI><a href="#[88]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[a8]">freeConnItem</a> from tconn_manager.o(i.freeConnItem) referenced from tconn_manager.o(i.TConnManager_destroy)
 <LI><a href="#[f3]">ftmac110_isr</a> from ftmac110.o(i.ftmac110_isr) referenced from main.o(i.main_intInit)
 <LI><a href="#[fb]">gpioIntHandler</a> from gpio_project.o(i.gpioIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[f6]">gpio_1_IntHandler</a> from gpio_project.o(i.gpio_1_IntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[f4]">i2cIntHandler</a> from i2c.o(i.i2cIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[101]">iduIntHandler</a> from idu.o(i.iduIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[69]">iduOSDDisplay1</a> from idu.o(i.iduOSDDisplay1) referenced 2 times from ui_osd_project.o(.data)
 <LI><a href="#[6a]">iduTVOSDDisplay</a> from idu.o(i.iduTVOSDDisplay) referenced 2 times from ui_osd_project.o(.data)
 <LI><a href="#[ee]">iisIntHandler</a> from iis.o(i.iisIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[e1]">iisPlayDMA_ISR</a> from iis.o(i.iisPlayDMA_ISR) referenced from iis.o(i.iisTask)
 <LI><a href="#[e2]">iisRecDMA_ISR</a> from iis.o(i.iisRecDMA_ISR) referenced from iis.o(i.iisTask)
 <LI><a href="#[e0]">iisTask</a> from iis.o(i.iisTask) referenced from iis.o(i.iis5Init)
 <LI><a href="#[e0]">iisTask</a> from iis.o(i.iisTask) referenced from iis.o(i.iisInit)
 <LI><a href="#[13c]">ip4_input</a> from ip4.o(i.ip4_input) referenced from tcpip.o(i.tcpip_input)
 <LI><a href="#[177]">ip_reass_tmr</a> from ip4_frag.o(i.ip_reass_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[e3]">ipfrag_free_pbuf_custom</a> from ip4_frag.o(i.ipfrag_free_pbuf_custom) referenced from ip4_frag.o(i.ip4_frag)
 <LI><a href="#[105]">ipuIntHandler</a> from ipu.o(i.ipuIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[2b]">ispFirmwareNetPrepare</a> from isp.o(i.ispFirmwareNetPrepare) referenced 2 times from sys.o(.data)
 <LI><a href="#[2c]">ispFirmwareNetUpdateFlow</a> from isp.o(i.ispFirmwareNetUpdateFlow) referenced 2 times from sys.o(.data)
 <LI><a href="#[8a]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[100]">isuIntHandler</a> from isu.o(i.isuIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[104]">jpegIntHandler</a> from jpeg.o(i.jpegIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[d0]">low_level_output</a> from ethernetif.o(i.low_level_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[10e]">lwip_netconn_do_bind</a> from api_msg.o(i.lwip_netconn_do_bind) referenced from api_lib.o(i.netconn_bind)
 <LI><a href="#[10f]">lwip_netconn_do_close</a> from api_msg.o(i.lwip_netconn_do_close) referenced from api_lib.o(i.netconn_close)
 <LI><a href="#[10f]">lwip_netconn_do_close</a> from api_msg.o(i.lwip_netconn_do_close) referenced from api_lib.o(i.netconn_recv_data)
 <LI><a href="#[10f]">lwip_netconn_do_close</a> from api_msg.o(i.lwip_netconn_do_close) referenced from api_lib.o(i.netconn_shutdown)
 <LI><a href="#[110]">lwip_netconn_do_connect</a> from api_msg.o(i.lwip_netconn_do_connect) referenced from api_lib.o(i.netconn_connect)
 <LI><a href="#[e7]">lwip_netconn_do_connected</a> from api_msg.o(i.lwip_netconn_do_connected) referenced from api_msg.o(i.lwip_netconn_do_connect)
 <LI><a href="#[111]">lwip_netconn_do_delconn</a> from api_msg.o(i.lwip_netconn_do_delconn) referenced from api_lib.o(i.netconn_delete)
 <LI><a href="#[112]">lwip_netconn_do_disconnect</a> from api_msg.o(i.lwip_netconn_do_disconnect) referenced from api_lib.o(i.netconn_disconnect)
 <LI><a href="#[e8]">lwip_netconn_do_dns_found</a> from api_msg.o(i.lwip_netconn_do_dns_found) referenced from api_msg.o(i.lwip_netconn_do_gethostbyname)
 <LI><a href="#[113]">lwip_netconn_do_getaddr</a> from api_msg.o(i.lwip_netconn_do_getaddr) referenced from api_lib.o(i.netconn_getaddr)
 <LI><a href="#[114]">lwip_netconn_do_gethostbyname</a> from api_msg.o(i.lwip_netconn_do_gethostbyname) referenced from api_lib.o(i.netconn_gethostbyname)
 <LI><a href="#[115]">lwip_netconn_do_listen</a> from api_msg.o(i.lwip_netconn_do_listen) referenced from api_lib.o(i.netconn_listen_with_backlog)
 <LI><a href="#[116]">lwip_netconn_do_newconn</a> from api_msg.o(i.lwip_netconn_do_newconn) referenced from api_lib.o(i.netconn_new_with_proto_and_callback)
 <LI><a href="#[117]">lwip_netconn_do_recv</a> from api_msg.o(i.lwip_netconn_do_recv) referenced from api_lib.o(i.netconn_recv_data)
 <LI><a href="#[118]">lwip_netconn_do_send</a> from api_msg.o(i.lwip_netconn_do_send) referenced from api_lib.o(i.netconn_send)
 <LI><a href="#[119]">lwip_netconn_do_write</a> from api_msg.o(i.lwip_netconn_do_write) referenced from api_lib.o(i.netconn_write_partly)
 <LI><a href="#[ec]">mainTask</a> from main_task_project.o(i.mainTask) referenced from main.o(i.main)
 <LI><a href="#[10c]">marsDMAIntHandler</a> from mars_dma.o(i.marsDMAIntHandler) referenced from mars_dma.o(i.marsDMAInit)
 <LI><a href="#[50]">marsRfiu_FCC_DirectTXRX</a> from rfiu.o(i.marsRfiu_FCC_DirectTXRX) referenced 2 times from sys.o(.data)
 <LI><a href="#[10d]">marsTimerIntHandler</a> from mars_timer.o(i.marsTimerIntHandler) referenced from mars_timer.o(i.marsTimerInit)
 <LI><a href="#[f9]">mcpu2IntHandler</a> from mcpu.o(i.mcpu2IntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[f7]">mcpuIntHandler</a> from mcpu.o(i.mcpuIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[f8]">mdIntHandler</a> from motiondetect_hw.o(i.mdIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[11c]">netif_loop_output_ipv4</a> from netif.o(i.netif_loop_output_ipv4) referenced from netif.o(i.netif_loopif_init)
 <LI><a href="#[11b]">netif_poll</a> from netif.o(i.netif_poll) referenced from netif.o(i.netif_loop_output)
 <LI><a href="#[67]">ntpdate</a> from lwipentry.o(i.ntpdate) referenced 2 times from sys.o(.data)
 <LI><a href="#[11e]">pbuf_free_ooseq_callback</a> from pbuf.o(i.pbuf_free_ooseq_callback) referenced from pbuf.o(i.pbuf_alloc)
 <LI><a href="#[c3]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.accept_function)
 <LI><a href="#[c3]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[c3]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.lwip_netconn_do_connect)
 <LI><a href="#[c3]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.lwip_netconn_do_connected)
 <LI><a href="#[c3]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.lwip_netconn_do_newconn)
 <LI><a href="#[180]">ramDiskDevIoCtl1</a> from ramdisk.o(i.ramDiskDevIoCtl1) referenced from storage.o(.constdata)
 <LI><a href="#[17e]">ramDiskDevRead1</a> from ramdisk.o(i.ramDiskDevRead1) referenced from storage.o(.constdata)
 <LI><a href="#[17d]">ramDiskDevStatus1</a> from ramdisk.o(i.ramDiskDevStatus1) referenced from storage.o(.constdata)
 <LI><a href="#[17f]">ramDiskDevWrite1</a> from ramdisk.o(i.ramDiskDevWrite1) referenced from storage.o(.constdata)
 <LI><a href="#[c1]">recv_tcp</a> from api_msg.o(i.recv_tcp) referenced from api_msg.o(i.accept_function)
 <LI><a href="#[c1]">recv_tcp</a> from api_msg.o(i.recv_tcp) referenced from api_msg.o(i.lwip_netconn_do_connect)
 <LI><a href="#[c1]">recv_tcp</a> from api_msg.o(i.recv_tcp) referenced from api_msg.o(i.lwip_netconn_do_connected)
 <LI><a href="#[c1]">recv_tcp</a> from api_msg.o(i.recv_tcp) referenced from api_msg.o(i.lwip_netconn_do_newconn)
 <LI><a href="#[ea]">recv_udp</a> from api_msg.o(i.recv_udp) referenced from api_msg.o(i.lwip_netconn_do_newconn)
 <LI><a href="#[121]">rfiuAudioPlayDMA_ISR</a> from wraprf.o(i.rfiuAudioPlayDMA_ISR) referenced from wraprf.o(i.rfiu_RxMpeg4DecTask_UnitX)
 <LI><a href="#[122]">rfiuAudioRet_RecDMA_ISR</a> from wraprf.o(i.rfiuAudioRet_RecDMA_ISR) referenced from wraprf.o(i.rfiu_RxMpeg4DecTask_UnitX)
 <LI><a href="#[31]">rfiuForceResync</a> from rfiu.o(i.rfiuForceResync) referenced 4 times from sys.o(.data)
 <LI><a href="#[f5]">rfiuIntHandler</a> from mars_int.o(i.rfiuIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[52]">rfiuSetGPO_TX</a> from rfiu.o(i.rfiuSetGPO_TX) referenced 2 times from sys.o(.data)
 <LI><a href="#[62]">rfiuSetLightStat_RX</a> from rfiu.o(i.rfiuSetLightStat_RX) referenced 2 times from sys.o(.data)
 <LI><a href="#[5c]">rfiuSetMelodyNum_TX</a> from rfiu.o(i.rfiuSetMelodyNum_TX) referenced 2 times from sys.o(.data)
 <LI><a href="#[5b]">rfiuSetMotorCtrl_TX</a> from rfiu.o(i.rfiuSetMotorCtrl_TX) referenced 2 times from sys.o(.data)
 <LI><a href="#[5a]">rfiuSetPWM_TX</a> from rfiu.o(i.rfiuSetPWM_TX) referenced 2 times from sys.o(.data)
 <LI><a href="#[5d]">rfiuSetVoxTrig_RX</a> from rfiu.o(i.rfiuSetVoxTrig_RX) referenced 2 times from sys.o(.data)
 <LI><a href="#[55]">rfiu_ResendTxMdConfig</a> from rfiu.o(i.rfiu_ResendTxMdConfig) referenced 2 times from sys.o(.data)
 <LI><a href="#[12b]">rfiu_RxMpeg4DecTask_UnitX</a> from wraprf.o(i.rfiu_RxMpeg4DecTask_UnitX) referenced from sys.o(i.sysBack_RFI_RX_CH_Restart)
 <LI><a href="#[12b]">rfiu_RxMpeg4DecTask_UnitX</a> from wraprf.o(i.rfiu_RxMpeg4DecTask_UnitX) referenced from ui.o(i.uiRfCreateDecTask)
 <LI><a href="#[120]">rfiu_Rx_Task_UnitX</a> from rfiu.o(i.rfiu_Rx_Task_UnitX) referenced from rfiu.o(i.rfiuCamOnOffCmd)
 <LI><a href="#[120]">rfiu_Rx_Task_UnitX</a> from rfiu.o(i.rfiu_Rx_Task_UnitX) referenced from rfiu.o(i.rfiu_Start)
 <LI><a href="#[56]">rfiu_SendTxMdSense</a> from rfiu.o(i.rfiu_SendTxMdSense) referenced 2 times from sys.o(.data)
 <LI><a href="#[51]">rfiu_SetRXOpMode_1</a> from rfiu.o(i.rfiu_SetRXOpMode_1) referenced 2 times from sys.o(.data)
 <LI><a href="#[65]">rfiu_SetTXDoorBellOff</a> from rfiu.o(i.rfiu_SetTXDoorBellOff) referenced 2 times from sys.o(.data)
 <LI><a href="#[64]">rfiu_SetTXPIRCfg</a> from rfiu.o(i.rfiu_SetTXPIRCfg) referenced 2 times from sys.o(.data)
 <LI><a href="#[63]">rfiu_SetTXReboot</a> from rfiu.o(i.rfiu_SetTXReboot) referenced 2 times from sys.o(.data)
 <LI><a href="#[58]">rfiu_SetTXTurbo_Off</a> from rfiu.o(i.rfiu_SetTXTurbo_Off) referenced 2 times from sys.o(.data)
 <LI><a href="#[57]">rfiu_SetTXTurbo_On</a> from rfiu.o(i.rfiu_SetTXTurbo_On) referenced 2 times from sys.o(.data)
 <LI><a href="#[5e]">rfiu_SetTXVoxCfg</a> from rfiu.o(i.rfiu_SetTXVoxCfg) referenced 2 times from sys.o(.data)
 <LI><a href="#[5f]">rfiu_UpdateTXOthersPara</a> from rfiu.o(i.rfiu_UpdateTXOthersPara) referenced 2 times from sys.o(.data)
 <LI><a href="#[12c]">rfiu_WrapRx_Task_UnitX</a> from wraprf.o(i.rfiu_WrapRx_Task_UnitX) referenced from sys.o(i.sysBack_RFI_RX_CH_Restart)
 <LI><a href="#[12d]">rfiu_WrapTx_Task_UnitX</a> from wraprf.o(i.rfiu_WrapTx_Task_UnitX) referenced from sys.o(i.sysBack_RFI_TX_CH_Create)
 <LI><a href="#[fe]">rtcIntHandler</a> from rtc.o(i.rtcIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[186]">sdcDevIoCtl</a> from sdcfs.o(i.sdcDevIoCtl) referenced from storage.o(.constdata)
 <LI><a href="#[183]">sdcDevMulRead</a> from sdcfs.o(i.sdcDevMulRead) referenced from storage.o(.constdata)
 <LI><a href="#[185]">sdcDevMulWrite</a> from sdcfs.o(i.sdcDevMulWrite) referenced from storage.o(.constdata)
 <LI><a href="#[182]">sdcDevRead</a> from sdcfs.o(i.sdcDevRead) referenced from storage.o(.constdata)
 <LI><a href="#[181]">sdcDevStatus</a> from sdcfs.o(i.sdcDevStatus) referenced from storage.o(.constdata)
 <LI><a href="#[184]">sdcDevWrite</a> from sdcfs.o(i.sdcDevWrite) referenced from storage.o(.constdata)
 <LI><a href="#[fa]">sdcIntHandler</a> from sdc.o(i.sdcIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[79]">sdcMountSeq</a> from sdc.o(i.sdcMountSeq) referenced 2 times from sdc.o(.data)
 <LI><a href="#[124]">sdcTask</a> from sdc.o(i.sdcTask) referenced from sdc.o(i.sdcTaskInit)
 <LI><a href="#[7a]">sdcUnmountSeq</a> from sdc.o(i.sdcUnmountSeq) referenced 2 times from sdc.o(.data)
 <LI><a href="#[c2]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.accept_function)
 <LI><a href="#[c2]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[c2]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.lwip_netconn_do_connect)
 <LI><a href="#[c2]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.lwip_netconn_do_connected)
 <LI><a href="#[c2]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.lwip_netconn_do_newconn)
 <LI><a href="#[9c]">setupFailedCallback</a> from iotcapis.o(i.setupFailedCallback) referenced from iotcapis.o(i.IOTC_OpenUDP_P2PSocket)
 <LI><a href="#[9d]">setupSuccessCallback</a> from iotcapis.o(i.setupSuccessCallback) referenced from iotcapis.o(i.IOTC_OpenUDP_P2PSocket)
 <LI><a href="#[102]">siuIntHandler</a> from siu_none.o(i.siuIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[ff]">spiIntHandler</a> from spi_wbd_eon.o(i.spiIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[4f]">spiWriteRF</a> from spiapi.o(i.spiWriteRF) referenced 2 times from sys.o(.data)
 <LI><a href="#[106]">subTVIntHandler</a> from idu.o(i.subTVIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[48]">sysBackLowGetDiskFree</a> from sys.o(i.sysBackLowGetDiskFree) referenced 2 times from sys.o(.data)
 <LI><a href="#[49]">sysBackLow_Device_Mount</a> from sys.o(i.sysBackLow_Device_Mount) referenced 2 times from sys.o(.data)
 <LI><a href="#[4a]">sysBackLow_Device_UnMount</a> from sys.o(i.sysBackLow_Device_UnMount) referenced 2 times from sys.o(.data)
 <LI><a href="#[4d]">sysBackLow_Syn_RF</a> from sys.o(i.sysBackLow_Syn_RF) referenced 2 times from sys.o(.data)
 <LI><a href="#[4b]">sysBackLow_UI_KEY_SDCD</a> from sys.o(i.sysBackLow_UI_KEY_SDCD) referenced 2 times from sys.o(.data)
 <LI><a href="#[4c]">sysBackLow_UI_KEY_USB</a> from sys.o(i.sysBackLow_UI_KEY_USB) referenced 2 times from sys.o(.data)
 <LI><a href="#[3f]">sysBack_Check_TVinFormat</a> from sys.o(i.sysBack_Check_TVinFormat) referenced 2 times from sys.o(.data)
 <LI><a href="#[3d]">sysBack_Check_UI</a> from sys.o(i.sysBack_Check_UI) referenced 2 times from sys.o(.data)
 <LI><a href="#[40]">sysBack_Check_VideoinSource</a> from sys.o(i.sysBack_Check_VideoinSource) referenced 2 times from sys.o(.data)
 <LI><a href="#[3c]">sysBack_Draw_Battery</a> from sys.o(i.sysBack_Draw_Battery) referenced 2 times from sys.o(.data)
 <LI><a href="#[42]">sysBack_Draw_BitRate</a> from sys.o(i.sysBack_Draw_BitRate) referenced 2 times from sys.o(.data)
 <LI><a href="#[43]">sysBack_Draw_FrameRate</a> from sys.o(i.sysBack_Draw_FrameRate) referenced 2 times from sys.o(.data)
 <LI><a href="#[3e]">sysBack_Draw_NET_Icon</a> from sys.o(i.sysBack_Draw_NET_Icon) referenced 2 times from sys.o(.data)
 <LI><a href="#[44]">sysBack_Draw_OSDString</a> from sys.o(i.sysBack_Draw_OSDString) referenced 2 times from sys.o(.data)
 <LI><a href="#[45]">sysBack_Draw_SD_Icon</a> from sys.o(i.sysBack_Draw_SD_Icon) referenced 2 times from sys.o(.data)
 <LI><a href="#[38]">sysBack_RFI_RX_CH_Restart</a> from sys.o(i.sysBack_RFI_RX_CH_Restart) referenced 4 times from sys.o(.data)
 <LI><a href="#[3a]">sysBack_RFI_TX_CH_Create</a> from sys.o(i.sysBack_RFI_TX_CH_Create) referenced 4 times from sys.o(.data)
 <LI><a href="#[39]">sysBack_RFI_TX_CH_Del</a> from sys.o(i.sysBack_RFI_TX_CH_Del) referenced 4 times from sys.o(.data)
 <LI><a href="#[3b]">sysBack_RFI_TX_Change_Reso</a> from sys.o(i.sysBack_RFI_TX_Change_Reso) referenced 4 times from sys.o(.data)
 <LI><a href="#[4e]">sysBack_RFI_TX_SnapShot</a> from sys.o(i.sysBack_RFI_TX_SnapShot) referenced 2 times from sys.o(.data)
 <LI><a href="#[46]">sysBack_ScheduleMode</a> from sys.o(i.sysBack_ScheduleMode) referenced 2 times from sys.o(.data)
 <LI><a href="#[41]">sysBack_Set_Sensor_Color</a> from sys.o(i.sysBack_Set_Sensor_Color) referenced 2 times from sys.o(.data)
 <LI><a href="#[13]">sysBackupFormat</a> from sys.o(i.sysBackupFormat) referenced 4 times from sys.o(.data)
 <LI><a href="#[59]">sysCaptureImage_OnRFRx</a> from sys.o(i.sysCaptureImage_OnRFRx) referenced 2 times from sys.o(.data)
 <LI><a href="#[12e]">sysCaptureVideoSubTask</a> from sys_project.o(i.sysCaptureVideoSubTask) referenced from sys_project.o(i.sysCaptureVideoSubTaskCreate)
 <LI><a href="#[2a]">sysDevInsertedUpgradeEvt</a> from sys.o(i.sysDevInsertedUpgradeEvt) referenced 2 times from sys.o(.data)
 <LI><a href="#[37]">sysDrawTimeOnVideoClip</a> from sys.o(i.sysDrawTimeOnVideoClip) referenced 2 times from sys.o(.data)
 <LI><a href="#[20]">sysFlashLight</a> from sys.o(i.sysFlashLight) referenced 2 times from sys.o(.data)
 <LI><a href="#[30]">sysGetDiskFree</a> from sys.o(i.sysGetDiskFree) referenced 4 times from sys.o(.data)
 <LI><a href="#[19]">sysLcdRot</a> from sys.o(i.sysLcdRot) referenced 2 times from sys.o(.data)
 <LI><a href="#[18]">sysMacro</a> from sys.o(i.sysMacro) referenced 2 times from sys.o(.data)
 <LI><a href="#[2e]">sysP2PReadFile</a> from sys.o(i.sysP2PReadFile) referenced 2 times from sys.o(.data)
 <LI><a href="#[2f]">sysPlaybackCalendar</a> from sys.o(i.sysPlaybackCalendar) referenced 2 times from sys.o(.data)
 <LI><a href="#[10]">sysPlaybackDelete</a> from sys.o(i.sysPlaybackDelete) referenced 2 times from sys.o(.data)
 <LI><a href="#[11]">sysPlaybackDeleteAll</a> from sys.o(i.sysPlaybackDeleteAll) referenced 2 times from sys.o(.data)
 <LI><a href="#[26]">sysPlaybackDeleteDir</a> from sys.o(i.sysPlaybackDeleteDir) referenced 2 times from sys.o(.data)
 <LI><a href="#[12]">sysPlaybackFormat</a> from sys.o(i.sysPlaybackFormat) referenced 4 times from sys.o(.data)
 <LI><a href="#[14]">sysPlaybackIsp</a> from sys.o(i.sysPlaybackIsp) referenced 2 times from sys.o(.data)
 <LI><a href="#[f]">sysPlaybackMoveBackward</a> from sys.o(i.sysPlaybackMoveBackward) referenced 2 times from sys.o(.data)
 <LI><a href="#[e]">sysPlaybackMoveForward</a> from sys.o(i.sysPlaybackMoveForward) referenced 2 times from sys.o(.data)
 <LI><a href="#[d]">sysPlaybackPan</a> from sys.o(i.sysPlaybackPan) referenced 2 times from sys.o(.data)
 <LI><a href="#[c]">sysPlaybackZoom</a> from sys.o(i.sysPlaybackZoom) referenced 2 times from sys.o(.data)
 <LI><a href="#[17]">sysPowerOff</a> from sys.o(i.sysPowerOff) referenced 2 times from sys.o(.data)
 <LI><a href="#[16]">sysPowerOn</a> from sys.o(i.sysPowerOn) referenced 2 times from sys.o(.data)
 <LI><a href="#[9]">sysPreviewInit</a> from sys.o(i.sysPreviewInit) referenced 2 times from sys.o(.data)
 <LI><a href="#[a]">sysPreviewReset</a> from sys.o(i.sysPreviewReset) referenced 2 times from sys.o(.data)
 <LI><a href="#[23]">sysPreviewZoomInOut</a> from sys.o(i.sysPreviewZoomInOut) referenced 2 times from sys.o(.data)
 <LI><a href="#[1b]">sysSDCD_IN</a> from sys.o(i.sysSDCD_IN) referenced 2 times from sys.o(.data)
 <LI><a href="#[1c]">sysSDCD_OFF</a> from sys.o(i.sysSDCD_OFF) referenced 2 times from sys.o(.data)
 <LI><a href="#[34]">sysSensorFlip</a> from sys.o(i.sysSensorFlip) referenced 2 times from sys.o(.data)
 <LI><a href="#[28]">sysSetUiKey</a> from sys.o(i.sysSetUiKey) referenced 2 times from sys.o(.data)
 <LI><a href="#[33]">sysShowTimeOnOSD_VideoClip</a> from sys.o(i.sysShowTimeOnOSD_VideoClip) referenced 2 times from sys.o(.data)
 <LI><a href="#[b]">sysSnapshot_OnPreview</a> from sys.o(i.sysSnapshot_OnPreview) referenced 2 times from sys.o(.data)
 <LI><a href="#[36]">sysTVInChannelChange_CaptureVideo</a> from sys.o(i.sysTVInChannelChange_CaptureVideo) referenced 2 times from sys.o(.data)
 <LI><a href="#[35]">sysTVInChannelChange_Preview</a> from sys.o(i.sysTVInChannelChange_Preview) referenced 2 times from sys.o(.data)
 <LI><a href="#[24]">sysTVPlaybackDelete</a> from sys.o(i.sysTVPlaybackDelete) referenced 2 times from sys.o(.data)
 <LI><a href="#[12f]">sysTask</a> from sys.o(i.sysTask) referenced from sys.o(i.sysInit)
 <LI><a href="#[22]">sysUIReadFile</a> from sys.o(i.sysUIReadFile) referenced 2 times from sys.o(.data)
 <LI><a href="#[1d]">sysUSBCD_IN</a> from sys.o(i.sysUSBCD_IN) referenced 2 times from sys.o(.data)
 <LI><a href="#[1e]">sysUSBCD_OFF</a> from sys.o(i.sysUSBCD_OFF) referenced 2 times from sys.o(.data)
 <LI><a href="#[29]">sysUpgradeFW</a> from sys.o(i.sysUpgradeFW) referenced 2 times from sys.o(.data)
 <LI><a href="#[27]">sysUsbRemoved</a> from sys.o(i.sysUsbRemoved) referenced 2 times from sys.o(.data)
 <LI><a href="#[21]">sysVOICE_REC</a> from sys.o(i.sysVOICE_REC) referenced 2 times from sys.o(.data)
 <LI><a href="#[15]">sysVideoCaptureRoot</a> from sys.o(i.sysVideoCaptureRoot) referenced 2 times from sys.o(.data)
 <LI><a href="#[2d]">sysVideoCaptureStop</a> from sys.o(i.sysVideoCaptureStop) referenced 2 times from sys.o(.data)
 <LI><a href="#[25]">sysVideoZoomInOut</a> from sys.o(i.sysVideoZoomInOut) referenced 4 times from sys.o(.data)
 <LI><a href="#[1f]">sysWhiteLight</a> from sys.o(i.sysWhiteLight) referenced 2 times from sys.o(.data)
 <LI><a href="#[1a]">sys_Device_Mount</a> from sys.o(i.sys_Device_Mount) referenced 2 times from sys.o(.data)
 <LI><a href="#[32]">sysbackEXIFWrite</a> from sys.o(i.sysbackEXIFWrite) referenced 2 times from sys.o(.data)
 <LI><a href="#[134]">sysbackTask</a> from sys.o(i.sysbackTask) referenced from sys.o(i.sys_background_init)
 <LI><a href="#[131]">sysback_Low_Task</a> from sys.o(i.sysback_Low_Task) referenced from sys.o(i.sys_backLowTask_init)
 <LI><a href="#[132]">sysback_Net_Task</a> from sys.o(i.sysback_Net_Task) referenced from sys.o(i.sys_back_Network_Task_init)
 <LI><a href="#[133]">sysback_RF_Task</a> from sys.o(i.sysback_RF_Task) referenced from sys.o(i.sys_back_RF_Task_init)
 <LI><a href="#[136]">tcp_accept_null</a> from tcp.o(i.tcp_accept_null) referenced from tcp.o(i.tcp_listen_with_backlog_and_err)
 <LI><a href="#[135]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[176]">tcp_tmr</a> from tcp.o(i.tcp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[aa]">tcpip_init_done</a> from lwipentry.o(i.tcpip_init_done) referenced from lwipentry.o(i.T_LwIPEntry)
 <LI><a href="#[11a]">tcpip_input</a> from tcpip.o(i.tcpip_input) referenced from netif.o(i.netif_init)
 <LI><a href="#[11a]">tcpip_input</a> from tcpip.o(i.tcpip_input) referenced from lwipentry.o(i.tcpip_init_done)
 <LI><a href="#[138]">tcpip_tcp_timer</a> from timeouts.o(i.tcpip_tcp_timer) referenced from timeouts.o(i.tcp_timer_needed)
 <LI><a href="#[138]">tcpip_tcp_timer</a> from timeouts.o(i.tcpip_tcp_timer) referenced from timeouts.o(i.tcpip_tcp_timer)
 <LI><a href="#[139]">tcpip_thread</a> from tcpip.o(i.tcpip_thread) referenced from tcpip.o(i.tcpip_init)
 <LI><a href="#[b1]">timer2_IntHandler</a> from timer_project.o(i.timer2_IntHandler) referenced from timer_project.o(i.TimerProjectTimerInit)
 <LI><a href="#[b2]">timer3_IntHandler</a> from timer_project.o(i.timer3_IntHandler) referenced from timer_project.o(i.TimerProjectTimerInit)
 <LI><a href="#[b3]">timer4_IntHandler</a> from timer_project.o(i.timer4_IntHandler) referenced from timer_project.o(i.TimerProjectTimerInit)
 <LI><a href="#[b4]">timerPWM5_IntHandler</a> from timer_project.o(i.timerPWM5_IntHandler) referenced from timer_project.o(i.TimerProjectTimerInit)
 <LI><a href="#[b5]">timer_zeropointfivems_IntHandler</a> from timer_project.o(i.timer_zeropointfivems_IntHandler) referenced from timer.o(i.Timer_IR_TX)
 <LI><a href="#[144]">tutk_SockTaskMng_Run</a> from tutk_taskmng.o(i.tutk_SockTaskMng_Run) referenced from tutk_taskmng.o(i.tutk_SockTaskMng_Init)
 <LI><a href="#[f1]">uart2IntHandler</a> from uart.o(i.uart2IntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[f2]">uart3IntHandler</a> from uart.o(i.uart3IntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[14a]">uartCmdTask</a> from uart.o(i.uartCmdTask) referenced from uart.o(i.uartCmdInit)
 <LI><a href="#[f0]">uartIntHandler</a> from uart.o(i.uartIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[53]">uiClearFfQuadBuf</a> from ui.o(i.uiClearFfQuadBuf) referenced 2 times from sys.o(.data)
 <LI><a href="#[72]">uiOsdDrawPlaybackMenuFile</a> from ui_osd_project.o(i.uiOsdDrawPlaybackMenuFile) referenced 6 times from ui_osd_project.o(.data)
 <LI><a href="#[71]">uiOsdDrawPlaybackMenuFolder</a> from ui_osd_project.o(i.uiOsdDrawPlaybackMenuFolder) referenced 2 times from ui_osd_project.o(.data)
 <LI><a href="#[6c]">uiOsdPlaybackFileNext</a> from ui_osd_project.o(i.uiOsdPlaybackFileNext) referenced 2 times from ui_osd_project.o(.data)
 <LI><a href="#[6f]">uiOsdPlaybackFilePrev</a> from ui_osd_project.o(i.uiOsdPlaybackFilePrev) referenced 2 times from ui_osd_project.o(.data)
 <LI><a href="#[61]">uiSetRfTimeRxToTx</a> from ui.o(i.uiSetRfTimeRxToTx) referenced 2 times from sys.o(.data)
 <LI><a href="#[161]">uiSubTask</a> from ui.o(i.uiSubTask) referenced from ui.o(i.uiInit)
 <LI><a href="#[160]">uiTask</a> from ui.o(i.uiTask) referenced from ui.o(i.uiInit)
 <LI><a href="#[94]">updateVPGServerListDailyRoutine</a> from iotcapis.o(i.updateVPGServerListDailyRoutine) referenced from iotcapis.o(i.IOTC_Device_Login)
 <LI><a href="#[fd]">usbHostIntHandler</a> from usb-transfer.o(i.usbHostIntHandler) referenced from main.o(i.main_intInit)
 <LI><a href="#[16d]">usbHostTask</a> from usb-transfer.o(i.usbHostTask) referenced from usb-transfer.o(i.usbHostInit)
 <LI><a href="#[77]">usb_dev_mass_scan_free</a> from usb-transfer.o(i.usb_dev_mass_scan_free) referenced 2 times from usb-transfer.o(.data)
 <LI><a href="#[75]">usb_dev_mount_seq</a> from usb-transfer.o(i.usb_dev_mount_seq) referenced 2 times from usb-transfer.o(.data)
 <LI><a href="#[76]">usb_dev_unmount_seq</a> from usb-transfer.o(i.usb_dev_unmount_seq) referenced 2 times from usb-transfer.o(.data)
 <LI><a href="#[78]">usb_end</a> from usb-transfer.o(i.usb_end) referenced 2 times from usb-transfer.o(.data)
 <LI><a href="#[74]">usb_hub_connect_change</a> from usb-transfer.o(i.usb_hub_connect_change) referenced 2 times from usb-transfer.o(.data)
 <LI><a href="#[73]">usb_scan</a> from usb-transfer.o(i.usb_scan) referenced 2 times from usb-transfer.o(.data)
 <LI><a href="#[174]">usb_stor_BBB_reset</a> from usb_storage.o(i.usb_stor_BBB_reset) referenced from usb_storage.o(i.usb_storage_probe)
 <LI><a href="#[173]">usb_stor_BBB_transport</a> from usb_storage.o(i.usb_stor_BBB_transport) referenced from usb_storage.o(i.usb_storage_probe)
 <LI><a href="#[175]">usb_stor_irq</a> from usb_storage.o(i.usb_stor_irq) referenced from usb_storage.o(i.usb_storage_probe)
 <LI><a href="#[171]">usb_stor_read</a> from usb_storage.o(i.usb_stor_read) referenced from usb_storage.o(i.usb_stor_scan)
 <LI><a href="#[172]">usb_stor_write</a> from usb_storage.o(i.usb_stor_write) referenced from usb_storage.o(i.usb_stor_scan)
 <LI><a href="#[18c]">usbfsDevIoCtl</a> from usb_storage.o(i.usbfsDevIoCtl) referenced from storage.o(.constdata)
 <LI><a href="#[189]">usbfsDevMulRead</a> from usb_storage.o(i.usbfsDevMulRead) referenced from storage.o(.constdata)
 <LI><a href="#[18b]">usbfsDevMulWrite</a> from usb_storage.o(i.usbfsDevMulWrite) referenced from storage.o(.constdata)
 <LI><a href="#[188]">usbfsDevRead</a> from usb_storage.o(i.usbfsDevRead) referenced from storage.o(.constdata)
 <LI><a href="#[187]">usbfsDevStatus</a> from usb_storage.o(i.usbfsDevStatus) referenced from storage.o(.constdata)
 <LI><a href="#[18a]">usbfsDevWrite</a> from usb_storage.o(i.usbfsDevWrite) referenced from storage.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[757]"></a>memcpy</STRONG> (ARM, 12 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw (via Veneer)
</UL>

<P><STRONG><a name="[9b5]"></a>OSStartHighRdy</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOS_ARM))
<BR><BR>[Calls]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Called By]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[9b7]"></a>OSCtxSw</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOS_ARM))
<BR><BR>[Calls]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[9c3]"></a>OSIntIRQCtxSw</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOS_ARM))
<BR><BR>[Called By]<UL><LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntIRQExit
</UL>

<P><STRONG><a name="[9c2]"></a>OSIntFIQCtxSw</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOS_ARM))
<BR><BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntFIQExit
</UL>

<P><STRONG><a name="[9c1]"></a>OSIntFIQNestIRQ</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOS_ARM))
<BR><BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntFIQExit
</UL>

<P><STRONG><a name="[80]"></a>UCOS_IRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOS_ARM))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = UCOS_IRQHandler &rArr; marsIntIRQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsIntIRQHandler
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntIRQExit
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntIRQEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL>
<P><STRONG><a name="[81]"></a>UCOS_FIQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOS_ARM))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = UCOS_FIQHandler &rArr; marsIntFIQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsIntFIQHandler
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntFIQExit
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntFIQEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL>
<P><STRONG><a name="[29a]"></a>OSCPUSaveSR</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOS_ARM))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly (via Veneer)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend (via Veneer)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept (via Veneer)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoStopOneCh (via Veneer)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoOneCh (via Veneer)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_WrapRx_Task_UnitX (via Veneer)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX (via Veneer)
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackPS_RF (via Veneer)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose (via Veneer)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend (via Veneer)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate (via Veneer)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend (via Veneer)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate (via Veneer)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX (via Veneer)
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc (via Veneer)
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_PAIR_Stop (via Veneer)
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_PAIR_Linit (via Veneer)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_InitCamOnOff (via Veneer)
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuWaitForInt_Tx (via Veneer)
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuWaitForInt_Rx (via Veneer)
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuProcessCmdPkt (via Veneer)
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Tx (via Veneer)
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Rx (via Veneer)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet (via Veneer)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet (via Veneer)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost (via Veneer)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost (via Veneer)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept (via Veneer)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteVirtualVidePayload (via Veneer)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteVidePayload (via Veneer)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteAudiPayload (via Veneer)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCreateFile (via Veneer)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo (via Veneer)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost (via Veneer)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel (via Veneer)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerDisable (via Veneer)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend (via Veneer)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate (via Veneer)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_RF_Task (via Veneer)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_Net_Task (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_Low_Task (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackTask (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTask (via Veneer)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume (via Veneer)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisTask (via Veneer)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisRecDMA_ISR (via Veneer)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_function (via Veneer)
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim (via Veneer)
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free (via Veneer)
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc (via Veneer)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc (via Veneer)
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free (via Veneer)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket (via Veneer)
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close (via Veneer)
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmac110_xmit (via Veneer)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM (via Veneer)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref (via Veneer)
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll (via Veneer)
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output (via Veneer)
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn (via Veneer)
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp (via Veneer)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp (via Veneer)
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore (via Veneer)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected (via Veneer)
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal (via Veneer)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp (via Veneer)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write (via Veneer)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send (via Veneer)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv (via Veneer)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen (via Veneer)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr (via Veneer)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect (via Veneer)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn (via Veneer)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect (via Veneer)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close (via Veneer)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind (via Veneer)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept (via Veneer)
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data (via Veneer)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut (via Veneer)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet (via Veneer)
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate (via Veneer)
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt (via Veneer)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost (via Veneer)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend (via Veneer)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel (via Veneer)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate (via Veneer)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select (via Veneer)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept (via Veneer)
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback (via Veneer)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ISR_handler (via Veneer)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1s_IntHandler (via Veneer)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrTask (via Veneer)
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrStop (via Veneer)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrStart (via Veneer)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrSetT (via Veneer)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrReset (via Veneer)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrCfgFnct (via Veneer)
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_P2P_Session (via Veneer)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoTask (via Veneer)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_DecSliceType (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_DecSliceType (via Veneer)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntIRQExit
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntFIQExit
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio (via Veneer)
</UL>

<P><STRONG><a name="[29b]"></a>OSCPURestoreSR</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOS_ARM))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly (via Veneer)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend (via Veneer)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept (via Veneer)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoStopOneCh (via Veneer)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoOneCh (via Veneer)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_WrapRx_Task_UnitX (via Veneer)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX (via Veneer)
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackPS_RF (via Veneer)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose (via Veneer)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend (via Veneer)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate (via Veneer)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend (via Veneer)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate (via Veneer)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX (via Veneer)
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc (via Veneer)
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_PAIR_Stop (via Veneer)
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_PAIR_Linit (via Veneer)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_InitCamOnOff (via Veneer)
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuWaitForInt_Tx (via Veneer)
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuWaitForInt_Rx (via Veneer)
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuProcessCmdPkt (via Veneer)
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Tx (via Veneer)
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Rx (via Veneer)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet (via Veneer)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet (via Veneer)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost (via Veneer)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost (via Veneer)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept (via Veneer)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteVirtualVidePayload (via Veneer)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteVidePayload (via Veneer)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteAudiPayload (via Veneer)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCreateFile (via Veneer)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo (via Veneer)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost (via Veneer)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel (via Veneer)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerDisable (via Veneer)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend (via Veneer)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate (via Veneer)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_RF_Task (via Veneer)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_Net_Task (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_Low_Task (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackTask (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTask (via Veneer)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume (via Veneer)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisTask (via Veneer)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisRecDMA_ISR (via Veneer)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_function (via Veneer)
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim (via Veneer)
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free (via Veneer)
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc (via Veneer)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc (via Veneer)
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free (via Veneer)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket (via Veneer)
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close (via Veneer)
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmac110_xmit (via Veneer)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM (via Veneer)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref (via Veneer)
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll (via Veneer)
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output (via Veneer)
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn (via Veneer)
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp (via Veneer)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp (via Veneer)
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore (via Veneer)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected (via Veneer)
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal (via Veneer)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp (via Veneer)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write (via Veneer)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send (via Veneer)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv (via Veneer)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen (via Veneer)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr (via Veneer)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect (via Veneer)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn (via Veneer)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect (via Veneer)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close (via Veneer)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind (via Veneer)
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept (via Veneer)
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data (via Veneer)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut (via Veneer)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet (via Veneer)
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate (via Veneer)
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt (via Veneer)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost (via Veneer)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend (via Veneer)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel (via Veneer)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate (via Veneer)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select (via Veneer)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept (via Veneer)
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback (via Veneer)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ISR_handler (via Veneer)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1s_IntHandler (via Veneer)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrTask (via Veneer)
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrStop (via Veneer)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrStart (via Veneer)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrSetT (via Veneer)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrReset (via Veneer)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrCfgFnct (via Veneer)
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_P2P_Session (via Veneer)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoTask (via Veneer)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_DecSliceType (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_DecSliceType (via Veneer)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntIRQExit
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntFIQExit
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio (via Veneer)
</UL>

<P><STRONG><a name="[72a]"></a>OSInit</STRONG> (ARM, 508 bytes, Stack size 56 bytes, os_core_1.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt (via Veneer)
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr1_8_arm (via Veneer)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit (via Veneer)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit (via Veneer)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit (via Veneer)
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDebugInit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main (via Veneer)
</UL>

<P><STRONG><a name="[9be]"></a>OSInitHookBegin</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[9bf]"></a>OSInitHookEnd</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[9bb]"></a>OSIntFIQEnter</STRONG> (ARM, 40 bytes, Stack size 0 bytes, os_core_1.o(i.OSIntFIQEnter))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCOS_FIQHandler
</UL>

<P><STRONG><a name="[9bd]"></a>OSIntFIQExit</STRONG> (ARM, 212 bytes, Stack size 16 bytes, os_core_1.o(i.OSIntFIQExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSIntFIQExit
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntFIQNestIRQ
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntFIQCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCOS_FIQHandler
</UL>

<P><STRONG><a name="[9b8]"></a>OSIntIRQEnter</STRONG> (ARM, 40 bytes, Stack size 0 bytes, os_core_1.o(i.OSIntIRQEnter))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCOS_IRQHandler
</UL>

<P><STRONG><a name="[9ba]"></a>OSIntIRQExit</STRONG> (ARM, 196 bytes, Stack size 8 bytes, os_core_1.o(i.OSIntIRQExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntIRQExit
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntIRQCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCOS_IRQHandler
</UL>

<P><STRONG><a name="[4a9]"></a>OSSchedLock</STRONG> (ARM, 52 bytes, Stack size 8 bytes, os_core_1.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQDelete (via Veneer)
</UL>

<P><STRONG><a name="[4ab]"></a>OSSchedUnlock</STRONG> (ARM, 232 bytes, Stack size 16 bytes, os_core_1.o(i.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQDelete (via Veneer)
</UL>

<P><STRONG><a name="[72f]"></a>OSStart</STRONG> (ARM, 96 bytes, Stack size 0 bytes, os_core_1.o(i.OSStart))
<BR><BR>[Calls]<UL><LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main (via Veneer)
</UL>

<P><STRONG><a name="[9c4]"></a>OSTCBInitHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[9c5]"></a>OSTaskCreateHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[49a]"></a>OSTaskDelHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskDelHook))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel (via Veneer)
</UL>

<P><STRONG><a name="[9c6]"></a>OSTaskIdleHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[496]"></a>OSTaskStkInit</STRONG> (ARM, 68 bytes, Stack size 4 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate (via Veneer)
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt (via Veneer)
</UL>

<P><STRONG><a name="[9b6]"></a>OSTaskSwHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCOS_IRQHandler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCOS_FIQHandler
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>

<P><STRONG><a name="[4fb]"></a>OSTimeTick</STRONG> (ARM, 248 bytes, Stack size 24 bytes, os_core_1.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimerTickTask (via Veneer)
</UL>

<P><STRONG><a name="[72e]"></a>OSVersion</STRONG> (ARM, 8 bytes, Stack size 0 bytes, os_core_1.o(i.OSVersion))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main (via Veneer)
</UL>

<P><STRONG><a name="[499]"></a>OS_Dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_core_1.o(i.OS_Dummy))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel (via Veneer)
</UL>

<P><STRONG><a name="[48a]"></a>OS_EventTO</STRONG> (ARM, 80 bytes, Stack size 0 bytes, os_core_1.o(i.OS_EventTO))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend (via Veneer)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend (via Veneer)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend (via Veneer)
</UL>

<P><STRONG><a name="[48c]"></a>OS_EventTaskRdy</STRONG> (ARM, 160 bytes, Stack size 16 bytes, os_core_1.o(i.OS_EventTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost (via Veneer)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost (via Veneer)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel (via Veneer)
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost (via Veneer)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel (via Veneer)
</UL>

<P><STRONG><a name="[489]"></a>OS_EventTaskWait</STRONG> (ARM, 116 bytes, Stack size 8 bytes, os_core_1.o(i.OS_EventTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend (via Veneer)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend (via Veneer)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend (via Veneer)
</UL>

<P><STRONG><a name="[487]"></a>OS_EventWaitListInit</STRONG> (ARM, 32 bytes, Stack size 16 bytes, os_core_1.o(i.OS_EventWaitListInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_EventWaitListInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr1_7_arm (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate (via Veneer)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate (via Veneer)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate (via Veneer)
</UL>

<P><STRONG><a name="[4a1]"></a>OS_MemClr</STRONG> (ARM, 52 bytes, Stack size 0 bytes, os_core_1.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit (via Veneer)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit (via Veneer)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit (via Veneer)
</UL>

<P><STRONG><a name="[49c]"></a>OS_MemCopy</STRONG> (ARM, 72 bytes, Stack size 0 bytes, os_core_1.o(i.OS_MemCopy))
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery (via Veneer)
</UL>

<P><STRONG><a name="[484]"></a>OS_Sched</STRONG> (ARM, 164 bytes, Stack size 8 bytes, os_core_1.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly (via Veneer)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend (via Veneer)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend (via Veneer)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate (via Veneer)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend (via Veneer)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel (via Veneer)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost (via Veneer)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost (via Veneer)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost (via Veneer)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel (via Veneer)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend (via Veneer)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume (via Veneer)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM (via Veneer)
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt (via Veneer)
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost (via Veneer)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend (via Veneer)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel (via Veneer)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio (via Veneer)
</UL>

<P><STRONG><a name="[497]"></a>OS_TCBInit</STRONG> (ARM, 352 bytes, Stack size 40 bytes, os_core_1.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate (via Veneer)
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt (via Veneer)
</UL>

<P><STRONG><a name="[1a7]"></a>OS_TaskIdle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, os_core_1.o(i.OS_TaskIdle))
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core_1.o(i.OSInit)
</UL>
<P><STRONG><a name="[1b7]"></a>marsAbortHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mars_int.o(i.marsAbortHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = marsAbortHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;START_0 (via Veneer)
</UL>

<P><STRONG><a name="[746]"></a>marsIntFIQDefIsr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mars_int.o(i.marsIntFIQDefIsr))
<BR><BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_intInit (via Veneer)
</UL>

<P><STRONG><a name="[747]"></a>marsIntFIQEnable</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mars_int.o(i.marsIntFIQEnable))
<BR><BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_intInit (via Veneer)
</UL>

<P><STRONG><a name="[9bc]"></a>marsIntFIQHandler</STRONG> (ARM, 416 bytes, Stack size 40 bytes, mars_int.o(i.marsIntFIQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = marsIntFIQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCOS_FIQHandler
</UL>

<P><STRONG><a name="[745]"></a>marsIntIRQDefIsr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mars_int.o(i.marsIntIRQDefIsr))
<BR><BR>[Called By]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAInit (via Veneer)
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerInit (via Veneer)
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_intInit (via Veneer)
</UL>

<P><STRONG><a name="[750]"></a>marsIntIRQDisable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, mars_int.o(i.marsIntIRQDisable))
<BR><BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerInit (via Veneer)
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerClose (via Veneer)
</UL>

<P><STRONG><a name="[693]"></a>marsIntIRQEnable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, mars_int.o(i.marsIntIRQEnable))
<BR><BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAOpen (via Veneer)
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerPwmOpen (via Veneer)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerOpen (via Veneer)
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioInit (via Veneer)
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_intInit (via Veneer)
</UL>

<P><STRONG><a name="[9b9]"></a>marsIntIRQHandler</STRONG> (ARM, 144 bytes, Stack size 32 bytes, mars_int.o(i.marsIntIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = marsIntIRQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCOS_IRQHandler
</UL>

<P><STRONG><a name="[744]"></a>marsIntInit</STRONG> (ARM, 116 bytes, Stack size 0 bytes, mars_int.o(i.marsIntInit))
<BR><BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_intInit (via Veneer)
</UL>

<P><STRONG><a name="[1b6]"></a>marsPrefetchHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mars_int.o(i.marsPrefetchHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = marsPrefetchHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;START_0 (via Veneer)
</UL>

<P><STRONG><a name="[1b5]"></a>marsSWIHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mars_int.o(i.marsSWIHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = marsSWIHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;START_0 (via Veneer)
</UL>

<P><STRONG><a name="[1b4]"></a>marsUndefineHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mars_int.o(i.marsUndefineHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = marsUndefineHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;START_0 (via Veneer)
</UL>

<P><STRONG><a name="[f9]"></a>mcpu2IntHandler</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mcpu.o(i.mcpu2IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = mcpu2IntHandler &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[72c]"></a>mcpuInit</STRONG> (ARM, 52 bytes, Stack size 16 bytes, mcpu.o(i.mcpuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = mcpuInit &rArr; OSSemCreate &rArr; OS_EventWaitListInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main (via Veneer)
</UL>

<P><STRONG><a name="[f7]"></a>mcpuIntHandler</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mcpu.o(i.mcpuIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = mcpuIntHandler &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[53f]"></a>mcpu_ByteMemcpy</STRONG> (ARM, 308 bytes, Stack size 32 bytes, mcpu.o(i.mcpu_ByteMemcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend (via Veneer)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend (via Veneer)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost (via Veneer)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackPS_RF (via Veneer)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw (via Veneer)
</UL>

<P><STRONG><a name="[2c1]"></a>mcpu_FATZeroScan</STRONG> (ARM, 216 bytes, Stack size 32 bytes, mcpu.o(i.mcpu_FATZeroScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = mcpu_FATZeroScan &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend (via Veneer)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend (via Veneer)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost (via Veneer)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFindFreeCluster (via Veneer)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFAT32ScanFreeCluster (via Veneer)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_GetTotalFree (via Veneer)
</UL>

<P><STRONG><a name="[f5]"></a>rfiuIntHandler</STRONG> (ARM, 132 bytes, Stack size 16 bytes, mars_int.o(i.rfiuIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = rfiuIntHandler &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCountRead (via Veneer)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[1a8]"></a>START_0</STRONG> (ARM, 92 bytes, Stack size 0 bytes, vectors.o(Vect))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = START_0 &rArr; marsUndefineHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsUndefineHandler (via Veneer)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsSWIHandler (via Veneer)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsPrefetchHandler (via Veneer)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsAbortHandler (via Veneer)
</UL>

<P><STRONG><a name="[1aa]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1b8]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1ba]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[9c7]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9c8]"></a>__decompress</STRONG> (ARM, 120 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[9c9]"></a>__decompress2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[1bb]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[9ca]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1bc]"></a>_printf_n</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[205]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1be]"></a>_printf_p</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[1c0]"></a>_printf_f</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1c2]"></a>_printf_e</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1c3]"></a>_printf_g</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1c4]"></a>_printf_a</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[9cb]"></a>_printf_ll</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[1c6]"></a>_printf_i</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1c8]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1c9]"></a>_printf_u</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1ca]"></a>_printf_o</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[1cc]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[1ce]"></a>_printf_lli</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1d0]"></a>_printf_lld</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1d1]"></a>_printf_llu</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1d2]"></a>_printf_llo</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[1d4]"></a>_printf_llx</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[9cc]"></a>_printf_l</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[1d6]"></a>_printf_c</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1d8]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1da]"></a>_printf_lc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[1dc]"></a>_printf_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[9cd]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[1ea]"></a>__rt_lib_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9ce]"></a>__rt_lib_init_fp_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[9cf]"></a>__rt_lib_init_heap_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[9d0]"></a>__rt_lib_init_preinit_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1de]"></a>__rt_lib_init_rand_2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[9d1]"></a>__rt_lib_init_user_alloc_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1e0]"></a>__rt_lib_init_lc_common</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[9d2]"></a>__rt_lib_init_rand_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[9d3]"></a>__rt_lib_init_lc_collate_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1e2]"></a>__rt_lib_init_lc_ctype_2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[9d4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[9d5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1e3]"></a>__rt_lib_init_lc_numeric_2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[9d6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1e5]"></a>__rt_lib_init_lc_time_2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_time_2 &rArr; _get_lc_time &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time
</UL>

<P><STRONG><a name="[9d7]"></a>__rt_lib_init_alloca_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[9d8]"></a>__rt_lib_init_argv_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[9d9]"></a>__rt_lib_init_atexit_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[9da]"></a>__rt_lib_init_clock_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[9db]"></a>__rt_lib_init_cpp_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[9dc]"></a>__rt_lib_init_exceptions_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[9dd]"></a>__rt_lib_init_fp_trap_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[9de]"></a>__rt_lib_init_getenv_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[9df]"></a>__rt_lib_init_lc_time_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[9e0]"></a>__rt_lib_init_return</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[9e1]"></a>__rt_lib_init_signal_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[9e2]"></a>__rt_lib_init_stdio_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1ef]"></a>__rt_lib_shutdown</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[9e3]"></a>__rt_lib_shutdown_cpp_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[9e4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[9e5]"></a>__rt_lib_shutdown_heap_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[9e6]"></a>__rt_lib_shutdown_return</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[9e7]"></a>__rt_lib_shutdown_signal_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[9e8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[9e9]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1b9]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[9ea]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1e7]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1e9]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[9eb]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[1eb]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; $Super$$main &rArr; initMemoryPool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[9ec]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[20f]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1ee]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[9ed]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1f0]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[365]"></a>rand</STRONG> (ARM, 60 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQP
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_rand
</UL>

<P><STRONG><a name="[9ee]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[9ef]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>__rt_ctype_table</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_string_sub
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[20b]"></a>__aeabi_errno_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_setup
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_sendMessageTo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_sendMessage
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_changeDistance
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_mutex_unlock
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_mutex_lock
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection_new
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_connectedReadyToSend
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_acceptTCPconnection
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionHandlerThread
</UL>

<P><STRONG><a name="[9f0]"></a>__errno$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[9f1]"></a>__rt_errno_addr$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[6ac]"></a>__aeabi_lasr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduIntHandler
</UL>

<P><STRONG><a name="[9f2]"></a>_ll_sshift_r</STRONG> (ARM, 40 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[36b]"></a>__aeabi_ldivmod</STRONG> (ARM, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoDuration
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSplitVideoPayload
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadHeaderObject
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawVideoTime
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduIntHandler
</UL>

<P><STRONG><a name="[1f3]"></a>_ll_sdiv</STRONG> (ARM, 80 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1f4]"></a>__aeabi_uldivmod</STRONG> (ARM, 0 bytes, Stack size 24 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_callback_Try_Port
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>

<P><STRONG><a name="[9f3]"></a>_ll_udiv</STRONG> (ARM, 692 bytes, Stack size 24 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[9f4]"></a>_ll_udiv_donemoving</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>vsnprintf</STRONG> (ARM, 92 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_snprintf
</UL>

<P><STRONG><a name="[1f7]"></a>__2printf</STRONG> (ARM, 32 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanFileOnPlaybackDir
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFilePrev
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFileNext
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDelDir
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDel
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfPlaybackVideoStop
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcSetDAC_OutputGain
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearPKBuf
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoDuration
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoStopOneCh
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoOneCh
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Record_ScheduleMode
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Record_CaptureVideoStopByChannel
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsUndefineHandler (via Veneer)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsSWIHandler (via Veneer)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsPrefetchHandler (via Veneer)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsAbortHandler (via Veneer)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_WrapRx_Task_UnitX
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_AudioRetONOFF_IIS
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_AudioRetONOFF_APP
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackPS_RF
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncPSHeader_RF
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF_B2
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF_B1
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHGroupCal_B2
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHGroupCal_B1
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteID_B2
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteID_B1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WOR_enable_B1
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Cal_B2
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Cal_B1
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRF
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfRead
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOpen
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupRead
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupOpen
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_UpdateTXOthersPara
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_TXCMD_Dec
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXsleepTime
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXVoxCfg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXTurbo_On
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXTurbo_Off
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXSchedule
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXReboot
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXPIRCfg
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXDoorBellOff
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetRXOpMode_All
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetRXOpMode_1
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SendTxMdSense
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_ResendTxMdConfig
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_End
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuWaitForInt_Tx
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuWaitForInt_Rx
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuTxFwUpdateFromSD
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuTxFwUpdateFromNet
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuSetVoxTrig_RX
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuSetPWM_TX
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuSetMotorCtrl_TX
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuSetMelodyNum_TX
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuReplyACK_FWUPD
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuProcessCmdPkt
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuFwUpdLoadTxFW_SD
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuForceResync
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuCamOnOffCmd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsRfiu_FCC_DirectTXRX
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfiuReset
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_RF_SetEvt
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackSetEvt
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Decode
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuCamSleepCmd
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpu_ByteMemcpy (via Veneer)
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAOpen
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVColorbar_onoff
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackMode
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskCreate
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiReadVersionFromFlash
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiReadRFIDFromFlash
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSectorErase
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIdentification
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spibootCodeUpdate
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiallCodeUpdate
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteUIBackup
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteUI
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteNet
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStart
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadVersion
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadUIBackup
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadUI
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadRF_ID
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadNet
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadFBSetting
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadData
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCodeUpdate
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCmpWriteData
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCmpBootWriteData
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiArrangeSpace
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiAddressLocate
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsIntIRQHandler (via Veneer)
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsIntFIQHandler (via Veneer)
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAWaitForInt
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw_Word
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerWaitForInt
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawSDCardFail
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStopByChannel
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetEvt
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfWrite
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSeek
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOverWriteDel
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetTotalDirCount
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextFile
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCloseFileByIdx
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelCheckEventTrigger
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteVirtualVidePayload
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteVidePayload
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataPacketPost
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataObjectPre
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteAudiPayload
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfLinkBrokenCloseFile
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCreateFile
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCloseFile
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideoStop
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_Net_SetEvt
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDir
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChDir
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Session_Status
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdatebootload
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload_Net
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdate
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareUpdateFlow
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetUpdateFlow
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetPrepare
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSemProcess
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBlkSemProcess
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteWrite
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteSectorErase
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCap1920x1080I
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_SetResolution
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSplitFile
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSetVideoSectionTime
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadVideoPayload
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadHeaderObject
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfBurstReadIndexObject
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfResolutionRxToTx
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfPIRRxToTx
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfMotionRxToTx
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfFlickerRxToTx
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfBrightnessRxToTx
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTaskDestroy
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTaskCreate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTask
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTask
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCheckUnit
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCheckBackupUnit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_fat_rename
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_findpath
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SearchWholeDir
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ScanWholeDir
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadWholeDir
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadDir
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_OpenDir
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_MkDir
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_IoCtl
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FWrite
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FTell
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FSeek
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FRead
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FOpen
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FError
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FClose
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CloseDir
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATIncEntry
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDirSearch
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDirScan
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDel
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDelDir
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDel
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfMkDir
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfMkBackupDir
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetDirEnt
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFormatBackup
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFormat
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDumpDriveInfo
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDirExist
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCheckDirExist
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChPlayDir
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChBackupDir
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCacheInit
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegDecompressionYUV420
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegDecompression
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifSosParse
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifSof0Parse
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifIfdTag
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifFileParse
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifDqtParse
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifApp1Parse
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetStartMovie
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGetMotionStatusAPP
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupMode
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetLightStatus
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetCAStatus
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadSwitchChannel
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlayback_Delete_File
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackListMode
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowMaskAreaMode
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckTouchKey
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckScheduleTime
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckRecState
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckRecPIR
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckMotion
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckCurRecState
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckLightManualSwitchStatus
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBatterySchdule
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCTimer
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCSetting
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCRec
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCAlarm
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckAlarmManualSwitchStatus
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetBootSetting
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiKeyParse
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRFStatus
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoByChannel
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRemoteOn
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTask
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetTalkOnOff
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfSwAudio_DualMode
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfManualLightingRxToTx
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeChannel
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeAudio_QuadMode
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PStatueToRF
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PPassword
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfSuspendDelDecTask_ALL
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfSuspendDelDecTask
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfCreateDecTask
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiReadVideoFile
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPlaybackStop
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTVInFormat
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UI_Setting
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSetParse
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetFileDoCommand
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSetProgram
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSetFreeFileEnt
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSetFreeDirEnt
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSetFileEntList
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSetDirEntList
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanDiskAll
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDirForward
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDirBackward
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFreeDirEnt
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFindFreeDirEnt
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFileTypeCount_Dec
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFileInit
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDirInit
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextDir
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupDirInit
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavreadfile
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoice
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSynRfConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfTimeRxToTx
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSentKeyToUi
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdGetIconInfo
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDMultiLanguageStrCenter
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSdCardMode
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearFfQuadBuf
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckUSBCD
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckSDCD
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyNETRunPerSec
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSDIcon
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlayIndicator
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlayIcon
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpdate
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVOSDEnable
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifWriteFile
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifReadFile
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDelAll
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackCalendarInit
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfInit
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetCurDirFileCount
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDriveInfo
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCacheClean
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupInit
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupFormat
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupDriveInfo
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupCacheClean
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitJpegEncComplete
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_fw_net
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskDestroy
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PSendEvent
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idu_ClearBuf
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearBuf
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCF_GetDeviceIndex
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_RF_Task
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_Net_Task
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_Low_Task
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackTask
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackEXIFWrite
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_back_Network_Task_init
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_P2P_Readfile
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysVOICE_REC
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUsbRemoved
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUpgradeFW
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_OFF
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_IN
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTask
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetStorageStatus
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetOutputMode
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSentMountSeq
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_OFF
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPowerOff
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackZoom
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackPan
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackIsp
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackFormat
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDeleteDir
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDeleteAll
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysLockMountSeq
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysKeepSetStorageSel
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageSel
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStoragePriority
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageInserted
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageIndex
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDeadLockMonitor
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCheckBTCBatteryLevel
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureImage_OnRFRx
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBatteryCam_stopIfDone
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackupFormat
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_RFI_RX_CH_Restart
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_UI_KEY_USB
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_UI_KEY_SDCD
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_Syn_RF
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_Device_Mount
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavWriteVoiceData
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoiceFile
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavReadFile_PCM
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisTask
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdGetStrLibByLanguage
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdGetStrLib
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVOSDDisable_All
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVOSDDisable
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDMultiLanguageStrByX
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_VideoBrightness
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_CameraOnOff
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Section
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Overwrite
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_MotionSensitivity
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Language
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Format
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Default
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Alarm
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSchduleWarnMsg
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphGetMenuData
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimeZoneGraph
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawString
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawSelectTimeZone
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawSelectDateTime
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledTimeSelect
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSettingGraph
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawRECModeGraph
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMotionSensitivityGraph
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraOnOffGraph
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawBrightnessGraph
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeStrtoIP
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdVolumeControl
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawTalkBack
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadLightManual
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadCamreaAlarmManual
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPairInMenu
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPair
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNoSignal
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLightManual
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLifeTimePerSec
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInsertSD
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawConfirmSelect
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCamreaAlarmManual
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorCenter
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_CameraResolution
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawVersionInfo
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimezone
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIP
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduled
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawResolution
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawRECMode
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawNetworkInfo
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMotionSensitivity
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawKeypad
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJpgGraph
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawDateTime
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCardInfo
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraOnOff
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraAlarmOnOff
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawBrightness
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawAPPInfo
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawUpgradeFW
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadVideoOn
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawHDDUninstallStatusMsg
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearP2PConnection
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwipBufInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitlwIPInitDone2
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLwIP
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input2
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_LwIPEntry
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpkt_finish_handler2
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_processing
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmac110_xmit_wait_dma_done
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmac110_isr
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmac110_init
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_phy_regs
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_duplex_speed
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_txdes
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTMAC110_main
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInitDAC_Play
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8940_AdjustSpeakerVolume
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_VideoQuality
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_VideoFrameRate
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_UpgradeNet
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Timezone
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TimestampType
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TVout_Format
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_RFID_CODE
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_RFID
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_REC_MODE_BY_CH
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_PIR
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_P2P_Password
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_P2PID
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Network
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Motion_Section
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_MotionMask
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_MACAddr
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_HDDRemove
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Dynamic_ON
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Display
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_DateTime
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_CameraAlarm_Timer
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Audio_Vol
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite_WM8940
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite_Byte
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_Byte
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioLvTrgIntCfg
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IR_TX
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_contrast_test
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_change_test
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTimerTest
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTimeTest
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTestGPIO
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTestAdc
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTXCMDTest
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetUID_To_Flash
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetMAC_To_Flash
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRXCMDTest
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRFPairTest
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPanelGammaSetting_Y
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPanelGammaSetting_X
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPWMTest
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdTest
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIRTest
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIPNetworkTest
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiBrightnessTest
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264_Decode_One_I_frame
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_fw_ver_net
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_P2P_info
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdPlaybackFilePrev
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdPlaybackFileNext
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawRemindDownload
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuNoFile
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTimerWrong
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMenuPreview
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcbs_sane
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskCreate
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQDelete
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQCreate
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo_partial
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_MemFree
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemAlloc
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexLock
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexInit
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSendIOCtrl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowOnlineUserNum
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafeDelP2pPlayFileTask
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpConnect2
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVOSDBRI
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PwrOnSeq
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Touch_getPosition
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_zeropointfivems_IntHandler
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_100ms_IntHandler
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_hub
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_1_IntHandler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioIntHandler
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SD2068_RTC
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SD2068_RTC
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcSetDefaultTime
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_GMT_Time
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendFrameData
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregedit_client_from_avsession
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_av_sample
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_recorded_filelist
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_s_chk
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_p2pdisconnected
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Speaker
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Login
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Listen
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_P2P_Session
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_P2P_Session
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoFrameData
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remoteplayback_busy
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintErrHandling
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoginInfoCB
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kill_Task_Speaker
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPreIFrameIndex
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Session_Status
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVServerStart
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoTask
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Decoding1Frame
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_DecSliceType
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264DecodeLastFrame
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_ParseHeader
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_DecompressOneFrame
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_DecodeOneFrame
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpretSPS
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpretPPS
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbsp_trailing_bits
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_parser_idle
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ue_v
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_u_v
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_u_1
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_se_v
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestOfSliceHeader
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264IntHandler
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_InitBuf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_DecSliceType
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_CompressOneFrame
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bulk_msg
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbHostSetIntEvt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_BBB_reset
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_control_msg
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_alloc_new_device
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_probe
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_reset
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_event_handle
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_configure
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_port_feature
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite_SD2068
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite16addr_Byte
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_SENSOR
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_SD2068
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead16addr_Byte
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit_GT9271
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD2068_RTC_Init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9271_getPosition
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9271_PrintInfo
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Enc
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_submit_root
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_bus_reset
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_submit_async
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbHostTask
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbHostGetIntEvt
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcUnmountSeq
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcTaskInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcTask
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcSetIntEvt
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcPowerOnRest
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMountSeq
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcIntHandler
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcInit
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcGetIntEvt
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcGetCsd2Dot0
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDataTransferMode
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckMultipleWriteError
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckCardBusy
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCardIdentificationMode2Dot0
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcSetWriteDataDma
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcSetReadDataDma
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckWriteError
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckReadError
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckCommandResponseComplete
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcWriteSingleBlock
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcWriteMultipleBlock
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcReadSingleBlock
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcReadMultipleBlock
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMount
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcErase
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckTransferState
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevWrite
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevStatus
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevRead
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevMulWrite
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevMulRead
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcSetStat
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_read_FAT_table
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fopen
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_diskclust
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATSetTheClusterLinkToDestination
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATSetFSInfo
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATOrderFreeCluster
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFindFreeCluster
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCollectClusterList
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCleanCluster
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATBookFreeCluster
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATAllocateFreeCluster
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFAT32ScanFreeCluster
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_ReadBPB
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_CheckBPB
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpu_FATZeroScan (via Veneer)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_checkunit
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_format
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_MBR_format
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ioctl
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_GetTotalFree
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fread
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_find_dir
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_dir_size
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_dir_realsec
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_FAT_find_eof
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_DeleteFileOrDir
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATNewEntry
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATLWScanClusterLink
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_readdir
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_opendir
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_closedir
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_MkRmDir
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_directory
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_status
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_write
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_read
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_ioctl
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMalloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFree
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileEntryUpdate
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCalculateSectorByCluster
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fwrite
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fclose
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_readwholedir
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_SearchWholedir
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ScanWholedir
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileDelete
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATDirDelete
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartCmdTask
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartCmdInit
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartBufRcv
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWriteSensorReg
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWriteReg
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWriteI2CReg
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartReadSensorReg
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartReadSensorALLReg
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartReadReg
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartReadI2CReg
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartFillReg
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDumpReg
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmdParse
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMemoryPool
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_write
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_read
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_WRretry
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_RDretry
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncSinWriteCache
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncSinReadCache
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncAllCache
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_find_file
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_file
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoPutFrmNo
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoNew
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetByFrmNo
</UL>

<P><STRONG><a name="[1f9]"></a>__2sprintf</STRONG> (ARM, 64 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_UpdateTXOthersPara
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXsleepTime
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXVoxCfg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXTurbo_On
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXTurbo_Off
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXSchedule
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXReboot
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXPIRCfg
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXDoorBellOff
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetRXOpMode_All
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetRXOpMode_1
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SendTxMdSense
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_ResendTxMdConfig
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuFwUpdLoadTxFW_SD
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuCamSleepCmd
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextFile
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfResolutionRxToTx
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfPIRRxToTx
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfMotionRxToTx
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfFlickerRxToTx
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfBrightnessRxToTx
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckP2PMode
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfManualLightingRxToTx
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PStatueToRF
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawDelMsg
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanDiskAll
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetNewFileTime
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFileInit
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDirInit
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextDir
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupDirInit
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSynRfConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfTimeRxToTx
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawFrameRate
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawBitRate
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawVideoTime
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFileNum
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupInit
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupFormat
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawFWVersion
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCardInfo
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_VideoBrightness
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_CameraOnOff
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiDrawNetworkInfo
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSchduleWarnMsg
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIPNum
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListYM
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListCalendar
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeStrtoIP
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawStorageNReady
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPairInMenu
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPair
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLifeTimePerSec
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInsertHDD
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIP
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawKeypad
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawNotHDD
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawHDDUninstallStatusMsg
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawHDDUninstallMsg
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TVout_Format
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuPage
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuFile
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMemoryPool
</UL>

<P><STRONG><a name="[1fa]"></a>__2snprintf</STRONG> (ARM, 88 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PSendEvent
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
</UL>

<P><STRONG><a name="[1fc]"></a>_printf_pre_padding</STRONG> (ARM, 84 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[1fd]"></a>_printf_post_padding</STRONG> (ARM, 72 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[1fb]"></a>_printf_str</STRONG> (ARM, 144 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[1c7]"></a>_printf_int_dec</STRONG> (ARM, 164 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[1cf]"></a>_printf_longlong_dec</STRONG> (ARM, 164 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[203]"></a>_printf_longlong_hex</STRONG> (ARM, 136 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[1cd]"></a>_printf_int_hex</STRONG> (ARM, 48 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1d5]"></a>_printf_ll_hex</STRONG> (ARM, 16 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[1bf]"></a>_printf_hex_ptr</STRONG> (ARM, 32 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[204]"></a>__printf</STRONG> (ARM, 644 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[206]"></a>__0sscanf</STRONG> (ARM, 92 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_TXCMD_Enc
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuCamOnOffCmd
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetFileDoCommand
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSetFileDistInDir
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeStrtoIP
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_contrast_test
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_change_test
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTimerTest
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTimeTest
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTestGPIO
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetUID_To_Flash
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetMAC_To_Flash
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRXCMDTest
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPanelGammaSetting_Y
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPanelGammaSetting_X
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPWMTest
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdTest
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIRTest
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIPNetworkTest
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiBrightnessTest
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWriteSensorReg
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWriteReg
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWriteI2CReg
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartReadSensorReg
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartReadReg
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartReadI2CReg
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartFillReg
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDumpReg
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmdParse
</UL>

<P><STRONG><a name="[208]"></a>_scanf_int</STRONG> (ARM, 476 bytes, Stack size 40 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[242]"></a>_scanf_string</STRONG> (ARM, 384 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[20a]"></a>atoi</STRONG> (ARM, 44 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSetDirEntList
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCheckDir
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_fw_ver_net
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_recorded_filelist
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_atoi
</UL>

<P><STRONG><a name="[20d]"></a>srand</STRONG> (ARM, 60 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[1df]"></a>_rand_init</STRONG> (ARM, 8 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[4b3]"></a>_rand_r</STRONG> (ARM, 88 bytes, Stack size 0 bytes, rand_r.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Random
</UL>

<P><STRONG><a name="[4b4]"></a>_srand_r</STRONG> (ARM, 56 bytes, Stack size 0 bytes, rand_r.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Random
</UL>

<P><STRONG><a name="[1ed]"></a>exit</STRONG> (ARM, 24 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Enc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[210]"></a>abort</STRONG> (ARM, 28 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcbs_sane
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo_partial
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionHandlerThread
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxConnMgr_destroyConnection
</UL>

<P><STRONG><a name="[316]"></a>strchr</STRONG> (ARM, 36 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strchr
</UL>

<P><STRONG><a name="[35c]"></a>strstr</STRONG> (ARM, 68 bytes, Stack size 8 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_GetLocalIPAddr
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPrivateIP
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[28a]"></a>memcmp</STRONG> (ARM, 172 bytes, Stack size 0 bytes, memcmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCompareSaveData
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_reply
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Update_VPGServerList
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateLanDeviceList
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTryPortNode
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_lookup_host
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSendLANSearch
</UL>

<P><STRONG><a name="[361]"></a>strcpy</STRONG> (ARM, 104 bytes, Stack size 8 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOpen
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupOpen
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextFile
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDir
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChDir
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDirSearch
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDirScan
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDel
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDelDir
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDel
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfMkBackupDir
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetDirEnt
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateTargetPath
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreatePlaybackTargetPath
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCheckDirExist
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChPlayDir
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChBackupDir
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadP2PPassword
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawVideoTime
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifSetDateTime
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_fw_net
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskCreate
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_getLocal
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_mutex_init
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_lan_search_record
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLanSearchInfoList
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPrivateIP
</UL>

<P><STRONG><a name="[2a0]"></a>strlen</STRONG> (ARM, 96 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuTxFwUpdateFromSD
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuTxFwUpdateFromNet
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiGet_UI_FB_Index
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChDir
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChPlayDir
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChBackupDir
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGetSuptLightAPP
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGetSuptAlarmAPP
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorY
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawFWVersion
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawString
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawKeypadGraph
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeStrtoIP
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorCenter
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawKeypad
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawProtect
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetUID_To_Flash
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetMAC_To_Flash
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strlen
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_lan_search_record
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_lan_search_record_found
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_GetLocalIPAddr
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_resolve_master
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectErrorCode_inner
</UL>

<P><STRONG><a name="[2cf]"></a>strncmp</STRONG> (ARM, 220 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDel
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_TXCMD_Enc
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuTxFwUpdateFromSD
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuTxFwUpdateFromNet
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuFwUpdLoadTxFW_SD
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiGet_UI_FB_Index
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextFile
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGetSuptLightAPP
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGetSuptAlarmAPP
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetFileDoCommand
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetFileType
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_P2P_Readfile
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_contrast_test
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_change_test
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTimerTest
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTimeTest
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetUID_To_Flash
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetMAC_To_Flash
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRXCMDTest
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPanelGammaSetting_Y
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPanelGammaSetting_X
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPWMTest
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdTest
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIRTest
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIPNetworkTest
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_MBR_format
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTotalBlockCount
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strncmp
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileDelete
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATDirDelete
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartReadSensorReg
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmdParse
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_WRretry
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_RDretry
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_file
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_lan_search_record_found
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPrivateIP
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIOTC_Feature_Bitmap
</UL>

<P><STRONG><a name="[4bb]"></a>strcat</STRONG> (ARM, 36 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupOpen
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextFile
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChDir
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDel
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDelDir
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDel
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfMkBackupDir
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateTargetPath
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreatePlaybackTargetPath
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChPlayDir
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChBackupDir
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextDir
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_fw_net
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PSendEvent
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>

<P><STRONG><a name="[215]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpu_ByteMemcpy (via Veneer)
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiWriteSettingToFlash
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiWriteRFIDFromFlash
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiWriteNetworkIDFromFlash
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetDefaultSetting
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiReadVersionFromFlash
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiReadSettingFromFlash
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiReadRFIDFromFlash
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiReadNetworkIDFromFlash
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadFBSetting
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264PutDummyHeader
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteIndexObject
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSplitVideoPayload
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSplitFile
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadVideoPayload
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadHeaderObject
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_fat_rename
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifFileParse
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifDqtParse
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetBootSetting
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCompareSaveData
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PPassword
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSetProgram
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifSetCopyRightVersion
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uiOSDIconColor
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDPrintStr
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledTable
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegRAW420
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSetting
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDU_TVLayer_Stride
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input2
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpkt_finish_handler2
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time_With_TmpCnt
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetUID_To_Flash
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIPNetworkTest
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_GMT_Time
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Listen
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remoteplayback_busy
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVServerStart
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ramDiskDevWrite1
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ramDiskDevRead1
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBSPtoEBSP
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBSPtoNALU
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_get_info
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_BBB_transport
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_new_device
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_submit_root
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_report_descriptor_handler
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_format
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fread
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileEntryUpdate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fwrite
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy (via Veneer)
</UL>

<P><STRONG><a name="[212]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[9f5]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[56f]"></a>__aeabi_memmove</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memmove.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Rly_Knock_R
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_put_content
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_lookup_host
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendIOTC_Query_Device
</UL>

<P><STRONG><a name="[214]"></a>__rt_memmove</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memmove.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[9f6]"></a>__memmove_lastfew</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuRxReplyACKState
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuNoWifiCHsel
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteVideStreamPropertiesObject
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteHeaderObject
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteHeaderExtensionObject
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetHuffmanTable
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetBootSetting
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCompareSaveData
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCapturePreviewImg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PSendEvent
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_configure
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[9f7]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[9f8]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[9f9]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>memset</STRONG> (ARM, 28 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_memset
</UL>

<P><STRONG><a name="[219]"></a>__aeabi_memset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetDefaultSetting
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw_Word
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdIconInit
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetBootSetting
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServResetBuffer
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_configure
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_format
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetLostPos
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
</UL>

<P><STRONG><a name="[21d]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetDefaultSetting
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteIndexObject
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Session_Status
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PSendEvent
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSyncLightTimer2LightInterval
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Initialize2
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Session_Status
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mouse_hid_probe
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_keyboard_hid_probe
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCleanCluster
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_format
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_MBR_format
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fread
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMCacheBufInit
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMemoryPool
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection_new
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_receivingMsg
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Update_VPGServerList
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RemoteSiteClose_Session
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateLanDeviceList
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UdpRelaySessionInfoRequestServer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_thread_Session_Alive
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_callback_Try_Port
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Search_R
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Search
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Rly_Knock_R
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_RLYClose
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_P2PClose
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Knock_RR
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Knock_R
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Knock
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_SendDeviceLogin1
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_SESSION_INFO2
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_REQUEST_R2
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIOTC_Feature_Bitmap
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendIOTC_Query_Device
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_resolve_master
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Punch_To
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_SendHello1
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectResult
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
</UL>

<P><STRONG><a name="[21a]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[218]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[223]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_End
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfiuInit
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetDefaultSetting
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadFBSetting
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCmpWriteData
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCmpBootWriteData
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDReset
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuInit
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSetFreeDirEnt
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSetDirEntList
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackCalendarInit
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_back_RF_Task_init
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_back_Network_Task_init
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_backLowTask_init
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmac110_init
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_txdes
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_task_init
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrl
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvAudioData
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avInitialize
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckAudioBuf
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Initialize2
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_av_sample
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scan
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_alloc_new_device
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_scan
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbHostInit
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcTaskInit
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_ReadBPB
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSPlaybackCacheBufferReset
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_format
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileEntryUpdate
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMCacheBufInit
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileDelete
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATDirDelete
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection_new
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceSessionRecyclingTask
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Update_VPGServerList
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Get_Free_Session
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Get_Free_PreSession
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseSession
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Search_R
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Search
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_SendDeviceLogin1
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLanSearchInfoList
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceLoginCB
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PConnectionRecvCallback
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LanSearchPrecheckRTaskCB
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSessionInfo
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_SESSION_INFO2
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_RR
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_R
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTryPortNode
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unInitAVInfo
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initAVInfo
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Search_Lost_Data
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Request_Resend
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_lookup_host
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectResult
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectErrorCode_inner
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check_Ex
</UL>

<P><STRONG><a name="[9fa]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[9fb]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[21c]"></a>strncpy</STRONG> (ARM, 104 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PSendEvent
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuFolder
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuFile
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strncpy
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_lan_search_record
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_GetLocalIPAddr
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_update_ip
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_resolve_master
</UL>

<P><STRONG><a name="[296]"></a>strcmp</STRONG> (ARM, 268 bytes, Stack size 4 bytes, strcmpfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOpen
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupOpen
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChDir
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfMkBackupDir
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetDirEnt
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateTargetPath
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreatePlaybackTargetPath
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChPlayDir
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChBackupDir
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSetDirEntList
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCheckDir
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCF_GetDeviceIndex
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_IN
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledTable
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSetting
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduled
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawUpgradeFW
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRunFormat
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTimeTest
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTestGPIO
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPWMTest
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdTest
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIRTest
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIPNetworkTest
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_fw_ver_net
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_SearchWholedir
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ScanWholedir
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strcmp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvDoAuthCheck
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[21e]"></a>ctime</STRONG> (ARM, 16 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ctime &rArr; asctime &rArr; _asctime_r &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpdate
</UL>

<P><STRONG><a name="[21f]"></a>localtime</STRONG> (ARM, 8 bytes, Stack size 0 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[221]"></a>_localtime_r</STRONG> (ARM, 240 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[9fc]"></a>localtime_r</STRONG> (ARM, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[9fd]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>__aeabi_idivmod</STRONG> (ARM, 552 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuRXJdgDataSwich_3M
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_function
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduIntHandler
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_readdir
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncSinWriteCache
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncSinReadCache
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[9fe]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9ff]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>__rt_locale</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_asctime_r
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[202]"></a>_ll_udiv10</STRONG> (ARM, 152 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[224]"></a>__read_errno</STRONG> (ARM, 16 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[225]"></a>__set_errno</STRONG> (ARM, 20 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1fe]"></a>_printf_truncate_signed</STRONG> (ARM, 36 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1ff]"></a>_printf_truncate_unsigned</STRONG> (ARM, 32 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[201]"></a>_printf_int_common</STRONG> (ARM, 296 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>

<P><STRONG><a name="[1bd]"></a>_printf_charcount</STRONG> (ARM, 64 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[1f6]"></a>_printf_char_common</STRONG> (ARM, 60 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>

<P><STRONG><a name="[84]"></a>_sputc</STRONG> (ARM, 16 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> __2sprintf.o(.text)
<LI> sprintf.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>_snputc</STRONG> (ARM, 24 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vsnprintf.o(.text)
<LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[226]"></a>_printf_cs_common</STRONG> (ARM, 36 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1d7]"></a>_printf_char</STRONG> (ARM, 28 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[1d9]"></a>_printf_string</STRONG> (ARM, 12 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[1f8]"></a>_printf_char_file</STRONG> (ARM, 48 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[229]"></a>_printf_wctomb</STRONG> (ARM, 312 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[22b]"></a>_printf_longlong_oct</STRONG> (ARM, 108 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[1cb]"></a>_printf_int_oct</STRONG> (ARM, 40 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[1d3]"></a>_printf_ll_oct</STRONG> (ARM, 16 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[209]"></a>_chval</STRONG> (ARM, 32 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[207]"></a>__vfscanf_char</STRONG> (ARM, 44 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[85]"></a>_sgetc</STRONG> (ARM, 64 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>_sbackspace</STRONG> (ARM, 72 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[20c]"></a>strtol</STRONG> (ARM, 184 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[211]"></a>__rt_SIGABRT</STRONG> (ARM, 16 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[a00]"></a>__aeabi_memmove4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[a01]"></a>__aeabi_memmove8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>__rt_memmove_w</STRONG> (ARM, 128 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[216]"></a>__memmove_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[a02]"></a>__memmove_lastfew_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>asctime</STRONG> (ARM, 8 bytes, Stack size 0 bytes, asctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = asctime &rArr; _asctime_r &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_asctime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[200]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[8a]"></a>isspace</STRONG> (ARM, 28 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[a03]"></a>__lib_sel_fp_printf</STRONG> (ARM, 4 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>_printf_fp_dec_real</STRONG> (ARM, 940 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[23a]"></a>_printf_fp_hex_real</STRONG> (ARM, 1064 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[23c]"></a>_printf_lcs_common</STRONG> (ARM, 36 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[1db]"></a>_printf_wchar</STRONG> (ARM, 28 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[1dd]"></a>_printf_wstring</STRONG> (ARM, 12 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[22c]"></a>__vfscanf</STRONG> (ARM, 1548 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring (Weak Reference)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb (Weak Reference)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real (Weak Reference)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc (Weak Reference)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[22d]"></a>_strtoul</STRONG> (ARM, 236 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[22a]"></a>_wcrtomb</STRONG> (ARM, 100 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[22f]"></a>__sig_exit</STRONG> (ARM, 12 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[22e]"></a>__rt_SIGABRT_inner</STRONG> (ARM, 24 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[231]"></a>_asctime_r</STRONG> (ARM, 132 bytes, Stack size 40 bytes, asctime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = _asctime_r &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>

<P><STRONG><a name="[a04]"></a>_n$asctime_r</STRONG> (ARM, 0 bytes, Stack size 40 bytes, asctime_internal.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[245]"></a>sprintf</STRONG> (ARM, 64 bytes, Stack size 32 bytes, sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_asctime_r
</UL>

<P><STRONG><a name="[239]"></a>_printf_fp_infnan</STRONG> (ARM, 204 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[233]"></a>_btod_etento</STRONG> (ARM, 288 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[244]"></a>__default_signal_display</STRONG> (ARM, 80 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[a05]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text_udiv), UNUSED)

<P><STRONG><a name="[222]"></a>__aeabi_uidivmod</STRONG> (ARM, 48 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div12
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div16
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large_positive
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial_A
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_WrapRx_Task_UnitX
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupClose
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSectorErase
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIdentification
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spibootCodeUpdate
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiallCodeUpdate
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCodeUpdate
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiArrangeSpace
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteSectorErase
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadHeaderObject
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_fat_rename
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegDecompression
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysKeepSetStorageSel
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageSel
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStoragePriority
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageInserted
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageIndex
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureImage_OnRFRx
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_Device_Mount
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisTask
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCardInfo
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServResetBuffer
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_DecSliceType
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_DecSliceType
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_diskclust
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_ReadBPB
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_CheckBPB
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_format
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ioctl
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_GetTotalFree
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_FAT_find_eof
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_readwholedir
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_SearchWholedir
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncSinWriteCache
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncSinReadCache
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_file
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RunAction
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RootAction
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RunAction
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RootAction
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCalu
</UL>

<P><STRONG><a name="[234]"></a>_btod_d2e</STRONG> (ARM, 56 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[250]"></a>_d2e_denorm_low</STRONG> (ARM, 84 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[24f]"></a>_d2e_norm_op1</STRONG> (ARM, 104 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[251]"></a>__btod_div_common</STRONG> (ARM, 712 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[252]"></a>_e2e</STRONG> (ARM, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[235]"></a>_btod_ediv</STRONG> (ARM, 48 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[236]"></a>_btod_emul</STRONG> (ARM, 48 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[253]"></a>__btod_mult_common</STRONG> (ARM, 612 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[1a9]"></a>Reset_Handler</STRONG> (ARM, 52 bytes, Stack size 0 bytes, init.o(INIT))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStmem
</UL>

<P><STRONG><a name="[1b1]"></a>InitCache</STRONG> (ARM, 20 bytes, Stack size 0 bytes, initcache.o(InitCACHE), UNUSED, KEPT)

<P><STRONG><a name="[1ae]"></a>board_activate_mmu</STRONG> (ARM, 0 bytes, Stack size unknown bytes, initmmu.o(InitMMU), UNUSED, KEPT)

<P><STRONG><a name="[1af]"></a>Test_Clean_Dcache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, initmmu.o(InitMMU), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Clean_Dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Clean_Dcache
</UL>

<P><STRONG><a name="[1b0]"></a>Disable_Dcache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, initmmu.o(InitMMU), UNUSED, KEPT)

<P><STRONG><a name="[1b2]"></a>InitSdram</STRONG> (ARM, 208 bytes, Stack size 0 bytes, initsdram.o(InitSDRAM), UNUSED, KEPT)

<P><STRONG><a name="[1ac]"></a>InitStmem</STRONG> (ARM, 52 bytes, Stack size 0 bytes, initstmem.o(InitSTMEM))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[1ad]"></a>InitSysCtrl</STRONG> (ARM, 108 bytes, Stack size 0 bytes, initsysctrl.o(InitSYSCTRL), UNUSED, KEPT)

<P><STRONG><a name="[247]"></a>__user_initial_stackheap</STRONG> (ARM, 8 bytes, Stack size 0 bytes, embed_uish.o(UISH))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1ec]"></a>main</STRONG> (ARM, 16 bytes, Stack size 8 bytes, submain.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = main &rArr; $Super$$main &rArr; initMemoryPool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial_A
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[256]"></a>A7196_CH_sel</STRONG> (ARM, 36 bytes, Stack size 0 bytes, amic7196.o(i.A7196_CH_sel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = A7196_CH_sel &rArr; A7196_WriteReg_B2
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteReg_B2
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteReg_B1
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuWaitForInt_Rx
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsRfiu_FCC_DirectTXRX
</UL>

<P><STRONG><a name="[259]"></a>A7196_Cal_B1</STRONG> (ARM, 664 bytes, Stack size 16 bytes, amic7196.o(i.A7196_Cal_B1))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = A7196_Cal_B1 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B1
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteReg_B1
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ReadReg_B1
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF_B1
</UL>

<P><STRONG><a name="[25d]"></a>A7196_Cal_B2</STRONG> (ARM, 664 bytes, Stack size 16 bytes, amic7196.o(i.A7196_Cal_B2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = A7196_Cal_B2 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B2
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteReg_B2
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ReadReg_B2
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF_B2
</UL>

<P><STRONG><a name="[260]"></a>A7196_ChgTo_3M_B1</STRONG> (ARM, 116 bytes, Stack size 32 bytes, amic7196.o(i.A7196_ChgTo_3M_B1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = A7196_ChgTo_3M_B1 &rArr; ByteSendFast_B1
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSendFast_B1
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Tx
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Rx
</UL>

<P><STRONG><a name="[262]"></a>A7196_ChgTo_3M_B2</STRONG> (ARM, 116 bytes, Stack size 32 bytes, amic7196.o(i.A7196_ChgTo_3M_B2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = A7196_ChgTo_3M_B2 &rArr; ByteSendFast_B2
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSendFast_B2
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Tx
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Rx
</UL>

<P><STRONG><a name="[264]"></a>A7196_ChgTo_6M_B1</STRONG> (ARM, 116 bytes, Stack size 32 bytes, amic7196.o(i.A7196_ChgTo_6M_B1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = A7196_ChgTo_6M_B1 &rArr; ByteSendFast_B1
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSendFast_B1
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Rx
</UL>

<P><STRONG><a name="[265]"></a>A7196_ChgTo_6M_B2</STRONG> (ARM, 116 bytes, Stack size 32 bytes, amic7196.o(i.A7196_ChgTo_6M_B2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = A7196_ChgTo_6M_B2 &rArr; ByteSendFast_B2
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSendFast_B2
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Rx
</UL>

<P><STRONG><a name="[266]"></a>A7196_Config_B1</STRONG> (ARM, 596 bytes, Stack size 32 bytes, amic7196.o(i.A7196_Config_B1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = A7196_Config_B1 &rArr; ByteSend_B1
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B1
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteReg_B1
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF_B1
</UL>

<P><STRONG><a name="[267]"></a>A7196_Config_B2</STRONG> (ARM, 596 bytes, Stack size 32 bytes, amic7196.o(i.A7196_Config_B2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = A7196_Config_B2 &rArr; ByteSend_B2
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B2
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteReg_B2
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF_B2
</UL>

<P><STRONG><a name="[268]"></a>A7196_ID_Update</STRONG> (ARM, 356 bytes, Stack size 16 bytes, amic7196.o(i.A7196_ID_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = A7196_ID_Update &rArr; ByteSend_B2
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B2
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B1
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WOR_enable_B1
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
</UL>

<P><STRONG><a name="[25c]"></a>A7196_ReadReg_B1</STRONG> (ARM, 324 bytes, Stack size 32 bytes, amic7196.o(i.A7196_ReadReg_B1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = A7196_ReadReg_B1 &rArr; gpioGetLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioGetLevel
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSI_measurement_A7196
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHGroupCal_B1
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Cal_B1
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsRfiu_FCC_DirectTXRX
</UL>

<P><STRONG><a name="[25f]"></a>A7196_ReadReg_B2</STRONG> (ARM, 324 bytes, Stack size 32 bytes, amic7196.o(i.A7196_ReadReg_B2))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = A7196_ReadReg_B2 &rArr; gpioGetLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioGetLevel
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSI_measurement_A7196
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHGroupCal_B2
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Cal_B2
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsRfiu_FCC_DirectTXRX
</UL>

<P><STRONG><a name="[26b]"></a>A7196_RxMode_Start</STRONG> (ARM, 184 bytes, Stack size 8 bytes, amic7196.o(i.A7196_RxMode_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = A7196_RxMode_Start &rArr; ByteSend_B2
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B2
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B1
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Rx
</UL>

<P><STRONG><a name="[26c]"></a>A7196_RxMode_Stop</STRONG> (ARM, 184 bytes, Stack size 8 bytes, amic7196.o(i.A7196_RxMode_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = A7196_RxMode_Stop &rArr; ByteSend_B2
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B2
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B1
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuWaitForInt_Rx
</UL>

<P><STRONG><a name="[26d]"></a>A7196_TxMode_Start</STRONG> (ARM, 184 bytes, Stack size 8 bytes, amic7196.o(i.A7196_TxMode_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = A7196_TxMode_Start &rArr; ByteSend_B2
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B2
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B1
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Tx
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsRfiu_FCC_DirectTXRX
</UL>

<P><STRONG><a name="[26e]"></a>A7196_TxMode_Stop</STRONG> (ARM, 180 bytes, Stack size 8 bytes, amic7196.o(i.A7196_TxMode_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = A7196_TxMode_Stop &rArr; ByteSend_B2
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B2
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B1
</UL>
<BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuWaitForInt_Tx
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsRfiu_FCC_DirectTXRX
</UL>

<P><STRONG><a name="[54]"></a>A7196_WOR_enable_B1</STRONG> (ARM, 520 bytes, Stack size 8 bytes, amic7196.o(i.A7196_WOR_enable_B1))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = A7196_WOR_enable_B1 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPowerOffDirect
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B1
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteReg_B1
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ID_Update
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[271]"></a>A7196_WriteID_B1</STRONG> (ARM, 340 bytes, Stack size 56 bytes, amic7196.o(i.A7196_WriteID_B1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B1
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead_B1
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[273]"></a>A7196_WriteID_B2</STRONG> (ARM, 340 bytes, Stack size 56 bytes, amic7196.o(i.A7196_WriteID_B2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B2
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead_B2
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[258]"></a>A7196_WriteReg_B1</STRONG> (ARM, 256 bytes, Stack size 16 bytes, amic7196.o(i.A7196_WriteReg_B1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = A7196_WriteReg_B1
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF_B1
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitA7196
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHGroupCal_B1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WOR_enable_B1
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Config_B1
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Cal_B1
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_CH_sel
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsRfiu_FCC_DirectTXRX
</UL>

<P><STRONG><a name="[257]"></a>A7196_WriteReg_B2</STRONG> (ARM, 256 bytes, Stack size 16 bytes, amic7196.o(i.A7196_WriteReg_B2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = A7196_WriteReg_B2
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF_B2
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitA7196
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHGroupCal_B2
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Config_B2
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Cal_B2
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_CH_sel
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsRfiu_FCC_DirectTXRX
</UL>

<P><STRONG><a name="[280]"></a>AVServerStart</STRONG> (ARM, 420 bytes, Stack size 152 bytes, tutk_av_sample.o(i.AVServerStart), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PImageLevel
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Close
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[287]"></a>AddSendLANSearch</STRONG> (ARM, 536 bytes, Stack size 88 bytes, iotcapis.o(i.AddSendLANSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = AddSendLANSearch &rArr; iotc_netaddr_put_content &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Create
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_put_content
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
</UL>

<P><STRONG><a name="[7d1]"></a>AdjustIISFreq</STRONG> (ARM, 16 bytes, Stack size 0 bytes, iis.o(i.AdjustIISFreq))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
</UL>

<P><STRONG><a name="[c6]"></a>AvClientRecvIotcData</STRONG> (ARM, 408 bytes, Stack size 32 bytes, avapis.o(i.AvClientRecvIotcData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8856 + Unknown Stack Size
<LI>Call Chain = AvClientRecvIotcData &rArr; _doClientAVTrans &rArr; __Audio_Request_Resend &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVCtrl
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_unLock
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avapis.o(i.avClientStart_inner)
</UL>
<P><STRONG><a name="[c9]"></a>AvSrvRecvIotcData</STRONG> (ARM, 448 bytes, Stack size 32 bytes, avapis.o(i.AvSrvRecvIotcData))
<BR><BR>[Stack]<UL><LI>Max Depth = 9136 + Unknown Stack Size
<LI>Call Chain = AvSrvRecvIotcData &rArr; _doServAVCtrl &rArr; avSendAudioDataResend &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_unLock
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avapis.o(i.avServStart)
</UL>
<P><STRONG><a name="[298]"></a>Beep_function</STRONG> (ARM, 328 bytes, Stack size 56 bytes, timer_project.o(i.Beep_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Beep_function &rArr; OSFlagCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckMotion
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPWMTest
</UL>

<P><STRONG><a name="[272]"></a>ByteRead_B1</STRONG> (ARM, 180 bytes, Stack size 32 bytes, amic7196.o(i.ByteRead_B1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ByteRead_B1 &rArr; gpioGetLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioGetLevel
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF_B1
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteID_B1
</UL>

<P><STRONG><a name="[274]"></a>ByteRead_B2</STRONG> (ARM, 180 bytes, Stack size 32 bytes, amic7196.o(i.ByteRead_B2))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ByteRead_B2 &rArr; gpioGetLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioGetLevel
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF_B2
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteID_B2
</UL>

<P><STRONG><a name="[261]"></a>ByteSendFast_B1</STRONG> (ARM, 96 bytes, Stack size 8 bytes, amic7196.o(i.ByteSendFast_B1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ByteSendFast_B1
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ChgTo_6M_B1
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ChgTo_3M_B1
</UL>

<P><STRONG><a name="[263]"></a>ByteSendFast_B2</STRONG> (ARM, 100 bytes, Stack size 8 bytes, amic7196.o(i.ByteSendFast_B2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ByteSendFast_B2
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ChgTo_6M_B2
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ChgTo_3M_B2
</UL>

<P><STRONG><a name="[25b]"></a>ByteSend_B1</STRONG> (ARM, 116 bytes, Stack size 16 bytes, amic7196.o(i.ByteSend_B1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ByteSend_B1
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF_B1
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitA7196
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteID_B1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WOR_enable_B1
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_TxMode_Stop
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_TxMode_Start
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_RxMode_Stop
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_RxMode_Start
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ID_Update
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Config_B1
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Cal_B1
</UL>

<P><STRONG><a name="[25e]"></a>ByteSend_B2</STRONG> (ARM, 116 bytes, Stack size 16 bytes, amic7196.o(i.ByteSend_B2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ByteSend_B2
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF_B2
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitA7196
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteID_B2
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_TxMode_Stop
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_TxMode_Start
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_RxMode_Stop
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_RxMode_Start
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ID_Update
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Config_B2
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Cal_B2
</UL>

<P><STRONG><a name="[29c]"></a>CHGroupCal_B1</STRONG> (ARM, 164 bytes, Stack size 16 bytes, amic7196.o(i.CHGroupCal_B1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteReg_B1
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ReadReg_B1
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[29d]"></a>CHGroupCal_B2</STRONG> (ARM, 164 bytes, Stack size 16 bytes, amic7196.o(i.CHGroupCal_B2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteReg_B2
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ReadReg_B2
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[8b3]"></a>CH_Channel_write</STRONG> (ARM, 4 bytes, Stack size 0 bytes, i2c.o(i.CH_Channel_write))
<BR><BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_change_test
</UL>

<P><STRONG><a name="[29e]"></a>CalculatSendPacketInterval</STRONG> (ARM, 96 bytes, Stack size 96 bytes, avapis.o(i.CalculatSendPacketInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = CalculatSendPacketInterval &rArr; IOTC_Session_Check &rArr; IOTC_Session_Check_Ex &rArr; iotc_netaddr_get_content &rArr; tutk_platform_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServResetBuffer
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvAudioData
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVCtrl
</UL>

<P><STRONG><a name="[29f]"></a>ChangeStrtoIP</STRONG> (ARM, 836 bytes, Stack size 64 bytes, ui_graph_project.o(i.ChangeStrtoIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ChangeStrtoIP &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIP
</UL>

<P><STRONG><a name="[2a3]"></a>Check_P2P_info</STRONG> (ARM, 80 bytes, Stack size 8 bytes, tutk_av_sample.o(i.Check_P2P_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Check_P2P_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Get_Login_Info
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNetworkLink
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmdParse
</UL>

<P><STRONG><a name="[2a5]"></a>Check_Session_Status</STRONG> (ARM, 1392 bytes, Stack size 136 bytes, tutk_av_sample.o(i.Check_Session_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 3560 + Unknown Stack Size
<LI>Call Chain = Check_Session_Status &rArr; client_p2pdisconnected &rArr; IOTC_Session_Close &rArr; _IOTC_Send_RLYClose &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PImageLevel
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafeDelP2pPlayFileTask
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStop
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_p2pdisconnected
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kill_Task_Speaker
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[2ac]"></a>Check_fw_ver_net</STRONG> (ARM, 312 bytes, Stack size 2072 bytes, tutk_av_sample.o(i.Check_fw_ver_net))
<BR><BR>[Stack]<UL><LI>Max Depth = 3776 + Unknown Stack Size
<LI>Call Chain = Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawRemindDownload
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_LwIPEntry
</UL>

<P><STRONG><a name="[73c]"></a>CiuInit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, ciu.o(i.CiuInit))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[2b2]"></a>ClearP2PConnection</STRONG> (ARM, 308 bytes, Stack size 32 bytes, tutk_av_sample.o(i.ClearP2PConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ClearP2PConnection &rArr; SafeDelP2pPlayFileTask &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafeDelP2pPlayFileTask
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kill_Task_Speaker
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckP2PMode
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[2b3]"></a>Clear_Session_Status</STRONG> (ARM, 808 bytes, Stack size 40 bytes, tutk_av_sample.o(i.Clear_Session_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 3464 + Unknown Stack Size
<LI>Call Chain = Clear_Session_Status &rArr; client_p2pdisconnected &rArr; IOTC_Session_Close &rArr; _IOTC_Send_RLYClose &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PImageLevel
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafeDelP2pPlayFileTask
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStop
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_p2pdisconnected
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kill_Task_Speaker
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareUpdateFlow
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetPrepare
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
</UL>

<P><STRONG><a name="[2b4]"></a>DCF_GetDeviceIndex</STRONG> (ARM, 144 bytes, Stack size 16 bytes, fs_info.o(i.DCF_GetDeviceIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DCF_GetDeviceIndex &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ramDiskInit
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_OFF
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_IN
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_OFF
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_Device_Mount
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ramDiskDevStatus
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbfsDevStatus
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbfsDevIoCtl
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevStatus
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevIoCtl
</UL>

<P><STRONG><a name="[2b5]"></a>DN2IP</STRONG> (ARM, 136 bytes, Stack size 16 bytes, tutk_av_sample.o(i.DN2IP))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = DN2IP &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpdate
</UL>

<P><STRONG><a name="[ed]"></a>DrawLogoTask</STRONG> (ARM, 32 bytes, Stack size 0 bytes, main_task_project.o(i.DrawLogoTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = DrawLogoTask &rArr; uiMenuSetStartMovie &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetStartMovie
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_task_project.o(i.mainTask)
</UL>
<P><STRONG><a name="[2bb]"></a>Ethernet_Exception</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ethernetif.o(i.Ethernet_Exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Ethernet_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_1_IntHandler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioIntHandler
</UL>

<P><STRONG><a name="[2bd]"></a>FSFAT32ScanFreeCluster</STRONG> (ARM, 512 bytes, Stack size 56 bytes, fat_misc.o(i.FSFAT32ScanFreeCluster), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpu_FATZeroScan (via Veneer)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_read
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMalloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFree
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2c2]"></a>FSFATAllocateFreeCluster</STRONG> (ARM, 524 bytes, Stack size 40 bytes, fat_misc.o(i.FSFATAllocateFreeCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = FSFATAllocateFreeCluster &rArr; FSFATOrderFreeCluster &rArr; FSFATFindFreeCluster &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATSetTheClusterLinkToDestination
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATOrderFreeCluster
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMalloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFree
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATIncEntry
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATNewEntry
</UL>

<P><STRONG><a name="[2c5]"></a>FSFATBookFreeCluster</STRONG> (ARM, 1368 bytes, Stack size 72 bytes, fat_misc.o(i.FSFATBookFreeCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = FSFATBookFreeCluster &rArr; FS__lb_sin_write &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_write
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATOrderFreeCluster
</UL>

<P><STRONG><a name="[2ca]"></a>FSFATCalculateSectorByCluster</STRONG> (ARM, 392 bytes, Stack size 16 bytes, fat_misc.o(i.FSFATCalculateSectorByCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = FSFATCalculateSectorByCluster &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCleanCluster
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fread
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileEntryUpdate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fwrite
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ScanWholedir
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileDelete
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATDirDelete
</UL>

<P><STRONG><a name="[2cb]"></a>FSFATCleanCluster</STRONG> (ARM, 432 bytes, Stack size 64 bytes, fat_misc.o(i.FSFATCleanCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = FSFATCleanCluster &rArr; FS__lb_mul_write &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_write
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMalloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFree
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCalculateSectorByCluster
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATOrderFreeCluster
</UL>

<P><STRONG><a name="[2cd]"></a>FSFATCollectClusterList</STRONG> (ARM, 900 bytes, Stack size 64 bytes, fat_misc.o(i.FSFATCollectClusterList))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = FSFATCollectClusterList &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATIncEntry
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATGoForwardClusterList
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATGoForwardCluster
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileEntryUpdate
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileDelete
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATDirDelete
</UL>

<P><STRONG><a name="[2ce]"></a>FSFATDirDelete</STRONG> (ARM, 1464 bytes, Stack size 64 bytes, fat_misc.o(i.FSFATDirDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = FSFATDirDelete &rArr; FSFATFreeFATLink &rArr; FSFATSetFSInfo &rArr; FS__lb_sin_write &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCollectClusterList
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_write
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_read
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMalloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFree
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCalculateSectorByCluster
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Remove
</UL>

<P><STRONG><a name="[2d1]"></a>FSFATFileDelete</STRONG> (ARM, 2384 bytes, Stack size 168 bytes, fat_misc.o(i.FSFATFileDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCollectClusterList
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_write
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_read
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMalloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFree
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCalculateSectorByCluster
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileDelete
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Remove
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileDelete
</UL>

<P><STRONG><a name="[2d2]"></a>FSFATFileEntryUpdate</STRONG> (ARM, 2080 bytes, Stack size 96 bytes, fat_misc.o(i.FSFATFileEntryUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = FSFATFileEntryUpdate &rArr; FSFATCollectClusterList &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCollectClusterList
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_write
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_read
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMalloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFree
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCalculateSectorByCluster
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fclose
</UL>

<P><STRONG><a name="[2d4]"></a>FSFATFindFreeCluster</STRONG> (ARM, 1356 bytes, Stack size 136 bytes, fat_misc.o(i.FSFATFindFreeCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = FSFATFindFreeCluster &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpu_FATZeroScan (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_read
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMalloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFree
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATOrderFreeCluster
</UL>

<P><STRONG><a name="[2d0]"></a>FSFATFreeFATLink</STRONG> (ARM, 2364 bytes, Stack size 112 bytes, fat_misc.o(i.FSFATFreeFATLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = FSFATFreeFATLink &rArr; FSFATSetFSInfo &rArr; FS__lb_sin_write &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATSetFSInfo
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_write
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_write
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_read
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMalloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFree
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink_bg
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_DeleteFileOrDir
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_readwholedir
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_SearchWholedir
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ScanWholedir
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileDelete
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATDirDelete
</UL>

<P><STRONG><a name="[47]"></a>FSFATFreeFATLink_bg</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fat_misc.o(i.FSFATFreeFATLink_bg))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = FSFATFreeFATLink_bg &rArr; FSFATFreeFATLink &rArr; FSFATSetFSInfo &rArr; FS__lb_sin_write &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[2d8]"></a>FSFATGoForwardCluster</STRONG> (ARM, 32 bytes, Stack size 16 bytes, fat_misc.o(i.FSFATGoForwardCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = FSFATGoForwardCluster &rArr; FSFATCollectClusterList &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCollectClusterList
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fopen
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fread
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fwrite
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ScanWholedir
</UL>

<P><STRONG><a name="[2d9]"></a>FSFATGoForwardClusterList</STRONG> (ARM, 32 bytes, Stack size 16 bytes, fat_misc.o(i.FSFATGoForwardClusterList))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = FSFATGoForwardClusterList &rArr; FSFATCollectClusterList &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCollectClusterList
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fread
</UL>

<P><STRONG><a name="[2da]"></a>FSFATIncEntry</STRONG> (ARM, 428 bytes, Stack size 56 bytes, fat_misc.o(i.FSFATIncEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = FSFATIncEntry &rArr; FSFATAllocateFreeCluster &rArr; FSFATOrderFreeCluster &rArr; FSFATFindFreeCluster &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCollectClusterList
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATAllocateFreeCluster
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fopen
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_MkRmDir
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fwrite
</UL>

<P><STRONG><a name="[2db]"></a>FSFATLWScanClusterLink</STRONG> (ARM, 712 bytes, Stack size 48 bytes, fat_misc.o(i.FSFATLWScanClusterLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = FSFATLWScanClusterLink &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ScanWholedir
</UL>

<P><STRONG><a name="[2dc]"></a>FSFATNewEntry</STRONG> (ARM, 340 bytes, Stack size 56 bytes, fat_misc.o(i.FSFATNewEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = FSFATNewEntry &rArr; FSFATAllocateFreeCluster &rArr; FSFATOrderFreeCluster &rArr; FSFATFindFreeCluster &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATAllocateFreeCluster
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_directory
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_file
</UL>

<P><STRONG><a name="[2c3]"></a>FSFATOrderFreeCluster</STRONG> (ARM, 752 bytes, Stack size 40 bytes, fat_misc.o(i.FSFATOrderFreeCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = FSFATOrderFreeCluster &rArr; FSFATFindFreeCluster &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATSetFSInfo
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFindFreeCluster
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCleanCluster
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATBookFreeCluster
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATAllocateFreeCluster
</UL>

<P><STRONG><a name="[2d7]"></a>FSFATSetFSInfo</STRONG> (ARM, 636 bytes, Stack size 32 bytes, fat_misc.o(i.FSFATSetFSInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = FSFATSetFSInfo &rArr; FS__lb_sin_write &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_write
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATOrderFreeCluster
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
</UL>

<P><STRONG><a name="[2c4]"></a>FSFATSetTheClusterLinkToDestination</STRONG> (ARM, 1016 bytes, Stack size 56 bytes, fat_misc.o(i.FSFATSetTheClusterLinkToDestination))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = FSFATSetTheClusterLinkToDestination &rArr; FS__lb_sin_write &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_write
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATAllocateFreeCluster
</UL>

<P><STRONG><a name="[2c0]"></a>FSFree</STRONG> (ARM, 264 bytes, Stack size 16 bytes, fat_misc.o(i.FSFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = FSFree &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockMem
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockMem
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFindFreeCluster
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCleanCluster
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATAllocateFreeCluster
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFAT32ScanFreeCluster
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_format
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_GetTotalFree
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fread
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileEntryUpdate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fwrite
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ScanWholedir
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileDelete
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATDirDelete
</UL>

<P><STRONG><a name="[306]"></a>FSLBCacheInit</STRONG> (ARM, 152 bytes, Stack size 20 bytes, lb_misc.o(i.FSLBCacheInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FSLBCacheInit
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_LB_Cache_Init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_LB_Cache_Clear
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_status
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_ioctl
</UL>

<P><STRONG><a name="[2df]"></a>FSLBSyncAllCache</STRONG> (ARM, 428 bytes, Stack size 56 bytes, lb_misc.o(i.FSLBSyncAllCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_WRretry
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_LB_Cache_Clean
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_ioctl
</UL>

<P><STRONG><a name="[2e1]"></a>FSLBSyncMulReadCache</STRONG> (ARM, 300 bytes, Stack size 40 bytes, lb_misc.o(i.FSLBSyncMulReadCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = FSLBSyncMulReadCache &rArr; FS__CLIB_memcpy &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_read
</UL>

<P><STRONG><a name="[2e3]"></a>FSLBSyncMulWriteCache</STRONG> (ARM, 304 bytes, Stack size 40 bytes, lb_misc.o(i.FSLBSyncMulWriteCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = FSLBSyncMulWriteCache &rArr; FS__CLIB_memcpy &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_write
</UL>

<P><STRONG><a name="[2e4]"></a>FSLBSyncSinReadCache</STRONG> (ARM, 1036 bytes, Stack size 64 bytes, lb_misc.o(i.FSLBSyncSinReadCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_memcpy
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_RDretry
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_read
</UL>

<P><STRONG><a name="[2e6]"></a>FSLBSyncSinWriteCache</STRONG> (ARM, 1136 bytes, Stack size 72 bytes, lb_misc.o(i.FSLBSyncSinWriteCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_memcpy
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_WRretry
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_write
</UL>

<P><STRONG><a name="[2e7]"></a>FSMCacheBufInit</STRONG> (ARM, 84 bytes, Stack size 8 bytes, fat_misc.o(i.FSMCacheBufInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSMCacheBufInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Init
</UL>

<P><STRONG><a name="[2be]"></a>FSMalloc</STRONG> (ARM, 456 bytes, Stack size 24 bytes, fat_misc.o(i.FSMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = FSMalloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockMem
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockMem
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFindFreeCluster
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCleanCluster
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATAllocateFreeCluster
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFAT32ScanFreeCluster
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_format
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_GetTotalFree
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fread
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileEntryUpdate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fwrite
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ScanWholedir
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileDelete
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATDirDelete
</UL>

<P><STRONG><a name="[2e8]"></a>FSPlaybackCacheBufferReset</STRONG> (ARM, 52 bytes, Stack size 8 bytes, fat_misc.o(i.FSPlaybackCacheBufferReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSPlaybackCacheBufferReset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_format
</UL>

<P><STRONG><a name="[2e9]"></a>FS_CloseDir</STRONG> (ARM, 372 bytes, Stack size 16 bytes, api_dir.o(i.FS_CloseDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = FS_CloseDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockDirHandle
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockDirHandle
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDir
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChDir
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDirSearch
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDirScan
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDel
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDelDir
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDel
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetDirEnt
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDirExist
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCheckDirExist
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChPlayDir
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChBackupDir
</UL>

<P><STRONG><a name="[2ec]"></a>FS_FClose</STRONG> (ARM, 452 bytes, Stack size 16 bytes, api_misc.o(i.FS_FClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = FS_FClose &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockFileHandle
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockFileHandle
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupClose
</UL>

<P><STRONG><a name="[2ef]"></a>FS_FError</STRONG> (ARM, 136 bytes, Stack size 8 bytes, api_misc.o(i.FS_FError))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = FS_FError &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfRead
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupRead
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfWrite
</UL>

<P><STRONG><a name="[2f0]"></a>FS_FOpen</STRONG> (ARM, 688 bytes, Stack size 48 bytes, api_misc.o(i.FS_FOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = FS_FOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strncmp
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strlen
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strcmp
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strchr
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockFileHandle
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockFileHandle
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOpen
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupOpen
</UL>

<P><STRONG><a name="[2f6]"></a>FS_FRead</STRONG> (ARM, 432 bytes, Stack size 24 bytes, api_misc.o(i.FS_FRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = FS_FRead &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockFileOp
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockFileOp
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfRead
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupRead
</UL>

<P><STRONG><a name="[2f9]"></a>FS_FSeek</STRONG> (ARM, 228 bytes, Stack size 8 bytes, api_misc.o(i.FS_FSeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = FS_FSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSeek
</UL>

<P><STRONG><a name="[2fa]"></a>FS_FTell</STRONG> (ARM, 140 bytes, Stack size 8 bytes, api_misc.o(i.FS_FTell))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = FS_FTell &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfTell
</UL>

<P><STRONG><a name="[2fb]"></a>FS_FWrite</STRONG> (ARM, 432 bytes, Stack size 24 bytes, api_misc.o(i.FS_FWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = FS_FWrite &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockFileOp
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockFileOp
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfWrite
</UL>

<P><STRONG><a name="[2fc]"></a>FS_Init</STRONG> (ARM, 48 bytes, Stack size 8 bytes, api_misc.o(i.FS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = FS_Init &rArr; FS__fat_block_init &rArr; FS_X_OS_LockMem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_block_init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_Init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMCacheBufInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[300]"></a>FS_IoCtl</STRONG> (ARM, 484 bytes, Stack size 56 bytes, api_misc.o(i.FS_IoCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = FS_IoCtl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strncmp
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strchr
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_atoi
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCheckUnit
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCheckBackupUnit
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFormatBackup
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFormat
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextDir
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfInit
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDriveInfo
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupInit
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupDriveInfo
</UL>

<P><STRONG><a name="[302]"></a>FS_LB_Cache_Clean</STRONG> (ARM, 80 bytes, Stack size 24 bytes, lb_misc.o(i.FS_LB_Cache_Clean))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = FS_LB_Cache_Clean &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockDeviceOp
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockDeviceOp
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncAllCache
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCacheClean
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupCacheClean
</UL>

<P><STRONG><a name="[305]"></a>FS_LB_Cache_Clear</STRONG> (ARM, 76 bytes, Stack size 24 bytes, lb_misc.o(i.FS_LB_Cache_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = FS_LB_Cache_Clear &rArr; FS_X_OS_LockDeviceOp &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockDeviceOp
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockDeviceOp
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBCacheInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCacheClear
</UL>

<P><STRONG><a name="[55c]"></a>FS_LB_Cache_Enable</STRONG> (ARM, 48 bytes, Stack size 0 bytes, lb_misc.o(i.FS_LB_Cache_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_ReadBPB
</UL>

<P><STRONG><a name="[307]"></a>FS_LB_Cache_Init</STRONG> (ARM, 100 bytes, Stack size 24 bytes, lb_misc.o(i.FS_LB_Cache_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = FS_LB_Cache_Init &rArr; FS_X_OS_LockDeviceOp &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockDeviceOp
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockDeviceOp
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBCacheInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCacheInit
</UL>

<P><STRONG><a name="[308]"></a>FS_MkDir</STRONG> (ARM, 300 bytes, Stack size 24 bytes, api_dir.o(i.FS_MkDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = FS_MkDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__find_fsl
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockDirHandle
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockDirHandle
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfMkDir
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfMkBackupDir
</UL>

<P><STRONG><a name="[30a]"></a>FS_OpenDir</STRONG> (ARM, 436 bytes, Stack size 32 bytes, api_dir.o(i.FS_OpenDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = FS_OpenDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__find_fsl
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockDirHandle
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockDirHandle
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDir
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChDir
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDirSearch
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDirScan
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDel
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDelDir
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDel
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetDirEnt
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDirExist
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCheckDirExist
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChPlayDir
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChBackupDir
</UL>

<P><STRONG><a name="[30b]"></a>FS_ReadDir</STRONG> (ARM, 268 bytes, Stack size 16 bytes, api_dir.o(i.FS_ReadDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = FS_ReadDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockDirOp
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockDirOp
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetDirEnt
</UL>

<P><STRONG><a name="[30e]"></a>FS_ReadWholeDir</STRONG> (ARM, 308 bytes, Stack size 48 bytes, api_dir.o(i.FS_ReadWholeDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = FS_ReadWholeDir &rArr; FS__fat_readwholedir &rArr; FS__fat_dir_realsec &rArr;  FS__fat_find_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_readwholedir
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockDirOp
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockDirOp
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDir
</UL>

<P><STRONG><a name="[310]"></a>FS_Remove</STRONG> (ARM, 36 bytes, Stack size 0 bytes, api_misc.o(i.FS_Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = FS_Remove &rArr; FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileDelete
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATDirDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDel
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDelDir
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDel
</UL>

<P><STRONG><a name="[311]"></a>FS_ScanWholeDir</STRONG> (ARM, 304 bytes, Stack size 40 bytes, api_dir.o(i.FS_ScanWholeDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = FS_ScanWholeDir &rArr; FS__fat_ScanWholedir &rArr; FSFATFreeFATLink &rArr; FSFATSetFSInfo &rArr; FS__lb_sin_write &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ScanWholedir
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockDirOp
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockDirOp
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDirScan
</UL>

<P><STRONG><a name="[313]"></a>FS_SearchWholeDir</STRONG> (ARM, 332 bytes, Stack size 80 bytes, api_dir.o(i.FS_SearchWholeDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = FS_SearchWholeDir &rArr; FS__fat_SearchWholedir &rArr; FS__fat_dir_realsec &rArr;  FS__fat_find_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_SearchWholedir
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockDirOp
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockDirOp
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDirSearch
</UL>

<P><STRONG><a name="[2fd]"></a>FS_X_OS_Init</STRONG> (ARM, 112 bytes, Stack size 16 bytes, fs_x_ucos_ii.o(i.FS_X_OS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = FS_X_OS_Init &rArr; OSSemCreate &rArr; OS_EventWaitListInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Init
</UL>

<P><STRONG><a name="[303]"></a>FS_X_OS_LockDeviceOp</STRONG> (ARM, 28 bytes, Stack size 8 bytes, fs_x_ucos_ii.o(i.FS_X_OS_LockDeviceOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = FS_X_OS_LockDeviceOp &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_LB_Cache_Init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_LB_Cache_Clear
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_LB_Cache_Clean
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_status
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_write
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_read
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_ioctl
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_write
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_read
</UL>

<P><STRONG><a name="[2ea]"></a>FS_X_OS_LockDirHandle</STRONG> (ARM, 28 bytes, Stack size 8 bytes, fs_x_ucos_ii.o(i.FS_X_OS_LockDirHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = FS_X_OS_LockDirHandle &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_OpenDir
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_MkDir
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CloseDir
</UL>

<P><STRONG><a name="[30c]"></a>FS_X_OS_LockDirOp</STRONG> (ARM, 28 bytes, Stack size 8 bytes, fs_x_ucos_ii.o(i.FS_X_OS_LockDirOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = FS_X_OS_LockDirOp &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SearchWholeDir
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ScanWholeDir
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadWholeDir
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadDir
</UL>

<P><STRONG><a name="[2ed]"></a>FS_X_OS_LockFileHandle</STRONG> (ARM, 28 bytes, Stack size 8 bytes, fs_x_ucos_ii.o(i.FS_X_OS_LockFileHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = FS_X_OS_LockFileHandle &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FOpen
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FClose
</UL>

<P><STRONG><a name="[2f7]"></a>FS_X_OS_LockFileOp</STRONG> (ARM, 28 bytes, Stack size 8 bytes, fs_x_ucos_ii.o(i.FS_X_OS_LockFileOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = FS_X_OS_LockFileOp &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FWrite
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FRead
</UL>

<P><STRONG><a name="[2dd]"></a>FS_X_OS_LockMem</STRONG> (ARM, 28 bytes, Stack size 8 bytes, fs_x_ucos_ii.o(i.FS_X_OS_LockMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = FS_X_OS_LockMem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMalloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFree
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_block_init
</UL>

<P><STRONG><a name="[304]"></a>FS_X_OS_UnlockDeviceOp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fs_x_ucos_ii.o(i.FS_X_OS_UnlockDeviceOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = FS_X_OS_UnlockDeviceOp &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_LB_Cache_Init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_LB_Cache_Clear
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_LB_Cache_Clean
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_status
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_write
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_read
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_ioctl
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_write
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_read
</UL>

<P><STRONG><a name="[2eb]"></a>FS_X_OS_UnlockDirHandle</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fs_x_ucos_ii.o(i.FS_X_OS_UnlockDirHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = FS_X_OS_UnlockDirHandle &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_OpenDir
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_MkDir
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CloseDir
</UL>

<P><STRONG><a name="[30d]"></a>FS_X_OS_UnlockDirOp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fs_x_ucos_ii.o(i.FS_X_OS_UnlockDirOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = FS_X_OS_UnlockDirOp &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SearchWholeDir
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ScanWholeDir
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadWholeDir
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadDir
</UL>

<P><STRONG><a name="[2ee]"></a>FS_X_OS_UnlockFileHandle</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fs_x_ucos_ii.o(i.FS_X_OS_UnlockFileHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = FS_X_OS_UnlockFileHandle &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FOpen
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FClose
</UL>

<P><STRONG><a name="[2f8]"></a>FS_X_OS_UnlockFileOp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fs_x_ucos_ii.o(i.FS_X_OS_UnlockFileOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = FS_X_OS_UnlockFileOp &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FWrite
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FRead
</UL>

<P><STRONG><a name="[2de]"></a>FS_X_OS_UnlockMem</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fs_x_ucos_ii.o(i.FS_X_OS_UnlockMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = FS_X_OS_UnlockMem &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMalloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFree
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_block_init
</UL>

<P><STRONG><a name="[301]"></a>FS__CLIB_atoi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, clibmisc.o(i.FS__CLIB_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FS__CLIB_atoi &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_findpath
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_IoCtl
</UL>

<P><STRONG><a name="[2e2]"></a>FS__CLIB_memcpy</STRONG> (ARM, 20 bytes, Stack size 8 bytes, clibmisc.o(i.FS__CLIB_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = FS__CLIB_memcpy &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_readdir
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_readwholedir
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_SearchWholedir
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ScanWholedir
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncSinWriteCache
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncSinReadCache
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncMulWriteCache
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncMulReadCache
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_find_file
</UL>

<P><STRONG><a name="[315]"></a>FS__CLIB_memset</STRONG> (ARM, 4 bytes, Stack size 0 bytes, clibmisc.o(i.FS__CLIB_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = FS__CLIB_memset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_directory
</UL>

<P><STRONG><a name="[2f1]"></a>FS__CLIB_strchr</STRONG> (ARM, 4 bytes, Stack size 0 bytes, clibmisc.o(i.FS__CLIB_strchr))
<BR><BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__find_fsl
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_findpath
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_IoCtl
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FOpen
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_make_realname
</UL>

<P><STRONG><a name="[2f5]"></a>FS__CLIB_strcmp</STRONG> (ARM, 4 bytes, Stack size 0 bytes, clibmisc.o(i.FS__CLIB_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FS__CLIB_strcmp &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FOpen
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fopen
</UL>

<P><STRONG><a name="[2f3]"></a>FS__CLIB_strlen</STRONG> (ARM, 4 bytes, Stack size 0 bytes, clibmisc.o(i.FS__CLIB_strlen))
<BR><BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_fat_rename
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__find_fsl
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_IoCtl
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FOpen
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_make_realname
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_find_dir
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_DeleteFileOrDir
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_opendir
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_MkRmDir
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_directory
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_find_file
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_file
</UL>

<P><STRONG><a name="[2f4]"></a>FS__CLIB_strncmp</STRONG> (ARM, 4 bytes, Stack size 0 bytes, clibmisc.o(i.FS__CLIB_strncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FS__CLIB_strncmp &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_fat_rename
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__find_fsl
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_IoCtl
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FOpen
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_find_dir
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_DeleteFileOrDir
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_find_file
</UL>

<P><STRONG><a name="[317]"></a>FS__CLIB_strncpy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, clibmisc.o(i.FS__CLIB_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FS__CLIB_strncpy &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_findpath
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_directory
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_file
</UL>

<P><STRONG><a name="[32f]"></a>FS__CLIB_toupper</STRONG> (ARM, 12 bytes, Stack size 0 bytes, clibmisc.o(i.FS__CLIB_toupper))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_make_realname
</UL>

<P><STRONG><a name="[318]"></a>FS__fat_DeleteFileOrDir</STRONG> (ARM, 1136 bytes, Stack size 72 bytes, fat_open.o(i.FS__fat_DeleteFileOrDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = FS__fat_DeleteFileOrDir &rArr; FS__fat_dir_realsec &rArr;  FS__fat_find_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackLowSetEvt
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_write
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_dir_realsec
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strncmp
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strlen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fopen
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_MkRmDir
</UL>

<P><STRONG><a name="[31b]"></a>FS__fat_FAT_find_eof</STRONG> (ARM, 1004 bytes, Stack size 88 bytes, fat_misc.o(i.FS__fat_FAT_find_eof))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = FS__fat_FAT_find_eof &rArr; FS__lb_read_FAT_table &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_read_FAT_table
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_findpath
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_dir_size
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_readwholedir
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_SearchWholedir
</UL>

<P><STRONG><a name="[195]"></a>FS__fat_MkRmDir</STRONG> (ARM, 1532 bytes, Stack size 88 bytes, fat_dir.o(i.FS__fat_MkRmDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = FS__fat_MkRmDir &rArr; _FS_fat_create_directory &rArr; FSFATNewEntry &rArr; FSFATAllocateFreeCluster &rArr; FSFATOrderFreeCluster &rArr; FSFATFindFreeCluster &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_findpath
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATIncEntry
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_make_realname
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_find_dir
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_DeleteFileOrDir
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_directory
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_ioctl
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strlen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fat_misc.o(.constdata)
</UL>
<P><STRONG><a name="[312]"></a>FS__fat_ScanWholedir</STRONG> (ARM, 2056 bytes, Stack size 136 bytes, fat_dir.o(i.FS__fat_ScanWholedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = FS__fat_ScanWholedir &rArr; FSFATFreeFATLink &rArr; FSFATSetFSInfo &rArr; FS__lb_sin_write &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8_arm
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetFileType
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_write
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATLWScanClusterLink
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_read
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMalloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFree
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATGoForwardCluster
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCalculateSectorByCluster
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_memcpy
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ScanWholeDir
</UL>

<P><STRONG><a name="[314]"></a>FS__fat_SearchWholedir</STRONG> (ARM, 2216 bytes, Stack size 152 bytes, fat_dir.o(i.FS__fat_SearchWholedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = FS__fat_SearchWholedir &rArr; FS__fat_dir_realsec &rArr;  FS__fat_find_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8_arm
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetFileType
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCheckFileChannel
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_write
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_dir_realsec
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_FAT_find_eof
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_memcpy
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SearchWholeDir
</UL>

<P><STRONG><a name="[2ff]"></a>FS__fat_block_init</STRONG> (ARM, 44 bytes, Stack size 8 bytes, fat_misc.o(i.FS__fat_block_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = FS__fat_block_init &rArr; FS_X_OS_LockMem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockMem
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockMem
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Init
</UL>

<P><STRONG><a name="[325]"></a>FS__fat_checkunit</STRONG> (ARM, 368 bytes, Stack size 32 bytes, fat_misc.o(i.FS__fat_checkunit))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = FS__fat_checkunit &rArr; _FS_ReadBPB &rArr; _FS_CheckBPB &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_ReadBPB
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_status
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_ioctl
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_findpath
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ioctl
</UL>

<P><STRONG><a name="[193]"></a>FS__fat_closedir</STRONG> (ARM, 276 bytes, Stack size 16 bytes, fat_dir.o(i.FS__fat_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = FS__fat_closedir &rArr; FS__lb_ioctl &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_ioctl
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fat_misc.o(.constdata)
</UL>
<P><STRONG><a name="[319]"></a>FS__fat_dir_realsec</STRONG> (ARM, 448 bytes, Stack size 48 bytes, fat_open.o(i.FS__fat_dir_realsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = FS__fat_dir_realsec &rArr;  FS__fat_find_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_diskclust
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_find_dir
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_fat_rename
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_find_dir
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_DeleteFileOrDir
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_readdir
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_directory
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_readwholedir
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_SearchWholedir
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_find_file
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_file
</UL>

<P><STRONG><a name="[329]"></a>FS__fat_dir_size</STRONG> (ARM, 336 bytes, Stack size 32 bytes, fat_open.o(i.FS__fat_dir_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = FS__fat_dir_size &rArr; FS__fat_FAT_find_eof &rArr; FS__lb_read_FAT_table &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_FAT_find_eof
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_findpath
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_opendir
</UL>

<P><STRONG><a name="[328]"></a>FS__fat_diskclust</STRONG> (ARM, 1072 bytes, Stack size 80 bytes, fat_misc.o(i.FS__fat_diskclust))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = FS__fat_diskclust &rArr; FS__lb_read_FAT_table &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_read_FAT_table
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_dir_realsec
</UL>

<P><STRONG><a name="[18e]"></a>FS__fat_fclose</STRONG> (ARM, 792 bytes, Stack size 32 bytes, fat_out.o(i.FS__fat_fclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = FS__fat_fclose &rArr; FSFATFileEntryUpdate &rArr; FSFATCollectClusterList &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_status
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_ioctl
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileEntryUpdate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fat_misc.o(.constdata)
</UL>
<P><STRONG><a name="[320]"></a>FS__fat_find_dir</STRONG> (ARM, 732 bytes, Stack size 64 bytes, fat_open.o(i.FS__fat_find_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = FS__fat_find_dir &rArr; FS__fat_dir_realsec &rArr;  FS__fat_find_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_dir_realsec
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strncmp
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strlen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_findpath
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_dir_realsec
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_opendir
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_MkRmDir
</UL>

<P><STRONG><a name="[31d]"></a>FS__fat_findpath</STRONG> (ARM, 1064 bytes, Stack size 104 bytes, fat_open.o(i.FS__fat_findpath))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = FS__fat_findpath &rArr; FS__fat_find_dir &rArr; FS__fat_dir_realsec &rArr;  FS__fat_find_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_checkunit
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_make_realname
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_find_dir
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_dir_size
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_FAT_find_eof
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strncpy
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strchr
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_atoi
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_fat_rename
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fopen
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_opendir
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_MkRmDir
</UL>

<P><STRONG><a name="[18d]"></a>FS__fat_fopen</STRONG> (ARM, 1864 bytes, Stack size 128 bytes, fat_open.o(i.FS__fat_fopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = FS__fat_fopen &rArr; _FS_fat_create_file &rArr; FSFATNewEntry &rArr; FSFATAllocateFreeCluster &rArr; FSFATOrderFreeCluster &rArr; FSFATFindFreeCluster &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_findpath
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATIncEntry
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_make_realname
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_DeleteFileOrDir
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_ioctl
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATGoForwardCluster
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strcmp
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_find_file
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_file
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fat_misc.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>FS__fat_fread</STRONG> (ARM, 1852 bytes, Stack size 80 bytes, fat_in.o(i.FS__fat_fread))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = FS__fat_fread &rArr; FSFATGoForwardClusterList &rArr; FSFATCollectClusterList &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATGoForwardClusterList
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_status
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_read
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMalloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFree
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATGoForwardCluster
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCalculateSectorByCluster
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fat_misc.o(.constdata)
</UL>
<P><STRONG><a name="[2c8]"></a>FS__fat_free</STRONG> (ARM, 80 bytes, Stack size 8 bytes, fat_misc.o(i.FS__fat_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = FS__fat_free &rArr; FS_X_OS_LockMem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockMem
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockMem
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_fat_rename
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_diskclust
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATSetTheClusterLinkToDestination
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATSetFSInfo
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFindFreeCluster
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCollectClusterList
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATBookFreeCluster
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_ReadBPB
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_CheckBPB
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_format
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_MBR_format
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_find_dir
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_FAT_find_eof
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_DeleteFileOrDir
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATLWScanClusterLink
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_readdir
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_directory
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileEntryUpdate
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_find_file
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_file
</UL>

<P><STRONG><a name="[190]"></a>FS__fat_fwrite</STRONG> (ARM, 2064 bytes, Stack size 88 bytes, fat_out.o(i.FS__fat_fwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = FS__fat_fwrite &rArr; FSFATIncEntry &rArr; FSFATAllocateFreeCluster &rArr; FSFATOrderFreeCluster &rArr; FSFATFindFreeCluster &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATIncEntry
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_status
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_write
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_read
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMalloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFree
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATGoForwardCluster
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCalculateSectorByCluster
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fat_misc.o(.constdata)
</UL>
<P><STRONG><a name="[191]"></a>FS__fat_ioctl</STRONG> (ARM, 2440 bytes, Stack size 104 bytes, fat_ioct.o(i.FS__fat_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = FS__fat_ioctl &rArr; FS__fat_checkunit &rArr; _FS_ReadBPB &rArr; _FS_CheckBPB &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_checkunit
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_format
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_MBR_format
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_GetTotalFree
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_write
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_status
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_ioctl
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fat_misc.o(.constdata)
</UL>
<P><STRONG><a name="[31f]"></a>FS__fat_make_realname</STRONG> (ARM, 256 bytes, Stack size 24 bytes, fat_open.o(i.FS__fat_make_realname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FS__fat_make_realname
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_toupper
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_fat_rename
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_findpath
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fopen
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_opendir
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_MkRmDir
</UL>

<P><STRONG><a name="[2c6]"></a>FS__fat_malloc</STRONG> (ARM, 100 bytes, Stack size 8 bytes, fat_misc.o(i.FS__fat_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = FS__fat_malloc &rArr; FS_X_OS_LockMem &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockMem
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockMem
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_fat_rename
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_diskclust
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATSetTheClusterLinkToDestination
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATSetFSInfo
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFindFreeCluster
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCollectClusterList
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATBookFreeCluster
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_ReadBPB
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_CheckBPB
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_format
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_MBR_format
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_find_dir
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_FAT_find_eof
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_DeleteFileOrDir
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATLWScanClusterLink
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_readdir
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_directory
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileEntryUpdate
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_find_file
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_file
</UL>

<P><STRONG><a name="[192]"></a>FS__fat_opendir</STRONG> (ARM, 888 bytes, Stack size 64 bytes, fat_dir.o(i.FS__fat_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = FS__fat_opendir &rArr; FS__fat_findpath &rArr; FS__fat_find_dir &rArr; FS__fat_dir_realsec &rArr;  FS__fat_find_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_findpath
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_make_realname
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_find_dir
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_dir_size
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_ioctl
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strlen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fat_misc.o(.constdata)
</UL>
<P><STRONG><a name="[194]"></a>FS__fat_readdir</STRONG> (ARM, 852 bytes, Stack size 48 bytes, fat_dir.o(i.FS__fat_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = FS__fat_readdir &rArr; FS__fat_dir_realsec &rArr;  FS__fat_find_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_dir_realsec
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_memcpy
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fat_misc.o(.constdata)
</UL>
<P><STRONG><a name="[30f]"></a>FS__fat_readwholedir</STRONG> (ARM, 1752 bytes, Stack size 112 bytes, fat_dir.o(i.FS__fat_readwholedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = FS__fat_readwholedir &rArr; FS__fat_dir_realsec &rArr;  FS__fat_find_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_write
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_dir_realsec
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_FAT_find_eof
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_memcpy
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadWholeDir
</UL>

<P><STRONG><a name="[309]"></a>FS__find_fsl</STRONG> (ARM, 148 bytes, Stack size 40 bytes, api_misc.o(i.FS__find_fsl))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FS__find_fsl &rArr; FS__CLIB_strncmp &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strncmp
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strlen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_OpenDir
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_MkDir
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfRename
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCacheInit
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCacheClear
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCacheClean
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupCacheClean
</UL>

<P><STRONG><a name="[2e5]"></a>FS__lb_SD_RDretry</STRONG> (ARM, 324 bytes, Stack size 40 bytes, lb_misc.o(i.FS__lb_SD_RDretry))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcErrorResultFilter
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageSel
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageInserted
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMount
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_LB_GetDriverIndex
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_read
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_read
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncSinReadCache
</UL>

<P><STRONG><a name="[2e0]"></a>FS__lb_SD_WRretry</STRONG> (ARM, 384 bytes, Stack size 56 bytes, lb_misc.o(i.FS__lb_SD_WRretry))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcErrorResultFilter
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageSel
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageInserted
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMount
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_LB_GetDriverIndex
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_write
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_write
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncSinWriteCache
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncAllCache
</UL>

<P><STRONG><a name="[31e]"></a>FS__lb_ioctl</STRONG> (ARM, 388 bytes, Stack size 32 bytes, lb_misc.o(i.FS__lb_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = FS__lb_ioctl &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_LB_GetDriverIndex
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockDeviceOp
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockDeviceOp
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncAllCache
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBCacheInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fopen
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_checkunit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ioctl
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_opendir
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_closedir
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_MkRmDir
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fclose
</UL>

<P><STRONG><a name="[2bf]"></a>FS__lb_mul_read</STRONG> (ARM, 444 bytes, Stack size 40 bytes, lb_misc.o(i.FS__lb_mul_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = FS__lb_mul_read &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_LB_GetDriverIndex
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockDeviceOp
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockDeviceOp
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_RDretry
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncMulReadCache
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFindFreeCluster
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFAT32ScanFreeCluster
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_GetTotalFree
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fread
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileEntryUpdate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fwrite
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ScanWholedir
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileDelete
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATDirDelete
</UL>

<P><STRONG><a name="[2cc]"></a>FS__lb_mul_write</STRONG> (ARM, 864 bytes, Stack size 48 bytes, lb_misc.o(i.FS__lb_mul_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = FS__lb_mul_write &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageSel
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMount
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_LB_GetDriverIndex
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockDeviceOp
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockDeviceOp
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_WRretry
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncMulWriteCache
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCleanCluster
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_format
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fwrite
</UL>

<P><STRONG><a name="[335]"></a>FS__lb_read</STRONG> (ARM, 464 bytes, Stack size 32 bytes, lb_misc.o(i.FS__lb_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_LB_GetDriverIndex
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockDeviceOp
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockDeviceOp
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_RDretry
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncSinReadCache
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_read_FAT_table
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
</UL>

<P><STRONG><a name="[31c]"></a>FS__lb_read_FAT_table</STRONG> (ARM, 332 bytes, Stack size 32 bytes, lb_misc.o(i.FS__lb_read_FAT_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = FS__lb_read_FAT_table &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_write
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_read
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_diskclust
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_FAT_find_eof
</UL>

<P><STRONG><a name="[2c9]"></a>FS__lb_sin_read</STRONG> (ARM, 4 bytes, Stack size 0 bytes, lb_misc.o(i.FS__lb_sin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_read
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_fat_rename
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATSetTheClusterLinkToDestination
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATSetFSInfo
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFindFreeCluster
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATCollectClusterList
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATBookFreeCluster
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_ReadBPB
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_CheckBPB
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ioctl
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_GetTotalFree
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_find_dir
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_DeleteFileOrDir
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATLWScanClusterLink
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_readdir
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_directory
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileEntryUpdate
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_readwholedir
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_SearchWholedir
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_find_file
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_file
</UL>

<P><STRONG><a name="[2c7]"></a>FS__lb_sin_write</STRONG> (ARM, 4 bytes, Stack size 0 bytes, lb_misc.o(i.FS__lb_sin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = FS__lb_sin_write &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_write
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_fat_rename
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATSetTheClusterLinkToDestination
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATSetFSInfo
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATBookFreeCluster
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_format
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_MBR_format
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ioctl
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_DeleteFileOrDir
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_directory
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileEntryUpdate
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_readwholedir
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_SearchWholedir
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ScanWholedir
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileDelete
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATDirDelete
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_file
</UL>

<P><STRONG><a name="[326]"></a>FS__lb_status</STRONG> (ARM, 368 bytes, Stack size 24 bytes, lb_misc.o(i.FS__lb_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = FS__lb_status &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_LB_GetDriverIndex
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockDeviceOp
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockDeviceOp
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBCacheInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_checkunit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ioctl
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fread
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fwrite
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fclose
</UL>

<P><STRONG><a name="[336]"></a>FS__lb_write</STRONG> (ARM, 388 bytes, Stack size 32 bytes, lb_misc.o(i.FS__lb_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_LB_GetDriverIndex
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockDeviceOp
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockDeviceOp
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_WRretry
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSLBSyncSinWriteCache
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_read_FAT_table
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_write
</UL>

<P><STRONG><a name="[337]"></a>FS_fat_rename</STRONG> (ARM, 960 bytes, Stack size 128 bytes, fat_open.o(i.FS_fat_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = FS_fat_rename &rArr; FS__fat_findpath &rArr; FS__fat_find_dir &rArr; FS__fat_dir_realsec &rArr;  FS__fat_find_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_findpath
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_write
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_make_realname
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_dir_realsec
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strncmp
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strlen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfRename
</UL>

<P><STRONG><a name="[338]"></a>FTMAC110_main</STRONG> (ARM, 196 bytes, Stack size 16 bytes, ftmac110.o(i.FTMAC110_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = FTMAC110_main &rArr; ftmac110_init &rArr; alloc_txdes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSReset
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmac110_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[142]"></a>Fd_Compare</STRONG> (ARM, 16 bytes, Stack size 0 bytes, tutk_taskmng.o(i.Fd_Compare))
<BR>[Address Reference Count : 1]<UL><LI> tutk_taskmng.o(i.tutk_SockMng_Remove)
</UL>
<P><STRONG><a name="[141]"></a>Fd_IsDeleted</STRONG> (ARM, 28 bytes, Stack size 0 bytes, tutk_taskmng.o(i.Fd_IsDeleted))
<BR>[Address Reference Count : 1]<UL><LI> tutk_taskmng.o(i.tutk_SockMng_Purge)
</UL>
<P><STRONG><a name="[33e]"></a>FindPreIFrameIndex</STRONG> (ARM, 172 bytes, Stack size 16 bytes, tutk_av_sample.o(i.FindPreIFrameIndex), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[33f]"></a>FirstPartOfSliceHeader</STRONG> (ARM, 140 bytes, Stack size 8 bytes, header.o(i.FirstPartOfSliceHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = FirstPartOfSliceHeader &rArr; decode_ue_v &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ue_v
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_ParseHeader
</UL>

<P><STRONG><a name="[341]"></a>GT9271_PrintInfo</STRONG> (ARM, 400 bytes, Stack size 32 bytes, i2c.o(i.GT9271_PrintInfo), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite16addr_Byte
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead16addr_Byte
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[344]"></a>GT9271_getPosition</STRONG> (ARM, 252 bytes, Stack size 32 bytes, i2c.o(i.GT9271_getPosition), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite16addr_Byte
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead16addr_Byte
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[345]"></a>GenerateParameterSets_SW</STRONG> (ARM, 292 bytes, Stack size 96 bytes, parset.o(i.GenerateParameterSets_SW))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GenerateParameterSets_SW &rArr; GenerateSeq_parameter_set_rbsp &rArr; encode_se_v &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateSequenceParameterSet
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateSeq_parameter_set_rbsp
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePic_parameter_set_rbsp
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBSPtoNALU
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_CompressOneFrame
</UL>

<P><STRONG><a name="[349]"></a>GeneratePic_parameter_set_rbsp</STRONG> (ARM, 232 bytes, Stack size 16 bytes, parset.o(i.GeneratePic_parameter_set_rbsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GeneratePic_parameter_set_rbsp &rArr; encode_se_v &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ue_v
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_u_v
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_u_1
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_se_v
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SODBtoRBSP
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateParameterSets_SW
</UL>

<P><STRONG><a name="[347]"></a>GenerateSeq_parameter_set_rbsp</STRONG> (ARM, 496 bytes, Stack size 16 bytes, parset.o(i.GenerateSeq_parameter_set_rbsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GenerateSeq_parameter_set_rbsp &rArr; encode_se_v &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ue_v
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_u_v
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_u_1
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_se_v
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SODBtoRBSP
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateParameterSets_SW
</UL>

<P><STRONG><a name="[346]"></a>GenerateSequenceParameterSet</STRONG> (ARM, 144 bytes, Stack size 0 bytes, parset.o(i.GenerateSequenceParameterSet))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateParameterSets_SW
</UL>

<P><STRONG><a name="[34f]"></a>GetAnnexbNALU</STRONG> (ARM, 84 bytes, Stack size 16 bytes, nalu.o(i.GetAnnexbNALU))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GetAnnexbNALU &rArr; check_parser_idle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_parser_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_ParseHeader
</UL>

<P><STRONG><a name="[3ba]"></a>GetNetworkInfo</STRONG> (ARM, 260 bytes, Stack size 4 bytes, lwipentry.o(i.GetNetworkInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetNetworkInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIP
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawNetworkInfo
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIPNetworkTest
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[362]"></a>GetOpCodeSupportCurrent</STRONG> (ARM, 240 bytes, Stack size 8 bytes, avability.o(i.GetOpCodeSupportCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GetOpCodeSupportCurrent &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initAVInfo
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
</UL>

<P><STRONG><a name="[363]"></a>GetOpCodeSupportVer1</STRONG> (ARM, 196 bytes, Stack size 8 bytes, avability.o(i.GetOpCodeSupportVer1))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GetOpCodeSupportVer1 &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initAVInfo
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVCtrl
</UL>

<P><STRONG><a name="[364]"></a>GetQP</STRONG> (ARM, 240 bytes, Stack size 8 bytes, h264.o(i.GetQP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetQP
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_DecSliceType
</UL>

<P><STRONG><a name="[366]"></a>GetTotalBlockCount</STRONG> (ARM, 116 bytes, Stack size 16 bytes, storage.o(i.GetTotalBlockCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetTotalBlockCount &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_ReadBPB
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_CheckBPB
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_format
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_MBR_format
</UL>

<P><STRONG><a name="[367]"></a>GetVideoDuration</STRONG> (ARM, 328 bytes, Stack size 16 bytes, asf.o(i.GetVideoDuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = GetVideoDuration &rArr; dcfClose &rArr; FS_LB_Cache_Clean &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfRead
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOpen
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[36c]"></a>Get_SD2068_RTC</STRONG> (ARM, 288 bytes, Stack size 32 bytes, i2c.o(i.Get_SD2068_RTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Get_SD2068_RTC &rArr; i2cRead_SD2068 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_SD2068
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_GMT_Time
</UL>

<P><STRONG><a name="[79f]"></a>Get_network_status</STRONG> (ARM, 12 bytes, Stack size 0 bytes, tutk_av_sample.o(i.Get_network_status))
<BR><BR>[Called By]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRemoteOn
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNetworkLinkUp
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAllPreviewIcon
</UL>

<P><STRONG><a name="[36e]"></a>H264Dec_DecodeOneFrame</STRONG> (ARM, 1336 bytes, Stack size 48 bytes, h264.o(i.H264Dec_DecodeOneFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = H264Dec_DecodeOneFrame &rArr; H264Dec_InitBuf &rArr; isCap1920x1080I &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_InitBuf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_DecompressOneFrame
</UL>

<P><STRONG><a name="[ba]"></a>H264Dec_DecompressOneFrame</STRONG> (ARM, 424 bytes, Stack size 24 bytes, h264.o(i.H264Dec_DecompressOneFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = H264Dec_DecompressOneFrame &rArr; H264Dec_DecodeOneFrame &rArr; H264Dec_InitBuf &rArr; isCap1920x1080I &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVColorbar_onoff
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMPEG_enable
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMPEG_disable
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_ParseHeader
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_DecodeOneFrame
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videocodec_common.o(i.VideoCodecInit)
</UL>
<P><STRONG><a name="[36f]"></a>H264Dec_InitBuf</STRONG> (ARM, 724 bytes, Stack size 40 bytes, h264.o(i.H264Dec_InitBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = H264Dec_InitBuf &rArr; isCap1920x1080I &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCap1920x1080I
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_DecodeOneFrame
</UL>

<P><STRONG><a name="[372]"></a>H264Dec_ParseHeader</STRONG> (ARM, 296 bytes, Stack size 40 bytes, h264.o(i.H264Dec_ParseHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = H264Dec_ParseHeader &rArr; RestOfSliceHeader &rArr; decode_ue_v &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSPS
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPPS
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAnnexbNALU
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestOfSliceHeader
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstPartOfSliceHeader
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Decode
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264DecodeLastFrame
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_DecompressOneFrame
</UL>

<P><STRONG><a name="[378]"></a>H264DecodeLastFrame</STRONG> (ARM, 592 bytes, Stack size 88 bytes, h264.o(i.H264DecodeLastFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = H264DecodeLastFrame &rArr; Idu_ClearBuf &rArr; memset_hw_Word &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idu_ClearBuf
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMPEG_enable
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMPEG_disable
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Decoding1Frame
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_ParseHeader
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264_Decode_One_I_frame
</UL>

<P><STRONG><a name="[b9]"></a>H264Enc_CompressOneFrame</STRONG> (ARM, 976 bytes, Stack size 48 bytes, h264.o(i.H264Enc_CompressOneFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = H264Enc_CompressOneFrame &rArr; GenerateParameterSets_SW &rArr; GenerateSeq_parameter_set_rbsp &rArr; encode_se_v &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateParameterSets_SW
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMPEG_enable
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMPEG_disable
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_InitBuf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videocodec_common.o(i.VideoCodecInit)
</UL>
<P><STRONG><a name="[b7]"></a>H264Enc_DecSliceType</STRONG> (ARM, 228 bytes, Stack size 32 bytes, h264.o(i.H264Enc_DecSliceType))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = H264Enc_DecSliceType &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQP
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videocodec_common.o(i.VideoCodecInit)
</UL>
<P><STRONG><a name="[47a]"></a>H264Enc_GenerateParameterSets_HW</STRONG> (ARM, 96 bytes, Stack size 0 bytes, h264.o(i.H264Enc_GenerateParameterSets_HW))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
</UL>

<P><STRONG><a name="[543]"></a>H264Enc_Init</STRONG> (ARM, 28 bytes, Stack size 0 bytes, h264.o(i.H264Enc_Init))
<BR><BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCodecInit
</UL>

<P><STRONG><a name="[37b]"></a>H264Enc_InitBuf</STRONG> (ARM, 332 bytes, Stack size 8 bytes, h264.o(i.H264Enc_InitBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = H264Enc_InitBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_CompressOneFrame
</UL>

<P><STRONG><a name="[479]"></a>H264Enc_InitCfg</STRONG> (ARM, 88 bytes, Stack size 0 bytes, h264.o(i.H264Enc_InitCfg))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
</UL>

<P><STRONG><a name="[47d]"></a>H264Enc_SetModeDecisionAlgorithm</STRONG> (ARM, 204 bytes, Stack size 8 bytes, h264.o(i.H264Enc_SetModeDecisionAlgorithm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = H264Enc_SetModeDecisionAlgorithm
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
</UL>

<P><STRONG><a name="[47b]"></a>H264Enc_SetNALSliceHeader</STRONG> (ARM, 168 bytes, Stack size 0 bytes, h264.o(i.H264Enc_SetNALSliceHeader))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
</UL>

<P><STRONG><a name="[b8]"></a>H264Enc_SetResolution</STRONG> (ARM, 272 bytes, Stack size 8 bytes, h264.o(i.H264Enc_SetResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = H264Enc_SetResolution &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Encode_I_Header
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264_Decode_One_I_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videocodec_common.o(i.VideoCodecInit)
</UL>
<P><STRONG><a name="[37c]"></a>H264PutDummyHeader</STRONG> (ARM, 256 bytes, Stack size 8 bytes, h264.o(i.H264PutDummyHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = H264PutDummyHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDummyVidePayload
</UL>

<P><STRONG><a name="[37d]"></a>H264_Decode_One_I_frame</STRONG> (ARM, 808 bytes, Stack size 384 bytes, h264.o(i.H264_Decode_One_I_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = H264_Decode_One_I_frame &rArr; H264DecodeLastFrame &rArr; Idu_ClearBuf &rArr; memset_hw_Word &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Decode_I_Header
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_SetResolution
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264DecodeLastFrame
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCameraBatteryLevel
</UL>

<P><STRONG><a name="[37f]"></a>Handle_IOCTRL_Cmd</STRONG> (ARM, 18680 bytes, Stack size 256 bytes, tutk_av_sample.o(i.Handle_IOCTRL_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 5280 + Unknown Stack Size
<LI>Call Chain = Handle_IOCTRL_Cmd &rArr; Remoteplayback_busy &rArr; SendVideoFrameData &rArr; avSendFrameData &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoDuration
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_AudioRetONOFF_APP
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuResetBatCamLiveMaxTime
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetRfLightStatus
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXsleepTime
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuCamSleepCmd
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackMode
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetEvt
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelCheckRecordChannel
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_TimeZone
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSet_TVOut
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSet_Schedule
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSet_RecMode
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSet_Pair
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSet_Overwrite
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSet_MotionEnable
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSet_Brightness
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSet_AlarmVal
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSet_AlarmEnable
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetRecordMode
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetFrequency
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGet_TVOut
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGet_Seccion
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGet_Schedule
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGet_Resoultion
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGet_RecMode
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGet_Overwrite
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGet_MotionEnable
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGet_Brightness
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGet_AlarmVal
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGet_AlarmEnable
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetRecordMode
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetFrequency
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetAlarmStatusAPP
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetAlarmOnOffAPP
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGetSuptLightAPP
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGetSuptAlarmAPP
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGetMotionStatusAPP
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGetLightStatusAPP
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGetLightOnOffAPP
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGetAlarmStatusAPP
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGetAlarmOnOffAPP
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckLightManualSwitchStatus
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfLightTimerRxToTx
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PPassword
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PImageLevel
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVOSDEnable
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetBTCWakeStatus
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetBTCTimer
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetBTCWakeTime
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetworkInfo
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearP2PConnection
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSyncLightTimer2LightInterval
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetMotionStatusAPP
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetLightStatusAPP
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetLightOnOffAPP
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrlWithTimeout
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafeDelP2pPlayFileTask
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStop
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServSetResendSize
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrl
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvIOCtrl
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_TimeZone
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Get_Free_Channel
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Close
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_recorded_filelist
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_P2P_Session
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remoteplayback_busy
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kill_Task_Speaker
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Session_Status
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
</UL>

<P><STRONG><a name="[3c2]"></a>IDU_Init</STRONG> (ARM, 192 bytes, Stack size 8 bytes, idu.o(i.IDU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IDU_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTurnOnTVDAC
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetOutputMode
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_IDUInit
</UL>

<P><STRONG><a name="[3c4]"></a>IDU_TVLayer_Stride</STRONG> (ARM, 200 bytes, Stack size 72 bytes, idu.o(i.IDU_TVLayer_Stride))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IDU_TVLayer_Stride
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetStartMovie
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphGetMenuData
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
</UL>

<P><STRONG><a name="[842]"></a>IIS_SwitchPanel2HDMI</STRONG> (ARM, 80 bytes, Stack size 0 bytes, iis.o(i.IIS_SwitchPanel2HDMI))
<BR><BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetOutputMode
</UL>

<P><STRONG><a name="[838]"></a>IIS_WM8940_reset</STRONG> (ARM, 4 bytes, Stack size 0 bytes, i2c.o(i.IIS_WM8940_reset))
<BR><BR>[Called By]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
</UL>

<P><STRONG><a name="[3c5]"></a>IOTC_Check_Session_Status</STRONG> (ARM, 160 bytes, Stack size 16 bytes, iotcapis.o(i.IOTC_Check_Session_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = IOTC_Check_Session_Status &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendFrameData
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvIOCtrl
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Set_Partial_Encryption
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Get_Free_Channel
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check_Ex
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Channel_ON
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Channel_OFF
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Get_Remote_ProtocolVersion
</UL>

<P><STRONG><a name="[3c6]"></a>IOTC_DeInitialize</STRONG> (ARM, 1124 bytes, Stack size 32 bytes, iotcapis.o(i.IOTC_DeInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = IOTC_DeInitialize &rArr; tutk_SockTaskMng_DeInit &rArr; TCP_RunAction &rArr; TCP_PurgeFd &rArr;  TCP_RunAction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexDelete
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseSession
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Delete
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_DeInit
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Feature_Bitmap_Release
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskCleanAllNodes
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareUpdateFlow
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetPrepare
</UL>

<P><STRONG><a name="[3cd]"></a>IOTC_Device_Login</STRONG> (ARM, 1372 bytes, Stack size 848 bytes, iotcapis.o(i.IOTC_Device_Login))
<BR><BR>[Stack]<UL><LI>Max Depth = 4232 + Unknown Stack Size
<LI>Call Chain = IOTC_Device_Login &rArr; _IOTC_Check_Server &rArr; _IOTC_SendHello1 &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_VPGServerList
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_DeviceInfo
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseSession
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_GetLocalIPAddr
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSessionInfo
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Query_VPGServerList
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_OpenUDP_P2PSocket
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_OpenUDP_LANSocket
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Delete
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Create
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_customize_master
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_resolve_master_all
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Check_Server
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Login
</UL>

<P><STRONG><a name="[3cc]"></a>IOTC_Feature_Bitmap_Release</STRONG> (ARM, 100 bytes, Stack size 24 bytes, iotcfeaturecontroller.o(i.IOTC_Feature_Bitmap_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = IOTC_Feature_Bitmap_Release &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_DeInitialize
</UL>

<P><STRONG><a name="[2a4]"></a>IOTC_Get_Login_Info</STRONG> (ARM, 36 bytes, Stack size 0 bytes, iotcapis.o(i.IOTC_Get_Login_Info))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PSendEvent
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_P2P_info
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
</UL>

<P><STRONG><a name="[512]"></a>IOTC_Get_Login_Info_ByCallBackFn</STRONG> (ARM, 16 bytes, Stack size 0 bytes, iotcapis.o(i.IOTC_Get_Login_Info_ByCallBackFn))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
</UL>

<P><STRONG><a name="[3d7]"></a>IOTC_Get_Remote_ProtocolVersion</STRONG> (ARM, 80 bytes, Stack size 16 bytes, iotcapis.o(i.IOTC_Get_Remote_ProtocolVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = IOTC_Get_Remote_ProtocolVersion &rArr; IOTC_Check_Session_Status &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Check_Session_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVCtrl
</UL>

<P><STRONG><a name="[50f]"></a>IOTC_Get_Version</STRONG> (ARM, 16 bytes, Stack size 0 bytes, iotcapis.o(i.IOTC_Get_Version))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
</UL>

<P><STRONG><a name="[3f9]"></a>IOTC_Initialize2</STRONG> (ARM, 1332 bytes, Stack size 40 bytes, iotcapis.o(i.IOTC_Initialize2))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = IOTC_Initialize2 &rArr; tutk_TaskMng_Create &rArr; tutk_TaskMng_Purge &rArr; tutk_bst_walk_purge &rArr;  tutk_bst_walk_purge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_srand
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_rand
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Create
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_Init
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_check
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnManager_create
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLocalNetworkInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
</UL>

<P><STRONG><a name="[5ca]"></a>IOTC_IsLiteMode</STRONG> (ARM, 24 bytes, Stack size 0 bytes, iotcapis.o(i.IOTC_IsLiteMode))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrl
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendFrameData
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvIOCtrl
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvAudioData
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avInitialize
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
</UL>

<P><STRONG><a name="[401]"></a>IOTC_Listen</STRONG> (ARM, 384 bytes, Stack size 32 bytes, iotcapis.o(i.IOTC_Listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = IOTC_Listen &rArr; __IsExceedSession &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IsExceedSession
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetNotYetReturnConnectedSession
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Listen
</UL>

<P><STRONG><a name="[403]"></a>IOTC_Mem_Init</STRONG> (ARM, 40 bytes, Stack size 8 bytes, iotcapis.o(i.IOTC_Mem_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = IOTC_Mem_Init &rArr; monopool_init &rArr; OS_MutexInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
</UL>

<P><STRONG><a name="[286]"></a>IOTC_SendErrorCode</STRONG> (ARM, 80 bytes, Stack size 24 bytes, iotcapis.o(i.IOTC_SendErrorCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 3384 + Unknown Stack Size
<LI>Call Chain = IOTC_SendErrorCode &rArr; SendConnectErrorCode_inner &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectErrorCode_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AV_SendErrorCode
</UL>

<P><STRONG><a name="[408]"></a>IOTC_Session_Channel_OFF</STRONG> (ARM, 284 bytes, Stack size 32 bytes, iotcapis.o(i.IOTC_Session_Channel_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = IOTC_Session_Channel_OFF &rArr; IOTC_Check_Session_Status &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Check_Session_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStop
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStop
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Get_Free_Channel
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avIOTCSesstionCloseCB
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
</UL>

<P><STRONG><a name="[409]"></a>IOTC_Session_Channel_ON</STRONG> (ARM, 148 bytes, Stack size 24 bytes, iotcapis.o(i.IOTC_Session_Channel_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = IOTC_Session_Channel_ON &rArr; IOTC_Check_Session_Status &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Check_Session_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
</UL>

<P><STRONG><a name="[283]"></a>IOTC_Session_Check</STRONG> (ARM, 188 bytes, Stack size 176 bytes, iotcapis.o(i.IOTC_Session_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = IOTC_Session_Check &rArr; IOTC_Session_Check_Ex &rArr; iotc_netaddr_get_content &rArr; tutk_platform_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check_Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowOnlineUserNum
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_s_chk
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Listen
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Session_Status
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVServerStart
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculatSendPacketInterval
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVCtrl
</UL>

<P><STRONG><a name="[40a]"></a>IOTC_Session_Check_Ex</STRONG> (ARM, 728 bytes, Stack size 168 bytes, iotcapis.o(i.IOTC_Session_Check_Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = IOTC_Session_Check_Ex &rArr; iotc_netaddr_get_content &rArr; tutk_platform_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_DeviceInfo
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_snprintf
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_sockaddr_to_ip_string
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_get_content
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_convert_to_IPv4_addr
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSendPath
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Check_Session_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check
</UL>

<P><STRONG><a name="[282]"></a>IOTC_Session_Close</STRONG> (ARM, 468 bytes, Stack size 64 bytes, iotcapis.o(i.IOTC_Session_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 3408 + Unknown Stack Size
<LI>Call Chain = IOTC_Session_Close &rArr; _IOTC_Send_RLYClose &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseSession
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_RLYClose
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_P2PClose
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSendPath
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskCleanAllNodes
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_p2pdisconnected
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Listen
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVServerStart
</UL>

<P><STRONG><a name="[3a6]"></a>IOTC_Session_Get_Free_Channel</STRONG> (ARM, 264 bytes, Stack size 24 bytes, iotcapis.o(i.IOTC_Session_Get_Free_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = IOTC_Session_Get_Free_Channel &rArr; IOTC_Session_Channel_OFF &rArr; IOTC_Check_Session_Status &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Channel_OFF
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Check_Session_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[291]"></a>IOTC_Session_Lock</STRONG> (ARM, 8 bytes, Stack size 0 bytes, iotcapis.o(i.IOTC_Session_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = IOTC_Session_Lock &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServResetBuffer
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendFrameData
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvAudioData
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckAudioBuf
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvSrvRecvIotcData
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvClientRecvIotcData
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unInitAVInfo
</UL>

<P><STRONG><a name="[410]"></a>IOTC_Session_Set_Channel_RcvCb</STRONG> (ARM, 104 bytes, Stack size 24 bytes, iotcapis.o(i.IOTC_Session_Set_Channel_RcvCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = IOTC_Session_Set_Channel_RcvCb &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStop
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStop
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avIOTCSesstionCloseCB
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
</UL>

<P><STRONG><a name="[411]"></a>IOTC_Session_Set_CloseCb</STRONG> (ARM, 96 bytes, Stack size 24 bytes, iotcapis.o(i.IOTC_Session_Set_CloseCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = IOTC_Session_Set_CloseCb &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStop
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStop
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avIOTCSesstionCloseCB
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
</UL>

<P><STRONG><a name="[27f]"></a>IOTC_Session_Write</STRONG> (ARM, 740 bytes, Stack size 1656 bytes, iotcapis.o(i.IOTC_Session_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 3472 + Unknown Stack Size
<LI>Call Chain = IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_used
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_get_content
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSendPath
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Check_Session_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServResetBuffer
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrl
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendFrameData
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvAudioData
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendVideoDataLost
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendAudioDataResend
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVCtrl
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Request_Resend
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVInfo_ResendReq
</UL>

<P><STRONG><a name="[293]"></a>IOTC_Session_unLock</STRONG> (ARM, 8 bytes, Stack size 0 bytes, iotcapis.o(i.IOTC_Session_unLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = IOTC_Session_unLock &rArr; tutk_platform_mutex_unlock &rArr; OS_MutexUnLock &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServResetBuffer
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendFrameData
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvAudioData
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckAudioBuf
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvSrvRecvIotcData
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvClientRecvIotcData
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unInitAVInfo
</UL>

<P><STRONG><a name="[511]"></a>IOTC_Set_Connection_Option</STRONG> (ARM, 100 bytes, Stack size 0 bytes, iotcapis.o(i.IOTC_Set_Connection_Option))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
</UL>

<P><STRONG><a name="[510]"></a>IOTC_Set_Max_Session_Number</STRONG> (ARM, 16 bytes, Stack size 0 bytes, iotcapis.o(i.IOTC_Set_Max_Session_Number))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
</UL>

<P><STRONG><a name="[413]"></a>IOTC_Set_Partial_Encryption</STRONG> (ARM, 152 bytes, Stack size 24 bytes, iotcapis.o(i.IOTC_Set_Partial_Encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = IOTC_Set_Partial_Encryption &rArr; IOTC_Check_Session_Status &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Check_Session_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Listen
</UL>

<P><STRONG><a name="[514]"></a>IOTC_Setup_Session_Alive_Timeout</STRONG> (ARM, 20 bytes, Stack size 0 bytes, iotcapis.o(i.IOTC_Setup_Session_Alive_Timeout))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
</UL>

<P><STRONG><a name="[414]"></a>IOTC_Update_Server_ProtoVer</STRONG> (ARM, 200 bytes, Stack size 48 bytes, iotcapis.o(i.IOTC_Update_Server_ProtoVer))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = IOTC_Update_Server_ProtoVer &rArr; iotc_netaddr_put_content &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_put_content
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[922]"></a>IRCtrEnable</STRONG> (ARM, 32 bytes, Stack size 0 bytes, ir_ppm.o(i.IRCtrEnable))
<BR><BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIRTest
</UL>

<P><STRONG><a name="[920]"></a>IRCtrReset</STRONG> (ARM, 32 bytes, Stack size 0 bytes, ir_ppm.o(i.IRCtrReset))
<BR><BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIRTest
</UL>

<P><STRONG><a name="[91f]"></a>IREnableInt</STRONG> (ARM, 32 bytes, Stack size 0 bytes, ir_ppm.o(i.IREnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIRTest
</UL>

<P><STRONG><a name="[923]"></a>IRGetRecCustomCode</STRONG> (ARM, 28 bytes, Stack size 0 bytes, ir_ppm.o(i.IRGetRecCustomCode))
<BR><BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIRTest
</UL>

<P><STRONG><a name="[fc]"></a>IRIntHandler</STRONG> (ARM, 60 bytes, Stack size 0 bytes, ir_ppm.o(i.IRIntHandler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[924]"></a>IRSetCustomCode</STRONG> (ARM, 48 bytes, Stack size 0 bytes, ir_ppm.o(i.IRSetCustomCode))
<BR><BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIRTest
</UL>

<P><STRONG><a name="[921]"></a>IRSetDiv</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ir_ppm.o(i.IRSetDiv))
<BR><BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIRTest
</UL>

<P><STRONG><a name="[83b]"></a>IduDispWinSel</STRONG> (ARM, 52 bytes, Stack size 0 bytes, idu.o(i.IduDispWinSel))
<BR><BR>[Called By]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
</UL>

<P><STRONG><a name="[8e9]"></a>IduVideoEnable</STRONG> (ARM, 4 bytes, Stack size 0 bytes, idu.o(i.IduVideoEnable))
<BR><BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
</UL>

<P><STRONG><a name="[415]"></a>IduVideo_ClearBuf</STRONG> (ARM, 348 bytes, Stack size 16 bytes, idu.o(i.IduVideo_ClearBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = IduVideo_ClearBuf &rArr; memset_hw_Word &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw_Word
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackMoveForward
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackMoveBackward
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDeleteDir
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDeleteAll
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDelete
</UL>

<P><STRONG><a name="[417]"></a>IduVideo_ClearPKBuf</STRONG> (ARM, 216 bytes, Stack size 16 bytes, idu.o(i.IduVideo_ClearPKBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = IduVideo_ClearPKBuf &rArr; memset_hw_Word &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw_Word
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetStartMovie
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupMode
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlayback_Delete_File
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDevInsertedUpgradeEvt
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPairInMenu
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawConfirmSelect
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawUpgradeFW
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSystemReboot
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRunFormat
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawRestoreDefaltSettings
</UL>

<P><STRONG><a name="[37a]"></a>Idu_ClearBuf</STRONG> (ARM, 228 bytes, Stack size 32 bytes, idu.o(i.Idu_ClearBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = Idu_ClearBuf &rArr; memset_hw_Word &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw_Word
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckP2PMode
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeChannel
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetOutputMode
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPair
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNoSignal
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264DecodeLastFrame
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[418]"></a>InitA7196</STRONG> (ARM, 148 bytes, Stack size 8 bytes, amic7196.o(i.InitA7196))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = InitA7196 &rArr; initRF_B2 &rArr; A7196_Cal_B2 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF_B2
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF_B1
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B2
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B1
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteReg_B2
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteReg_B1
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfiuInit
</UL>

<P><STRONG><a name="[41b]"></a>InitSetParse</STRONG> (ARM, 348 bytes, Stack size 16 bytes, ui.o(i.InitSetParse), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetFileDoCommand
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[41d]"></a>InitSetProgram</STRONG> (ARM, 692 bytes, Stack size 32 bytes, ui.o(i.InitSetProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 4056 + Unknown Stack Size
<LI>Call Chain = InitSetProgram &rArr; uiSetFileDoCommand &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfRead
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOpen
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetFileInitFinish
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetFileDoCommand
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfInit
</UL>

<P><STRONG><a name="[41f]"></a>InitVideoClipOption</STRONG> (ARM, 284 bytes, Stack size 40 bytes, globalvariable.o(i.InitVideoClipOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = InitVideoClipOption &rArr; OSSemCreate &rArr; OS_EventWaitListInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[835]"></a>Init_IIS_WM8940_play</STRONG> (ARM, 4 bytes, Stack size 0 bytes, i2c.o(i.Init_IIS_WM8940_play))
<BR><BR>[Called By]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavReadFile_PCM
</UL>

<P><STRONG><a name="[849]"></a>Init_IIS_WM8940_rec</STRONG> (ARM, 4 bytes, Stack size 0 bytes, i2c.o(i.Init_IIS_WM8940_rec))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysVOICE_REC
</UL>

<P><STRONG><a name="[420]"></a>InterpretPPS</STRONG> (ARM, 900 bytes, Stack size 16 bytes, parset.o(i.InterpretPPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = InterpretPPS &rArr; decode_ue_v &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbsp_trailing_bits
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;more_rbsp_data
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ue_v
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_u_v
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_u_1
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_se_v
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPPS
</UL>

<P><STRONG><a name="[426]"></a>InterpretSPS</STRONG> (ARM, 1272 bytes, Stack size 16 bytes, parset.o(i.InterpretSPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = InterpretSPS &rArr; decode_ue_v &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbsp_trailing_bits
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ue_v
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_u_v
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_u_1
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSPS
</UL>

<P><STRONG><a name="[5d1]"></a>IsOpCodeSupported</STRONG> (ARM, 40 bytes, Stack size 0 bytes, avability.o(i.IsOpCodeSupported))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServResetBuffer
</UL>

<P><STRONG><a name="[427]"></a>JPEG_Enc</STRONG> (ARM, 312 bytes, Stack size 40 bytes, jpeg.o(i.JPEG_Enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = JPEG_Enc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJpegRst
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCapturePreviewImg
</UL>

<P><STRONG><a name="[2a6]"></a>Kill_Task_Speaker</STRONG> (ARM, 140 bytes, Stack size 8 bytes, tutk_av_sample.o(i.Kill_Task_Speaker))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Kill_Task_Speaker &rArr; avClientStop &rArr; _unInitAVInfo &rArr; tutk_block_FifoRelease &rArr; _BinaryTreeEmpty &rArr;  _BinaryTreeEmpty (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_AudioRetONOFF_APP
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStop
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Session_Status
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearP2PConnection
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Session_Status
</UL>

<P><STRONG><a name="[42b]"></a>LCD_PwrOnSeq</STRONG> (ARM, 24 bytes, Stack size 0 bytes, idu.o(i.LCD_PwrOnSeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = LCD_PwrOnSeq &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[42c]"></a>LCM_IDUInit</STRONG> (ARM, 52 bytes, Stack size 8 bytes, idu.o(i.LCM_IDUInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCM_IDUInit &rArr; IDU_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDU_Init
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysIDU_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[5d8]"></a>LinuxTConnection_SetupFails</STRONG> (ARM, 28 bytes, Stack size 0 bytes, tconnection.o(i.LinuxTConnection_SetupFails))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionHandlerThread
</UL>

<P><STRONG><a name="[435]"></a>LinuxTConnection_acceptTCPconnection</STRONG> (ARM, 132 bytes, Stack size 16 bytes, tconnection.o(i.LinuxTConnection_acceptTCPconnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = LinuxTConnection_acceptTCPconnection &rArr; lwip_accept &rArr; netconn_delete &rArr; netconn_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_convert_error
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionHandlerThread
</UL>

<P><STRONG><a name="[438]"></a>LinuxTConnection_connectedReadyToSend</STRONG> (ARM, 148 bytes, Stack size 16 bytes, tconnection.o(i.LinuxTConnection_connectedReadyToSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = LinuxTConnection_connectedReadyToSend &rArr; lwip_getsockname &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_convert_error
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionHandlerThread
</UL>

<P><STRONG><a name="[5d6]"></a>LinuxTConnection_handleError</STRONG> (ARM, 20 bytes, Stack size 0 bytes, tconnection.o(i.LinuxTConnection_handleError))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionHandlerThread
</UL>

<P><STRONG><a name="[43c]"></a>LinuxTConnection_receivingMsg</STRONG> (ARM, 316 bytes, Stack size 56 bytes, tconnection.o(i.LinuxTConnection_receivingMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = LinuxTConnection_receivingMsg &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionHandlerThread
</UL>

<P><STRONG><a name="[445]"></a>LoadP2PPassword</STRONG> (ARM, 12 bytes, Stack size 0 bytes, tutk_av_sample.o(i.LoadP2PPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoadP2PPassword &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PPassword
</UL>

<P><STRONG><a name="[ae]"></a>LoginInfoCB</STRONG> (ARM, 124 bytes, Stack size 0 bytes, tutk_av_sample.o(i.LoginInfoCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = LoginInfoCB &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tutk_av_sample.o(i.Task_SessionHandler)
</UL>
<P><STRONG><a name="[35f]"></a>MD5Final</STRONG> (ARM, 464 bytes, Stack size 168 bytes, encrypt.o(i.MD5Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = MD5Final &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuFwUpdLoadTxFW_SD
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
</UL>

<P><STRONG><a name="[35d]"></a>MD5Init</STRONG> (ARM, 48 bytes, Stack size 0 bytes, encrypt.o(i.MD5Init))
<BR><BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuFwUpdLoadTxFW_SD
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
</UL>

<P><STRONG><a name="[35e]"></a>MD5Update</STRONG> (ARM, 204 bytes, Stack size 96 bytes, encrypt.o(i.MD5Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = MD5Update &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuFwUpdLoadTxFW_SD
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
</UL>

<P><STRONG><a name="[447]"></a>MicVol_FadeIn</STRONG> (ARM, 4 bytes, Stack size 0 bytes, iis.o(i.MicVol_FadeIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MicVol_FadeIn &rArr; WM8940_MicVol_FadeIn &rArr; i2cWrite_WM8940 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8940_MicVol_FadeIn
</UL>
<BR>[Called By]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_AudioRetONOFF_IIS
</UL>

<P><STRONG><a name="[449]"></a>MicVol_FadeOut</STRONG> (ARM, 4 bytes, Stack size 0 bytes, iis.o(i.MicVol_FadeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MicVol_FadeOut &rArr; WM8940_MicVol_FadeOut &rArr; i2cWrite_WM8940 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8940_MicVol_FadeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_AudioRetONOFF_IIS
</UL>

<P><STRONG><a name="[44b]"></a>MultiChannelAsfCaptureVideo</STRONG> (ARM, 11852 bytes, Stack size 112 bytes, multichannelasf.o(i.MultiChannelAsfCaptureVideo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = MultiChannelAsfCaptureVideo &rArr; MultiChannelAsfWriteVidePayload &rArr; MultiChannelAsfWriteDataPacketPost &rArr; dcfOverWriteDel &rArr; dcfOWDel &rArr; FS_Remove &rArr; FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Encode_I_Header
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawSDCardFail
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawSDCardFULL
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetEvt
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetMainStorageFreeSize
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCloseFileByIdx
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateParameterSets_SW
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteVidePayload
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteIndexObject
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteFilePropertiesObjectPost
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataObjectPost
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteAudiPayload
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCreateFile
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCloseFile
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Sem
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTask
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTask
</UL>

<P><STRONG><a name="[45b]"></a>MultiChannelAsfCaptureVideoStop</STRONG> (ARM, 828 bytes, Stack size 16 bytes, multichannelasf.o(i.MultiChannelAsfCaptureVideoStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = MultiChannelAsfCaptureVideoStop &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTaskDestroy
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskDestroy
</UL>

<P><STRONG><a name="[883]"></a>MultiChannelAsfCaptureVideoStopAll</STRONG> (ARM, 4 bytes, Stack size 0 bytes, multichannelasf.o(i.MultiChannelAsfCaptureVideoStopAll))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
</UL>

<P><STRONG><a name="[457]"></a>MultiChannelAsfCloseFile</STRONG> (ARM, 1412 bytes, Stack size 24 bytes, multichannelasf.o(i.MultiChannelAsfCloseFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = MultiChannelAsfCloseFile &rArr; MultiChannelAsfWriteDummyVidePayload &rArr; MultiChannelAsfWriteDataPacketPost &rArr; dcfOverWriteDel &rArr; dcfOWDel &rArr; FS_Remove &rArr; FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawSDCardFail
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNewFile
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetEvt
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOverWriteDel
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetMainStorageFreeSize
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCloseFileByIdx
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteIndexObject
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteFilePropertiesObjectPost
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDummyVidePayload
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataPacketPost
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataObjectPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
</UL>

<P><STRONG><a name="[451]"></a>MultiChannelAsfCreateFile</STRONG> (ARM, 912 bytes, Stack size 88 bytes, multichannelasf.o(i.MultiChannelAsfCreateFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = MultiChannelAsfCreateFile &rArr; dcfOverWriteDel &rArr; dcfOWDel &rArr; FS_Remove &rArr; FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawSDCardFULL
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetEvt
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfWrite
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOverWriteDel
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetTotalDirCount
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetMainStorageFreeSize
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextFile
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCloseFileByIdx
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteHeaderObject
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataPacketPre
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
</UL>

<P><STRONG><a name="[465]"></a>MultiChannelAsfLinkBrokenCloseFile</STRONG> (ARM, 132 bytes, Stack size 8 bytes, multichannelasf.o(i.MultiChannelAsfLinkBrokenCloseFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = MultiChannelAsfLinkBrokenCloseFile &rArr; uiCaptureVideoStopByChannel &rArr; osdDrawVideoOn &rArr; uiOsdDrawCamera &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStopByChannel
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRFStatus
</UL>

<P><STRONG><a name="[452]"></a>MultiChannelAsfWriteAudiPayload</STRONG> (ARM, 632 bytes, Stack size 56 bytes, multichannelasf.o(i.MultiChannelAsfWriteAudiPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = MultiChannelAsfWriteAudiPayload &rArr; MultiChannelAsfWriteDataPacketPost &rArr; dcfOverWriteDel &rArr; dcfOWDel &rArr; FS_Remove &rArr; FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataPacketPre
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataPacketPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
</UL>

<P><STRONG><a name="[467]"></a>MultiChannelAsfWriteCodecListObject</STRONG> (ARM, 244 bytes, Stack size 152 bytes, multichannelasf.o(i.MultiChannelAsfWriteCodecListObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MultiChannelAsfWriteCodecListObject &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteHeaderObject
</UL>

<P><STRONG><a name="[454]"></a>MultiChannelAsfWriteDataObjectPost</STRONG> (ARM, 192 bytes, Stack size 32 bytes, multichannelasf.o(i.MultiChannelAsfWriteDataObjectPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = MultiChannelAsfWriteDataObjectPost &rArr; dcfWrite &rArr; FS_FWrite &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfWrite
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfTell
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSeek
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCloseFile
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
</UL>

<P><STRONG><a name="[46a]"></a>MultiChannelAsfWriteDataObjectPre</STRONG> (ARM, 168 bytes, Stack size 64 bytes, multichannelasf.o(i.MultiChannelAsfWriteDataObjectPre), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfWrite
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[45d]"></a>MultiChannelAsfWriteDataPacketPost</STRONG> (ARM, 664 bytes, Stack size 56 bytes, multichannelasf.o(i.MultiChannelAsfWriteDataPacketPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = MultiChannelAsfWriteDataPacketPost &rArr; dcfOverWriteDel &rArr; dcfOWDel &rArr; FS_Remove &rArr; FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfWrite
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOverWriteDel
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetMainStorageFreeSize
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteVidePayload
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDummyVidePayload
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteAudiPayload
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCloseFile
</UL>

<P><STRONG><a name="[464]"></a>MultiChannelAsfWriteDataPacketPre</STRONG> (ARM, 148 bytes, Stack size 32 bytes, multichannelasf.o(i.MultiChannelAsfWriteDataPacketPre))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = MultiChannelAsfWriteDataPacketPre &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteVidePayload
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDummyVidePayload
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteAudiPayload
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCreateFile
</UL>

<P><STRONG><a name="[45c]"></a>MultiChannelAsfWriteDummyVidePayload</STRONG> (ARM, 1192 bytes, Stack size 104 bytes, multichannelasf.o(i.MultiChannelAsfWriteDummyVidePayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = MultiChannelAsfWriteDummyVidePayload &rArr; MultiChannelAsfWriteDataPacketPost &rArr; dcfOverWriteDel &rArr; dcfOWDel &rArr; FS_Remove &rArr; FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264PutDummyHeader
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataPacketPre
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataPacketPost
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCloseFile
</UL>

<P><STRONG><a name="[453]"></a>MultiChannelAsfWriteFilePropertiesObjectPost</STRONG> (ARM, 312 bytes, Stack size 64 bytes, multichannelasf.o(i.MultiChannelAsfWriteFilePropertiesObjectPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = MultiChannelAsfWriteFilePropertiesObjectPost &rArr; dcfWrite &rArr; FS_FWrite &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfWrite
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfTell
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSeek
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCloseFile
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
</UL>

<P><STRONG><a name="[46b]"></a>MultiChannelAsfWriteHdrPaddingObject</STRONG> (ARM, 400 bytes, Stack size 40 bytes, multichannelasf.o(i.MultiChannelAsfWriteHdrPaddingObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = MultiChannelAsfWriteHdrPaddingObject &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteHeaderObject
</UL>

<P><STRONG><a name="[46c]"></a>MultiChannelAsfWriteHeaderExtensionObject</STRONG> (ARM, 236 bytes, Stack size 176 bytes, multichannelasf.o(i.MultiChannelAsfWriteHeaderExtensionObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = MultiChannelAsfWriteHeaderExtensionObject &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteHeaderObject
</UL>

<P><STRONG><a name="[462]"></a>MultiChannelAsfWriteHeaderObject</STRONG> (ARM, 504 bytes, Stack size 152 bytes, multichannelasf.o(i.MultiChannelAsfWriteHeaderObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = MultiChannelAsfWriteHeaderObject &rArr; MultiChannelAsfWriteHeaderExtensionObject &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteVideStreamPropertiesObject
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteHeaderExtensionObject
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteHdrPaddingObject
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteCodecListObject
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCreateFile
</UL>

<P><STRONG><a name="[455]"></a>MultiChannelAsfWriteIndexObject</STRONG> (ARM, 188 bytes, Stack size 72 bytes, multichannelasf.o(i.MultiChannelAsfWriteIndexObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = MultiChannelAsfWriteIndexObject &rArr; dcfWrite &rArr; FS_FWrite &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfWrite
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCloseFile
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
</UL>

<P><STRONG><a name="[458]"></a>MultiChannelAsfWriteVidePayload</STRONG> (ARM, 2320 bytes, Stack size 152 bytes, multichannelasf.o(i.MultiChannelAsfWriteVidePayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = MultiChannelAsfWriteVidePayload &rArr; MultiChannelAsfWriteDataPacketPost &rArr; dcfOverWriteDel &rArr; dcfOWDel &rArr; FS_Remove &rArr; FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataPacketPre
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataPacketPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
</UL>

<P><STRONG><a name="[46d]"></a>MultiChannelAsfWriteVideStreamPropertiesObject</STRONG> (ARM, 360 bytes, Stack size 152 bytes, multichannelasf.o(i.MultiChannelAsfWriteVideStreamPropertiesObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MultiChannelAsfWriteVideStreamPropertiesObject &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteHeaderObject
</UL>

<P><STRONG><a name="[46e]"></a>MultiChannelAsfWriteVirtualVidePayload</STRONG> (ARM, 260 bytes, Stack size 24 bytes, multichannelasf.o(i.MultiChannelAsfWriteVirtualVidePayload), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[46f]"></a>MultiChannelCheckEventTrigger</STRONG> (ARM, 228 bytes, Stack size 16 bytes, multichannelasf.o(i.MultiChannelCheckEventTrigger), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[3a3]"></a>MultiChannelCheckRecordChannel</STRONG> (ARM, 52 bytes, Stack size 0 bytes, multichannelasf.o(i.MultiChannelCheckRecordChannel))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_Device_Mount
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[450]"></a>MultiChannelGetCaptureVideoStatus</STRONG> (ARM, 160 bytes, Stack size 16 bytes, sys_project.o(i.MultiChannelGetCaptureVideoStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = MultiChannelGetCaptureVideoStatus &rArr; OSFlagAccept
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Record_ScheduleMode
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfLinkBrokenCloseFile
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCreateFile
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCloseFile
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfResolutionRxToTx
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckScheduleTime
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckRecState
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckRecPIR
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckCurRecState
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiDrawManualRec
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCRec
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiWaitMainInitReady
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoByChannel
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawRecPerSec
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_CameraResolution
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_P2P_Session
</UL>

<P><STRONG><a name="[bc]"></a>MultiChannelH264Enc_CompressOneFrame</STRONG> (ARM, 1400 bytes, Stack size 40 bytes, multichannelh264.o(i.MultiChannelH264Enc_CompressOneFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = MultiChannelH264Enc_CompressOneFrame &rArr; GenerateParameterSets_SW &rArr; GenerateSeq_parameter_set_rbsp &rArr; encode_se_v &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciu_4_Stop
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciu_3_Stop
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciu_2_Stop
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciu_1_Stop
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSReset
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateParameterSets_SW
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;siuStop
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isuStop
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipuStop
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMPEG_enable
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMPEG_disable
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSReset_EXT
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_SetNALSliceHeader
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_SetModeDecisionAlgorithm
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_InitCfg
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_GenerateParameterSets_HW
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_InitBuf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videocodec_common.o(i.VideoCodecInit)
</UL>
<P><STRONG><a name="[bb]"></a>MultiChannelH264Enc_DecSliceType</STRONG> (ARM, 200 bytes, Stack size 32 bytes, multichannelh264.o(i.MultiChannelH264Enc_DecSliceType))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MultiChannelH264Enc_DecSliceType &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videocodec_common.o(i.VideoCodecInit)
</UL>
<P><STRONG><a name="[47c]"></a>MultiChannelH264Enc_InitBuf</STRONG> (ARM, 772 bytes, Stack size 16 bytes, multichannelh264.o(i.MultiChannelH264Enc_InitBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = MultiChannelH264Enc_InitBuf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
</UL>

<P><STRONG><a name="[103]"></a>MultiChannelH264IntHandler</STRONG> (ARM, 492 bytes, Stack size 16 bytes, multichannelh264.o(i.MultiChannelH264IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = MultiChannelH264IntHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[4eb]"></a>MultiChannelMpeg4SetVideoFrameRate</STRONG> (ARM, 12 bytes, Stack size 0 bytes, multichannelmpeg4.o(i.MultiChannelMpeg4SetVideoFrameRate))
<BR><BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpeg4SetVideoFrameRate
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_P2P_Session
</UL>

<P><STRONG><a name="[47e]"></a>MultiChannelSysCaptureVideoOneCh</STRONG> (ARM, 128 bytes, Stack size 8 bytes, sys_project.o(i.MultiChannelSysCaptureVideoOneCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = MultiChannelSysCaptureVideoOneCh &rArr; sysCaptureVideoSubTaskCreate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTaskCreate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Record_ScheduleMode
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoByChannel
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_P2P_Session
</UL>

<P><STRONG><a name="[480]"></a>MultiChannelSysCaptureVideoStopOneCh</STRONG> (ARM, 100 bytes, Stack size 8 bytes, sys_project.o(i.MultiChannelSysCaptureVideoStopOneCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = MultiChannelSysCaptureVideoStopOneCh &rArr; RfRxVideoPackerSubTaskDestroy &rArr; MultiChannelAsfCaptureVideoStop &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTaskDestroy
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskDestroy
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Record_ScheduleMode
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Record_CaptureVideoStopByChannel
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStopByChannel
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysVideoCaptureStop
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_P2P_Session
</UL>

<P><STRONG><a name="[531]"></a>NTP_Switch</STRONG> (ARM, 12 bytes, Stack size 0 bytes, lwipentry.o(i.NTP_Switch))
<BR><BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_DateTime
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmdParse
</UL>

<P><STRONG><a name="[960]"></a>OSD_Black_Color_Bar</STRONG> (ARM, 196 bytes, Stack size 0 bytes, idu.o(i.OSD_Black_Color_Bar))
<BR><BR>[Called By]<UL><LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawBlackAll
</UL>

<P><STRONG><a name="[9c0]"></a>OSDebugInit</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ucos_ii.o(i.OSDebugInit))
<BR><BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit (via Veneer)
</UL>

<P><STRONG><a name="[470]"></a>OSFlagAccept</STRONG> (ARM, 300 bytes, Stack size 24 bytes, ucos_ii.o(i.OSFlagAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSFlagAccept
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiReadVideoFile
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPlaybackStop
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckPlayback
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckVideoRec
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PSendEvent
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Format
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawRecPerSec
</UL>

<P><STRONG><a name="[299]"></a>OSFlagCreate</STRONG> (ARM, 128 bytes, Stack size 24 bytes, ucos_ii.o(i.OSFlagCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSFlagCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_End
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfiuInit
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAInit
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerInit
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfInit
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInit
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_function
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTMAC110_main
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartCmdInit
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpuInit (via Veneer)
</UL>

<P><STRONG><a name="[483]"></a>OSFlagDel</STRONG> (ARM, 412 bytes, Stack size 40 bytes, ucos_ii.o(i.OSFlagDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSFlagDel &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_End
</UL>

<P><STRONG><a name="[2ab]"></a>OSFlagPend</STRONG> (ARM, 632 bytes, Stack size 72 bytes, ucos_ii.o(i.OSFlagPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanFileOnPlaybackDir
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFilePrev
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFileNext
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRF
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuWaitForInt_Tx
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuWaitForInt_Rx
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpu_ByteMemcpy (via Veneer)
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAWaitForInt
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerWaitForTickInt
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerWaitForInt
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Session_Status
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTaskDestroy
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetLightStatus
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetCAStatus
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckLightManualSwitchStatus
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCAlarm
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckAlarmManualSwitchStatus
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiWaitMainInitReady
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRFStatus
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSubTask
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeChannel
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeAudio_QuadMode
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPlaybackStop
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDirForward
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDirBackward
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckUSBCD
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckSDCD
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskDestroy
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_IN
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphGetMenuData
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimeZoneGraph
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimeGraph
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawString
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledTime
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledTable
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSettingGraph
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawResolutionGraph
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawRECModeGraph
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListRecType
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListCam
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListCalendar
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMotionSensitivityGraph
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawLoadingGraph
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraOnOffGraph
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCalendarFileLoad
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawBrightnessGraph
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPairInMenu
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPair
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduled
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawDateTime
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraAlarmOnOff
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawUpgradeFW
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearP2PConnection
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IR_TX
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Login
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Listen
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_P2P_Session
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Session_Status
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcSetStat
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpu_FATZeroScan (via Veneer)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartCmdTask
</UL>

<P><STRONG><a name="[358]"></a>OSFlagPost</STRONG> (ARM, 912 bytes, Stack size 32 bytes, ucos_ii.o(i.OSFlagPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanFileOnPlaybackDir
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFilePrev
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFileNext
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_WrapRx_Task_UnitX
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncPSHeader_RF
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRF
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Tx
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Rx
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpu_ByteMemcpy (via Veneer)
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskCreate
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuIntHandler (via Veneer)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAIntHandler
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAConfig
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerPwmEnable
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerPwmCountEnable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerIntHandler
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerCountEnable
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload_Net
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareUpdateFlow
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetUpdateFlow
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetPrepare
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSplitFile
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTaskCreate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTask
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTask
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetLightStatus
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetCAStatus
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckLightManualSwitchStatus
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCAlarm
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckAlarmManualSwitchStatus
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRFStatus
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTask
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeChannel
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeAudio_QuadMode
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDirForward
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDirBackward
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckUSBCD
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckSDCD
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_P2P_Readfile
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUpgradeFW
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_OFF
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_IN
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_OFF
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackFormat
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDelete
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackCalendar
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackupFormat
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_UI_KEY_USB
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_UI_KEY_SDCD
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_Device_Mount
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphGetMenuData
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimeZoneGraph
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimeGraph
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawString
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledTime
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledTable
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSettingGraph
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawResolutionGraph
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawRECModeGraph
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListRecType
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListCam
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListCalendar
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMotionSensitivityGraph
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawLoadingGraph
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraOnOffGraph
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCalendarFileLoad
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawBrightnessGraph
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPairInMenu
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPair
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduled
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawDateTime
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraAlarmOnOff
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLwIP
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_UpgradeNet
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ISR_handler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_zeropointfivems_IntHandler
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcSetStat
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpu_FATZeroScan (via Veneer)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartCmdTask
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartBufRcv
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpuIntHandler (via Veneer)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpu2IntHandler (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[486]"></a>OSMboxCreate</STRONG> (ARM, 112 bytes, Stack size 16 bytes, ucos_ii.o(i.OSMboxCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSMboxCreate &rArr; OS_EventWaitListInit
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_background_init
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartCmdInit
</UL>

<P><STRONG><a name="[488]"></a>OSMboxPend</STRONG> (ARM, 276 bytes, Stack size 32 bytes, ucos_ii.o(i.OSMboxPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSMboxPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched (via Veneer)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait (via Veneer)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTO (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiKeyParse
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_IN
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawUpgradeFW
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRunFormat
</UL>

<P><STRONG><a name="[48b]"></a>OSMboxPost</STRONG> (ARM, 152 bytes, Stack size 16 bytes, ucos_ii.o(i.OSMboxPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched (via Veneer)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareUpdateFlow
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiKeyParse
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFormat
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupFormat
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUpgradeFW
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackFormat
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDeleteDir
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDeleteAll
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackupFormat
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRunFormat
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcErase
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmdParse
</UL>

<P><STRONG><a name="[48d]"></a>OSMemCreate</STRONG> (ARM, 212 bytes, Stack size 24 bytes, ucos_ii.o(i.OSMemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSMemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwipBufInit
</UL>

<P><STRONG><a name="[48e]"></a>OSMemGet</STRONG> (ARM, 112 bytes, Stack size 16 bytes, ucos_ii.o(i.OSMemGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemAlloc
</UL>

<P><STRONG><a name="[48f]"></a>OSMemPut</STRONG> (ARM, 104 bytes, Stack size 16 bytes, ucos_ii.o(i.OSMemPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_MemFree
</UL>

<P><STRONG><a name="[490]"></a>OSQCreate</STRONG> (ARM, 196 bytes, Stack size 24 bytes, ucos_ii.o(i.OSQCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSQCreate &rArr; OS_EventWaitListInit
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQCreate
</UL>

<P><STRONG><a name="[491]"></a>OSQDel</STRONG> (ARM, 352 bytes, Stack size 40 bytes, ucos_ii.o(i.OSQDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSQDel &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched (via Veneer)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQDelete
</UL>

<P><STRONG><a name="[492]"></a>OSQPend</STRONG> (ARM, 324 bytes, Stack size 32 bytes, ucos_ii.o(i.OSQPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSQPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched (via Veneer)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait (via Veneer)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTO (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQDequeue
</UL>

<P><STRONG><a name="[493]"></a>OSQPost</STRONG> (ARM, 192 bytes, Stack size 16 bytes, ucos_ii.o(i.OSQPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched (via Veneer)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQEnqueueTry
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQEnqueue
</UL>

<P><STRONG><a name="[44c]"></a>OSSemAccept</STRONG> (ARM, 68 bytes, Stack size 16 bytes, ucos_ii.o(i.OSSemAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemAccept
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskCreate
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadVideoPayload
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoice
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoiceFile
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
</UL>

<P><STRONG><a name="[2fe]"></a>OSSemCreate</STRONG> (ARM, 112 bytes, Stack size 16 bytes, ucos_ii.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemCreate &rArr; OS_EventWaitListInit
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfiuInit
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskCreate
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAInit
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerInit
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisInit
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5Init
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCodecInit
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_background_init
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_back_RF_Task_init
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_back_Network_Task_init
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_backLowTask_init
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInit
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexInit
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrInit
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_av_sample
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isuInit
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegInit
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbHostInit
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcTaskInit
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcInit
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_Init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Init
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptInit
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpuInit (via Veneer)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVideoClipOption
</UL>

<P><STRONG><a name="[494]"></a>OSSemDel</STRONG> (ARM, 320 bytes, Stack size 40 bytes, ucos_ii.o(i.OSSemDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSSemDel &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched (via Veneer)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbUninst
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskDestroy
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexDelete
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remoteplayback_busy
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbMscFsUnInitLuns
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbMscUnInit
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcInit
</UL>

<P><STRONG><a name="[2d5]"></a>OSSemPend</STRONG> (ARM, 240 bytes, Stack size 32 bytes, ucos_ii.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched (via Veneer)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait (via Veneer)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTO (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDelDir
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDel
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_End
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuForceResync
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Tx
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Rx
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Decode
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpu_ByteMemcpy (via Veneer)
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAOpen
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMACloseReleaseSource
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAClose
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerOpen
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfWrite
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOverWriteDel
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextFile
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCloseFileByIdx
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSemProcess
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBlkSemProcess
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTaskDestroy
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTaskCreate
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATIncEntry
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegDecompressionYUV420
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegDecompression
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTask
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfSuspendDelDecTask_ALL
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfSuspendDelDecTask
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfCreateDecTask
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDelAll
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitJpegEncComplete
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskDestroy
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_RF_Task
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_Net_Task
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_Low_Task
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackTask
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackLowSetEvt
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackEXIFWrite
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_Device_Mount
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTask
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSentMountSeq
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysLockMountSeq
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_RFI_RX_CH_Restart
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavReadFile_PCM
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisTask
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXYChColor
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIcon
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorY
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uiOSDDrawStr
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorCenter
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_GMT_Time
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stop_remove
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite_WM8940
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite_Byte
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_Byte
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time_With_TmpCnt
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskCreate
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexLock
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcSetDefaultTime
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_GMT_Time
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remoteplayback_busy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoTask
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Decoding1Frame
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264DecodeLastFrame
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_DecompressOneFrame
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_DecodeOneFrame
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_CompressOneFrame
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbfsDevWrite
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbfsDevRead
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbfsDevMulWrite
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbfsDevMulRead
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite_SD2068
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite16addr_Byte
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_SENSOR
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_SD2068
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead16addr_Byte
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Enc
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_submit_async
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbHostTask
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcTask
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcSetIntEvt
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcGetIntEvt
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckMultipleWriteError
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckWriteError
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckCommandResponseComplete
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockMem
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpu_FATZeroScan (via Veneer)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATNewEntry
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockDirOp
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockDirHandle
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockFileOp
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockFileHandle
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_LockDeviceOp
</UL>

<P><STRONG><a name="[2bc]"></a>OSSemPost</STRONG> (ARM, 148 bytes, Stack size 16 bytes, ucos_ii.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched (via Veneer)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDelDir
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDel
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackPS_RF
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_End
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuWaitForInt_Tx
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuWaitForInt_Rx
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuForceResync
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_RF_SetEvt
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackSetEvt
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Decode
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpu_ByteMemcpy (via Veneer)
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAOpen
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskCreate
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSectorErase
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIdentification
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiExit4ByteMode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAIntHandler
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMACloseReleaseSource
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAClose
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerClose
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetEvt
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfWrite
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOverWriteDel
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextFile
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCloseFileByIdx
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_Net_SetEvt
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReleSemProcess
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIntHandler
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteWrite
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteSectorErase
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteRead
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisResumeTask
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSplitVideoPayload
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSplitFile
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadVideoPayload
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTaskDestroy
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTaskCreate
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATIncEntry
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegDecompressionYUV420
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegDecompression
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfSuspendDelDecTask_ALL
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfSuspendDelDecTask
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfCreateDecTask
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoice
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSentKeyToUi
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDelAll
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitJpegEncComplete
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskDestroy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_Low_Task
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackLowSetEvt
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackEXIFWrite
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_Device_Mount
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUnlockMountSeq
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetUiKey
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCheckBTCBatteryLevel
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_RFI_RX_CH_Restart
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoiceFile
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavReadFile_PCM
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisTask
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisRecDMA_ISR
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisPlayDMA_ISR
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXYChColor
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIcon
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorY
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uiOSDDrawStr
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorCenter
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_GMT_Time
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stop_remove
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite_WM8940
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite_Byte
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_Byte
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time_With_TmpCnt
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskCreate
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexUnLock
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Exception
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcSetDefaultTime
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_GMT_Time
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_P2P_Session
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoTask
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264DecodeLastFrame
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_DecompressOneFrame
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264IntHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_CompressOneFrame
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbHostSetIntEvt
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbfsDevWrite
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbfsDevRead
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbfsDevMulWrite
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbfsDevMulRead
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite_SD2068
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite16addr_Byte
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_SENSOR
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_SD2068
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead16addr_Byte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cIntHandler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIntHandler
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_submit_async
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbHostIntHandler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcTask
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcSetIntEvt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcIntHandler
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcGetIntEvt
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockMem
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpu_FATZeroScan (via Veneer)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATNewEntry
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockDirOp
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockDirHandle
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockFileOp
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockFileHandle
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptIntHandler
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmdParse
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_X_OS_UnlockDeviceOp
</UL>

<P><STRONG><a name="[2a8]"></a>OSSemSet</STRONG> (ARM, 96 bytes, Stack size 16 bytes, ucos_ii.o(i.OSSemSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemSet
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_WrapRx_Task_UnitX
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_End
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Session_Status
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_IN
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_P2P_Session
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Session_Status
</UL>

<P><STRONG><a name="[495]"></a>OSTaskChangePrio</STRONG> (ARM, 384 bytes, Stack size 40 bytes, ucos_ii.o(i.OSTaskChangePrio))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTaskChangePrio &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[33b]"></a>OSTaskCreate</STRONG> (ARM, 220 bytes, Stack size 40 bytes, ucos_ii.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit (via Veneer)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Start
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuCamOnOffCmd
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskCreate
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisInit
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5Init
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCodecInit
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTaskCreate
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfCreateDecTask
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_background_init
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_back_RF_Task_init
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_back_Network_Task_init
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_backLowTask_init
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInit
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_RFI_TX_CH_Create
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_RFI_RX_CH_Restart
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTMAC110_main
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrInit
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_av_sample
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbHostInit
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcTaskInit
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartCmdInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_Init
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnManager_create
</UL>

<P><STRONG><a name="[498]"></a>OSTaskCreateExt</STRONG> (ARM, 312 bytes, Stack size 64 bytes, ucos_ii.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit (via Veneer)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskCreate
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit (via Veneer)
</UL>

<P><STRONG><a name="[42a]"></a>OSTaskDel</STRONG> (ARM, 492 bytes, Stack size 32 bytes, ucos_ii.o(i.OSTaskDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched (via Veneer)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_End
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareUpdateFlow
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetUpdateFlow
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetPrepare
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTaskDestroy
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfSuspendDelDecTask_ALL
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfSuspendDelDecTask
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbUninst
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskDestroy
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_RFI_TX_CH_Del
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_RFI_RX_CH_Restart
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_UpgradeNet
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remoteplayback_busy
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kill_Task_Speaker
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbMscUnInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionHandlerThread
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_Run
</UL>

<P><STRONG><a name="[49b]"></a>OSTaskQuery</STRONG> (ARM, 148 bytes, Stack size 16 bytes, ucos_ii.o(i.OSTaskQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTaskQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemCopy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafeDelP2pPlayFileTask
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remoteplayback_busy
</UL>

<P><STRONG><a name="[49d]"></a>OSTaskResume</STRONG> (ARM, 208 bytes, Stack size 8 bytes, ucos_ii.o(i.OSTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTaskResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpeg4ResumeTask
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisResumeTask
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoiceFile
</UL>

<P><STRONG><a name="[49e]"></a>OSTaskSuspend</STRONG> (ARM, 232 bytes, Stack size 16 bytes, ucos_ii.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_End
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareUpdateFlow
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetUpdateFlow
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetPrepare
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpeg4SuspendTask
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisSuspendTask
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisInit
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5Init
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCodecInit
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTaskDestroy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTask
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTask
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfSuspendDelDecTask_ALL
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfSuspendDelDecTask
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoice
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskDestroy
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_RFI_RX_CH_Restart
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_UpgradeNet
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remoteplayback_busy
</UL>

<P><STRONG><a name="[26f]"></a>OSTimeDly</STRONG> (ARM, 96 bytes, Stack size 16 bytes, ucos_ii.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_WrapRx_Task_UnitX
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RfSwAudio_DualMode
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_AudioRetONOFF_IIS
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WOR_enable_B1
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_UpdateTXOthersPara
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Start
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXsleepTime
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXVoxCfg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXTurbo_On
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXTurbo_Off
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXSchedule
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXReboot
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXPIRCfg
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXDoorBellOff
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetRXOpMode_All
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetRXOpMode_1
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SendTxMdSense
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_ResendTxMdConfig
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_End
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuTxFwUpdateFromSD
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuTxFwUpdateFromNet
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuForceResync
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuCamOnOffCmd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsRfiu_FCC_DirectTXRX
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuCamSleepCmd
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackMode
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextFile
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCreateFile
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareUpdateFlow
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetUpdateFlow
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSplitVideoPayload
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadVideoPayload
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfResolutionRxToTx
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfPIRRxToTx
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfMotionRxToTx
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfFlickerRxToTx
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfBrightnessRxToTx
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTask
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTask
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_IoCtl
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetStartMovie
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckP2PMode
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfManualLightingRxToTx
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PStatueToRF
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfSuspendDelDecTask_ALL
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfSuspendDelDecTask
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPlaybackStop
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanDiskAll
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoice
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSynRfConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfTimeRxToTx
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetGoToFormat
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpdate
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskDestroy
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_Device_Mount
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTask
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetOutputMode
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSentUiKeyTilOK
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDevInsertedUpgradeEvt
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_RFI_RX_CH_Restart
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoiceFile
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavReadFile_PCM
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisTask
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimezone
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSetting
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawDateTime
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawUpgradeFW
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSystemReboot
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRunFormat
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawProtect
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitlwIPInitDone2
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLwIP
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_LwIPEntry
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phywrite16
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyread16
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_processing
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmac110_xmit_wait_dma_done
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmac110_init
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_duplex_speed
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TVout_Format
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_DateTime
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduSwitchNTSCPAL
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRXCMDTest
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickDelay
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQEnqueue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SafeDelP2pPlayFileTask
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrTask
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServResetBuffer
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrl
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvIOCtrl
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Listen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Speaker
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Login
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Listen
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_P2P_Session
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remoteplayback_busy
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kill_Task_Speaker
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoTask
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_test_unit_ready
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_control_msg
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit_GT9271
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_submit_root
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_bus_reset
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcPowerOnRest
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMountSeq
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckCardBusy
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcWriteMultipleBlock
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMount
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcErase
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_GetTotalFree
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartCmdTask
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawLogoTask
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnManager_destroy
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_Run
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Query_VPGServerList
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_DeInit
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Check_Server
</UL>

<P><STRONG><a name="[49f]"></a>OSTimeDlyHMSM</STRONG> (ARM, 376 bytes, Stack size 24 bytes, ucos_ii.o(i.OSTimeDlyHMSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRunFormat
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLwIP
</UL>

<P><STRONG><a name="[2d6]"></a>OSTimeGet</STRONG> (ARM, 28 bytes, Stack size 8 bytes, ucos_ii.o(i.OSTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_AudioRetONOFF_IIS
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfWrite
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSplitVideoPayload
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDriveInfo
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupDriveInfo
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PSendEvent
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Random
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetSysTick
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoFrameData
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fopen
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFreeFATLink
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_write
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>

<P><STRONG><a name="[4a0]"></a>OS_FlagInit</STRONG> (ARM, 136 bytes, Stack size 32 bytes, ucos_ii.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit (via Veneer)
</UL>

<P><STRONG><a name="[4a2]"></a>OS_GetSysTick</STRONG> (ARM, 4 bytes, Stack size 0 bytes, rtos.o(i.OS_GetSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_GetSysTick &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[4a3]"></a>OS_Init</STRONG> (ARM, 208 bytes, Stack size 16 bytes, rtos.o(i.OS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = OS_Init &rArr; OS_MemSET &rArr; memset_hw &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemSET
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_LwIPEntry
</UL>

<P><STRONG><a name="[4a5]"></a>OS_MemAlloc</STRONG> (ARM, 368 bytes, Stack size 16 bytes, porting.o(i.OS_MemAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = OS_MemAlloc &rArr; memset_hw &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Random
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQCreate
</UL>

<P><STRONG><a name="[4a6]"></a>OS_MemInit</STRONG> (ARM, 124 bytes, Stack size 8 bytes, ucos_ii.o(i.OS_MemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit (via Veneer)
</UL>

<P><STRONG><a name="[4a4]"></a>OS_MemSET</STRONG> (ARM, 4 bytes, Stack size 0 bytes, porting.o(i.OS_MemSET))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = OS_MemSET &rArr; memset_hw &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[4a7]"></a>OS_MsgQCreate</STRONG> (ARM, 116 bytes, Stack size 16 bytes, rtos.o(i.OS_MsgQCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = OS_MsgQCreate &rArr; OS_MemAlloc &rArr; memset_hw &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemAlloc
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[4a8]"></a>OS_MsgQDelete</STRONG> (ARM, 140 bytes, Stack size 16 bytes, rtos.o(i.OS_MsgQDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = OS_MsgQDelete &rArr; __OS_MemFree &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OS_MemFree
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock (via Veneer)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock (via Veneer)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[4ac]"></a>OS_MsgQDequeue</STRONG> (ARM, 56 bytes, Stack size 16 bytes, rtos.o(i.OS_MsgQDequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_MsgQDequeue &rArr; OSQPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[4ad]"></a>OS_MsgQEnqueue</STRONG> (ARM, 56 bytes, Stack size 16 bytes, rtos.o(i.OS_MsgQEnqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_MsgQEnqueue &rArr; OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[4ae]"></a>OS_MsgQEnqueueTry</STRONG> (ARM, 24 bytes, Stack size 8 bytes, rtos.o(i.OS_MsgQEnqueueTry))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_MsgQEnqueueTry &rArr; OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>

<P><STRONG><a name="[84d]"></a>OS_MsgQWaitingSize</STRONG> (ARM, 8 bytes, Stack size 0 bytes, rtos.o(i.OS_MsgQWaitingSize))
<BR><BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[3cb]"></a>OS_MutexDelete</STRONG> (ARM, 20 bytes, Stack size 8 bytes, rtos.o(i.OS_MutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OS_MutexDelete &rArr; OSSemDel &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_DeInitialize
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRelease
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnManager_destroy
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unInitAVInfo
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_lookup_host
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_free_host_list
</UL>

<P><STRONG><a name="[3fe]"></a>OS_MutexInit</STRONG> (ARM, 84 bytes, Stack size 8 bytes, rtos.o(i.OS_MutexInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_MutexInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avInitialize
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Initialize2
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_mutex_init
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoNew
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initAVInfo
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_init
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnManager_create
</UL>

<P><STRONG><a name="[4af]"></a>OS_MutexLock</STRONG> (ARM, 76 bytes, Stack size 8 bytes, rtos.o(i.OS_MutexLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_mutex_lock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionHandlerThread
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_Run
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
</UL>

<P><STRONG><a name="[4b0]"></a>OS_MutexUnLock</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rtos.o(i.OS_MutexUnLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OS_MutexUnLock &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_mutex_unlock
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionHandlerThread
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_Run
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
</UL>

<P><STRONG><a name="[4b1]"></a>OS_QInit</STRONG> (ARM, 108 bytes, Stack size 16 bytes, ucos_ii.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit (via Veneer)
</UL>

<P><STRONG><a name="[4b2]"></a>OS_Random</STRONG> (ARM, 100 bytes, Stack size 16 bytes, rtos.o(i.OS_Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = OS_Random &rArr; OS_MemAlloc &rArr; memset_hw &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemAlloc
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_srand_r
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_r
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[4b5]"></a>OS_TaskCreate</STRONG> (ARM, 504 bytes, Stack size 72 bytes, rtos.o(i.OS_TaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = OS_TaskCreate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>

<P><STRONG><a name="[4b6]"></a>OS_TickDelay</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rtos.o(i.OS_TickDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OS_TickDelay &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[58d]"></a>OpCodeBigEndianExchange</STRONG> (ARM, 88 bytes, Stack size 8 bytes, avability.o(i.OpCodeBigEndianExchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OpCodeBigEndianExchange
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
</UL>

<P><STRONG><a name="[459]"></a>Output_Sem</STRONG> (ARM, 4 bytes, Stack size 0 bytes, avi.o(i.Output_Sem))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisInit
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5Init
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoice
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoiceFile
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisRecDMA_ISR
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisPlayDMA_ISR
</UL>

<P><STRONG><a name="[66]"></a>P2PSendEvent</STRONG> (ARM, 1032 bytes, Stack size 856 bytes, tutk_av_sample.o(i.P2PSendEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472 + Unknown Stack Size
<LI>Call Chain = P2PSendEvent &rArr; SendRegister &rArr; TcpConnect2 &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Time_To_Second
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa_r
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpSetSendTimeout
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpSendAll
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpConnect2
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Get_Login_Info
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[4c0]"></a>PWM_ISR_handler</STRONG> (ARM, 356 bytes, Stack size 32 bytes, timer_project.o(i.PWM_ISR_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = PWM_ISR_handler &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_IntHandler
</UL>

<P><STRONG><a name="[4c1]"></a>PrintErrHandling</STRONG> (ARM, 2332 bytes, Stack size 8 bytes, tutk_av_sample.o(i.PrintErrHandling))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = PrintErrHandling &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
</UL>

<P><STRONG><a name="[376]"></a>ProcessPPS</STRONG> (ARM, 8 bytes, Stack size 0 bytes, parset.o(i.ProcessPPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ProcessPPS &rArr; InterpretPPS &rArr; decode_ue_v &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpretPPS
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_ParseHeader
</UL>

<P><STRONG><a name="[377]"></a>ProcessSPS</STRONG> (ARM, 8 bytes, Stack size 0 bytes, parset.o(i.ProcessSPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ProcessSPS &rArr; InterpretSPS &rArr; decode_ue_v &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpretSPS
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_ParseHeader
</UL>

<P><STRONG><a name="[4c2]"></a>RBSPtoEBSP</STRONG> (ARM, 156 bytes, Stack size 56 bytes, nal.o(i.RBSPtoEBSP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RBSPtoEBSP
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBSPtoNALU
</UL>

<P><STRONG><a name="[348]"></a>RBSPtoNALU</STRONG> (ARM, 160 bytes, Stack size 16 bytes, nalu.o(i.RBSPtoNALU))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RBSPtoNALU &rArr; RBSPtoEBSP
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBSPtoEBSP
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateParameterSets_SW
</UL>

<P><STRONG><a name="[4c3]"></a>RSSI_measurement_A7196</STRONG> (ARM, 56 bytes, Stack size 8 bytes, amic7196.o(i.RSSI_measurement_A7196))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RSSI_measurement_A7196 &rArr; A7196_ReadReg_B2 &rArr; gpioGetLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ReadReg_B2
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ReadReg_B1
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuWaitForInt_Rx
</UL>

<P><STRONG><a name="[4c4]"></a>RTCTime_Gmt_To_Local</STRONG> (ARM, 216 bytes, Stack size 16 bytes, rtc.o(i.RTCTime_Gmt_To_Local))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTCTime_Gmt_To_Local &rArr; RTC_Time_To_Second
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr1_7_arm
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Time_To_Second
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Second_To_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1s_IntHandler
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD2068_RTC_Init
</UL>

<P><STRONG><a name="[68d]"></a>RTC_Get_DST</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rtc.o(i.RTC_Get_DST))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_recorded_filelist
</UL>

<P><STRONG><a name="[4c7]"></a>RTC_Get_GMT_Time</STRONG> (ARM, 348 bytes, Stack size 32 bytes, rtc.o(i.RTC_Get_GMT_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = RTC_Get_GMT_Time &rArr; Set_SD2068_RTC &rArr; i2cWrite_SD2068 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SD2068_RTC
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SD2068_RTC
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1s_IntHandler
</UL>

<P><STRONG><a name="[2d3]"></a>RTC_Get_Time</STRONG> (ARM, 40 bytes, Stack size 16 bytes, rtc.o(i.RTC_Get_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = RTC_Get_Time &rArr; RTC_Get_GMT_Time &rArr; Set_SD2068_RTC &rArr; i2cWrite_SD2068 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_GMT_Time
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTime_Gmt_To_Local
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextFile
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetPir
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckScheduleTime
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBatterySchdule
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetNewFileTime
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfTimeRxToTx
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PSendEvent
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCheckBTCBatteryLevel
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureImage_OnRFRx
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_ScheduleMode
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLifeTimePerSec
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawDateTime
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_LwIPEntry
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTimerWrong
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Listen
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_directory
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATFileEntryUpdate
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_create_file
</UL>

<P><STRONG><a name="[3aa]"></a>RTC_Get_TimeZone</STRONG> (ARM, 32 bytes, Stack size 0 bytes, rtc.o(i.RTC_Get_TimeZone))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_recorded_filelist
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[8da]"></a>RTC_Get_Week</STRONG> (ARM, 108 bytes, Stack size 0 bytes, rtc.o(i.RTC_Get_Week))
<BR><BR>[Called By]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckScheduleTime
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListCalendar
</UL>

<P><STRONG><a name="[4c6]"></a>RTC_Second_To_Time</STRONG> (ARM, 324 bytes, Stack size 12 bytes, rtc.o(i.RTC_Second_To_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_Second_To_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpdate
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1s_IntHandler
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTime_Gmt_To_Local
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_recorded_filelist
</UL>

<P><STRONG><a name="[4c9]"></a>RTC_Set_GMT_Time</STRONG> (ARM, 56 bytes, Stack size 16 bytes, rtc.o(i.RTC_Set_GMT_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = RTC_Set_GMT_Time &rArr; Set_SD2068_RTC &rArr; i2cWrite_SD2068 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SD2068_RTC
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpdate
</UL>

<P><STRONG><a name="[4ca]"></a>RTC_Set_Time</STRONG> (ARM, 276 bytes, Stack size 40 bytes, rtc.o(i.RTC_Set_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = RTC_Set_Time &rArr; Set_SD2068_RTC &rArr; i2cWrite_SD2068 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Time_To_Second
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Second_To_Time
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SD2068_RTC
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_DateTime
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTimeTest
</UL>

<P><STRONG><a name="[3a9]"></a>RTC_Set_TimeZone</STRONG> (ARM, 104 bytes, Stack size 0 bytes, rtc.o(i.RTC_Set_TimeZone))
<BR><BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Timezone
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[4cb]"></a>RTC_Set_Time_With_TmpCnt</STRONG> (ARM, 312 bytes, Stack size 16 bytes, rtc.o(i.RTC_Set_Time_With_TmpCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = RTC_Set_Time_With_TmpCnt &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr2_6_arm
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTimeTest
</UL>

<P><STRONG><a name="[4ba]"></a>RTC_Time_To_Second</STRONG> (ARM, 220 bytes, Stack size 16 bytes, rtc.o(i.RTC_Time_To_Second))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Time_To_Second
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PSendEvent
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_LwIPEntry
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTime_Gmt_To_Local
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_recorded_filelist
</UL>

<P><STRONG><a name="[4cd]"></a>Read_UI_Setting</STRONG> (ARM, 92 bytes, Stack size 8 bytes, ui.o(i.Read_UI_Setting), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetDefaultSetting
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStart
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadUI
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[3a7]"></a>Remoteplayback_busy</STRONG> (ARM, 1080 bytes, Stack size 48 bytes, tutk_av_sample.o(i.Remoteplayback_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 5024 + Unknown Stack Size
<LI>Call Chain = Remoteplayback_busy &rArr; SendVideoFrameData &rArr; avSendFrameData &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStop
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateH264Header
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoFrameData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[840]"></a>ResetisuPanel</STRONG> (ARM, 80 bytes, Stack size 0 bytes, isu.o(i.ResetisuPanel))
<BR><BR>[Called By]<UL><LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuTreeInit
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetOutputMode
</UL>

<P><STRONG><a name="[375]"></a>RestOfSliceHeader</STRONG> (ARM, 1464 bytes, Stack size 24 bytes, header.o(i.RestOfSliceHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = RestOfSliceHeader &rArr; decode_ue_v &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ue_v
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_u_v
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_u_1
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_se_v
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_ParseHeader
</UL>

<P><STRONG><a name="[4d3]"></a>RfRxVideoPackerDisable</STRONG> (ARM, 56 bytes, Stack size 16 bytes, sys_project.o(i.RfRxVideoPackerDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = RfRxVideoPackerDisable &rArr; RfRxVideoPackerSubTaskDestroy &rArr; MultiChannelAsfCaptureVideoStop &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskDestroy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
</UL>

<P><STRONG><a name="[a1]"></a>RfRxVideoPackerSubTask</STRONG> (ARM, 224 bytes, Stack size 8 bytes, sys_project.o(i.RfRxVideoPackerSubTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = RfRxVideoPackerSubTask &rArr; MultiChannelAsfCaptureVideo &rArr; MultiChannelAsfWriteVidePayload &rArr; MultiChannelAsfWriteDataPacketPost &rArr; dcfOverWriteDel &rArr; dcfOWDel &rArr; FS_Remove &rArr; FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_project.o(i.RfRxVideoPackerSubTaskCreate)
</UL>
<P><STRONG><a name="[4d4]"></a>RfRxVideoPackerSubTaskCreate</STRONG> (ARM, 664 bytes, Stack size 40 bytes, sys_project.o(i.RfRxVideoPackerSubTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = RfRxVideoPackerSubTaskCreate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_WrapRx_Task_UnitX
</UL>

<P><STRONG><a name="[482]"></a>RfRxVideoPackerSubTaskDestroy</STRONG> (ARM, 1920 bytes, Stack size 40 bytes, sys_project.o(i.RfRxVideoPackerSubTaskDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = RfRxVideoPackerSubTaskDestroy &rArr; MultiChannelAsfCaptureVideoStop &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideoStop
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoStopOneCh
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerDisable
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_RFI_RX_CH_Restart
</UL>

<P><STRONG><a name="[4d5]"></a>RfiuInit</STRONG> (ARM, 1036 bytes, Stack size 40 bytes, rfiu.o(i.RfiuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = RfiuInit &rArr; InitA7196 &rArr; initRF_B2 &rArr; A7196_Cal_B2 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitA7196
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSReset
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_InitCamOnOff
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackMode
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[4d7]"></a>RfiuReset</STRONG> (ARM, 316 bytes, Stack size 16 bytes, rfiu.o(i.RfiuReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = RfiuReset &rArr; sysForceWDTtoReboot &rArr; spiReleaseFlashStatus &rArr; spiExit4ByteMode &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysForceWDTtoReboot
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuRxReplyACKState
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuRxListenDataState
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuReplyACK_FWUPD
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuFwUpdSend_Done_State
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsRfiu_FCC_DirectTXRX
</UL>

<P><STRONG><a name="[4d9]"></a>SD2068_RTC_Init</STRONG> (ARM, 920 bytes, Stack size 56 bytes, i2c.o(i.SD2068_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = SD2068_RTC_Init &rArr; Set_SD2068_RTC &rArr; i2cWrite_SD2068 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SD2068_RTC
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTime_Gmt_To_Local
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_SD2068
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
</UL>

<P><STRONG><a name="[4da]"></a>SDK_Record_CaptureVideoStopByChannel</STRONG> (ARM, 148 bytes, Stack size 8 bytes, sdk_record.o(i.SDK_Record_CaptureVideoStopByChannel), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoStopOneCh
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[4db]"></a>SDK_Record_ScheduleMode</STRONG> (ARM, 384 bytes, Stack size 32 bytes, sdk_record.o(i.SDK_Record_ScheduleMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = SDK_Record_ScheduleMode &rArr; MultiChannelSysCaptureVideoStopOneCh &rArr; RfRxVideoPackerSubTaskDestroy &rArr; MultiChannelAsfCaptureVideoStop &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoStopOneCh
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoOneCh
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_ScheduleMode
</UL>

<P><STRONG><a name="[34e]"></a>SODBtoRBSP</STRONG> (ARM, 72 bytes, Stack size 4 bytes, nal.o(i.SODBtoRBSP))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SODBtoRBSP
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateSeq_parameter_set_rbsp
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePic_parameter_set_rbsp
</UL>

<P><STRONG><a name="[751]"></a>SYSClkEnable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sys.o(i.SYSClkEnable))
<BR><BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerPwmOpen
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerOpen
</UL>

<P><STRONG><a name="[339]"></a>SYSReset</STRONG> (ARM, 48 bytes, Stack size 0 bytes, sys.o(i.SYSReset))
<BR><BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_End
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfiuInit
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTMAC110_main
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
</UL>

<P><STRONG><a name="[477]"></a>SYSReset_EXT</STRONG> (ARM, 48 bytes, Stack size 0 bytes, sys.o(i.SYSReset_EXT))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
</UL>

<P><STRONG><a name="[3c1]"></a>Save_UI_Setting</STRONG> (ARM, 320 bytes, Stack size 24 bytes, ui.o(i.Save_UI_Setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = Save_UI_Setting &rArr; spiWriteUIBackup &rArr; spiWrite &rArr; spi4ByteWrite &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGetSaveChecksum
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSPI_Enable
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSPI_Disable
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Enable
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Disable
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteUIBackup
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteUI
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStart
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCompareSaveData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfResolutionRxToTx
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetAlarmOnOffAPP
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetPir
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetLightStatus
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetCAStatus
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowMaskAreaMode
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckLightManualSwitchStatus
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCAlarm
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckAlarmManualSwitchStatus
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PStatueToRF
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PPassword
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPlaybackStop
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSetParse
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSetProgram
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawVideoTime
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting_Task
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimezone
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIP
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSetting
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawResolution
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawRECMode
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMotionSensitivity
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawDateTime
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraOnOff
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraAlarmOnOff
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawBrightness
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetMotionStatusAPP
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetLightOnOffAPP
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIPNetworkTest
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[60]"></a>Save_UI_Setting_Task</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ui.o(i.Save_UI_Setting_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = Save_UI_Setting_Task &rArr; Save_UI_Setting &rArr; spiWriteUIBackup &rArr; spiWrite &rArr; spi4ByteWrite &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[407]"></a>SendConnectErrorCode_inner</STRONG> (ARM, 432 bytes, Stack size 1544 bytes, iotcapis.o(i.SendConnectErrorCode_inner))
<BR><BR>[Stack]<UL><LI>Max Depth = 3360 + Unknown Stack Size
<LI>Call Chain = SendConnectErrorCode_inner &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_get_content
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_SendErrorCode
</UL>

<P><STRONG><a name="[3e9]"></a>SendConnectResult</STRONG> (ARM, 672 bytes, Stack size 1576 bytes, iotcapis.o(i.SendConnectResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 3392 + Unknown Stack Size
<LI>Call Chain = SendConnectResult &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_get_content
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check_Client
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_SESSION_INFO2
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_RR
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_R
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH_R_3
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[4d2]"></a>SendVideoFrameData</STRONG> (ARM, 408 bytes, Stack size 56 bytes, tutk_av_sample.o(i.SendVideoFrameData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4976 + Unknown Stack Size
<LI>Call Chain = SendVideoFrameData &rArr; avSendFrameData &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendFrameData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remoteplayback_busy
</UL>

<P><STRONG><a name="[3c8]"></a>SessionTaskCleanAllNodes</STRONG> (ARM, 80 bytes, Stack size 16 bytes, iotcapis.o(i.SessionTaskCleanAllNodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = SessionTaskCleanAllNodes &rArr; tutk_TaskMng_Delete &rArr; tutk_TaskMng_Purge &rArr; tutk_bst_walk_purge &rArr;  tutk_bst_walk_purge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Delete
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_DeInitialize
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Close
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
</UL>

<P><STRONG><a name="[3eb]"></a>SessionTaskCleanNodesWithType</STRONG> (ARM, 264 bytes, Stack size 24 bytes, iotcapis.o(i.SessionTaskCleanNodesWithType))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = SessionTaskCleanNodesWithType &rArr; tutk_TaskMng_Delete &rArr; tutk_TaskMng_Purge &rArr; tutk_bst_walk_purge &rArr;  tutk_bst_walk_purge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Delete
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check_Client
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_SESSION_INFO2
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_RR
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_R
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[42e]"></a>SessionTaskDeleteNode</STRONG> (ARM, 164 bytes, Stack size 24 bytes, iotcapis.o(i.SessionTaskDeleteNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = SessionTaskDeleteNode &rArr; tutk_TaskMng_Delete &rArr; tutk_TaskMng_Purge &rArr; tutk_bst_walk_purge &rArr;  tutk_bst_walk_purge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Delete
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceSessionRecyclingTask
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPRelaySessionInfoRequestTaskCB
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LanSearchPrecheckRTaskCB
</UL>

<P><STRONG><a name="[4e5]"></a>SetLwIP</STRONG> (ARM, 696 bytes, Stack size 32 bytes, lwipentry.o(i.SetLwIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = SetLwIP &rArr; dhcp_start &rArr; dhcp_discover &rArr; autoip_start &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_LwIPEntry
</UL>

<P><STRONG><a name="[6c1]"></a>SetLwipBuf</STRONG> (ARM, 12 bytes, Stack size 0 bytes, porting.o(i.SetLwipBuf))
<BR><BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMemoryPool
</UL>

<P><STRONG><a name="[6c3]"></a>SetLwipRamHeap</STRONG> (ARM, 12 bytes, Stack size 0 bytes, porting.o(i.SetLwipRamHeap))
<BR><BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMemoryPool
</UL>

<P><STRONG><a name="[933]"></a>SetNetworkInfo</STRONG> (ARM, 132 bytes, Stack size 4 bytes, lwipentry.o(i.SetNetworkInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SetNetworkInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Network
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Dynamic_ON
</UL>

<P><STRONG><a name="[4c8]"></a>Set_SD2068_RTC</STRONG> (ARM, 528 bytes, Stack size 32 bytes, i2c.o(i.Set_SD2068_RTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Set_SD2068_RTC &rArr; i2cWrite_SD2068 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite_SD2068
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_SD2068
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_GMT_Time
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcSetDefaultTime
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_GMT_Time
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD2068_RTC_Init
</UL>

<P><STRONG><a name="[395]"></a>Start_P2P_Session</STRONG> (ARM, 2052 bytes, Stack size 48 bytes, tutk_av_sample.o(i.Start_P2P_Session))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = Start_P2P_Session &rArr; rfiu_SetRXOpMode_1 &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoStopOneCh
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoOneCh
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetRXOpMode_1
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelMpeg4SetVideoFrameRate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[4ed]"></a>Stop_P2P_Session</STRONG> (ARM, 200 bytes, Stack size 16 bytes, tutk_av_sample.o(i.Stop_P2P_Session), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[4ee]"></a>SyncPSHeader_RF</STRONG> (ARM, 460 bytes, Stack size 40 bytes, wraprf.o(i.SyncPSHeader_RF), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_RF_SetEvt
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[13e]"></a>SysTimerTask</STRONG> (ARM, 160 bytes, Stack size 0 bytes, timer.o(i.SysTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = SysTimerTask &rArr; timer_1s_IntHandler &rArr; RTC_Get_GMT_Time &rArr; Set_SD2068_RTC &rArr; i2cWrite_SD2068 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerWaitForInt
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDeadLockMonitor
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_50ms_IntHandler
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_500ms_IntHandler
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_25ms_IntHandler
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_200ms_IntHandler
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1s_IntHandler
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_100ms_IntHandler
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_hub
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_hid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.timerInit)
</UL>
<P><STRONG><a name="[13f]"></a>SysTimerTickTask</STRONG> (ARM, 36 bytes, Stack size 0 bytes, timer.o(i.SysTimerTickTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = SysTimerTickTask &rArr; marsTimerWaitForTickInt &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerWaitForTickInt
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.timerInit)
</UL>
<P><STRONG><a name="[3ff]"></a>TConnManager_create</STRONG> (ARM, 300 bytes, Stack size 32 bytes, tconn_manager.o(i.TConnManager_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = TConnManager_create &rArr; tlistNew &rArr; monopool_alloc &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexInit
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_convert_error
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlistNew
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Initialize2
</UL>

<P><STRONG><a name="[430]"></a>TConnection_new</STRONG> (ARM, 412 bytes, Stack size 48 bytes, tconnection.o(i.TConnection_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = TConnection_new &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_convert_error
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxConnMgr_createNewConnection
</UL>

<P><STRONG><a name="[197]"></a>TObject_decRef</STRONG> (ARM, 52 bytes, Stack size 8 bytes, tobject.o(i.TObject_decRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TObject_decRef
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tconn_manager.o(.constdata)
<LI> tconnection.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>TObject_incRef</STRONG> (ARM, 20 bytes, Stack size 0 bytes, tobject.o(i.TObject_incRef))
<BR>[Address Reference Count : 2]<UL><LI> tconn_manager.o(.constdata)
<LI> tconnection.o(.constdata)
</UL>
<P><STRONG><a name="[506]"></a>TV_init</STRONG> (ARM, 3140 bytes, Stack size 40 bytes, idu.o(i.TV_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TV_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTurnOnTVDAC
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackMode
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetOutputMode
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduSwitchNTSCPAL
</UL>

<P><STRONG><a name="[8e]"></a>T_LwIPEntry</STRONG> (ARM, 568 bytes, Stack size 8 bytes, lwipentry.o(i.T_LwIPEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784 + Unknown Stack Size
<LI>Call Chain = T_LwIPEntry &rArr; ntpdate &rArr; uiSetRfTimeRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpdate
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwipBufInit
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Time_To_Second
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLwIP
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phywrite16
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyread16
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_duplex_speed
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_fw_ver_net
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftmac110.o(i.FTMAC110_main)
</UL>
<P><STRONG><a name="[149]"></a>Task_Listen</STRONG> (ARM, 976 bytes, Stack size 136 bytes, tutk_av_sample.o(i.Task_Listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 3600 + Unknown Stack Size
<LI>Call Chain = Task_Listen &rArr; avServStart &rArr; AV_SendErrorCode &rArr; IOTC_SendErrorCode &rArr; SendConnectErrorCode_inner &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PImageLevel
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Set_Partial_Encryption
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Close
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Listen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tutk_av_sample.o(i.tutk_av_sample)
</UL>
<P><STRONG><a name="[147]"></a>Task_Login</STRONG> (ARM, 312 bytes, Stack size 8 bytes, tutk_av_sample.o(i.Task_Login))
<BR><BR>[Stack]<UL><LI>Max Depth = 4240 + Unknown Stack Size
<LI>Call Chain = Task_Login &rArr; IOTC_Device_Login &rArr; _IOTC_Check_Server &rArr; _IOTC_SendHello1 &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tutk_av_sample.o(i.tutk_av_sample)
</UL>
<P><STRONG><a name="[91]"></a>Task_Speaker</STRONG> (ARM, 584 bytes, Stack size 56 bytes, tutk_av_sample.o(i.Task_Speaker))
<BR><BR>[Stack]<UL><LI>Max Depth = 8440 + Unknown Stack Size
<LI>Call Chain = Task_Speaker &rArr; avCheckAudioBuf &rArr; avRecvFrameData_new &rArr; AVInfo_ResendReq &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvAudioData
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckAudioBuf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tutk_av_sample.o(i.Handle_IOCTRL_Cmd)
</UL>
<P><STRONG><a name="[92]"></a>Task_remote_file_playback</STRONG> (ARM, 2196 bytes, Stack size 120 bytes, tutk_av_sample.o(i.Task_remote_file_playback))
<BR><BR>[Stack]<UL><LI>Max Depth = 5096 + Unknown Stack Size
<LI>Call Chain = Task_remote_file_playback &rArr; SendVideoFrameData &rArr; avSendFrameData &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoDuration
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetEvt
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrlWithTimeout
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServResetBuffer
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avResendBufUsageRate
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateH264Header
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoFrameData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tutk_av_sample.o(i.Handle_IOCTRL_Cmd)
</UL>
<P><STRONG><a name="[4bc]"></a>TcpConnect2</STRONG> (ARM, 692 bytes, Stack size 112 bytes, tcp_client_api.o(i.TcpConnect2))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = TcpConnect2 &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PSendEvent
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
</UL>

<P><STRONG><a name="[4be]"></a>TcpSendAll</STRONG> (ARM, 68 bytes, Stack size 24 bytes, tcp_client_api.o(i.TcpSendAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = TcpSendAll &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PSendEvent
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
</UL>

<P><STRONG><a name="[4bd]"></a>TcpSetSendTimeout</STRONG> (ARM, 56 bytes, Stack size 16 bytes, tcp_client_api.o(i.TcpSetSendTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = TcpSetSendTimeout &rArr; lwip_setsockopt &rArr; sys_mutex_lock &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PSendEvent
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
</UL>

<P><STRONG><a name="[7d3]"></a>TimerGetTimerCounter</STRONG> (ARM, 128 bytes, Stack size 0 bytes, timer.o(i.TimerGetTimerCounter))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_WrapRx_Task_UnitX
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
</UL>

<P><STRONG><a name="[523]"></a>TimerProjectTimerInit</STRONG> (ARM, 236 bytes, Stack size 16 bytes, timer_project.o(i.TimerProjectTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = TimerProjectTimerInit &rArr; marsTimerCountEnable &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerPwmOpen
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerInterruptEnable
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerCountWrite
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerCountEnable
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
</UL>

<P><STRONG><a name="[546]"></a>TimerProjectWDTResetCount</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_project.o(i.TimerProjectWDTResetCount))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
</UL>

<P><STRONG><a name="[529]"></a>Timer_IR_TX</STRONG> (ARM, 192 bytes, Stack size 16 bytes, timer.o(i.Timer_IR_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Timer_IR_TX &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerOpen
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerInterruptEnable
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerCountWrite
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerCountPause
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerCountEnable
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerConfig
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerClose
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[516]"></a>TmrCfgFnct</STRONG> (ARM, 48 bytes, Stack size 16 bytes, tmr.o(i.TmrCfgFnct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = TmrCfgFnct
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrlWithTimeout
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
</UL>

<P><STRONG><a name="[515]"></a>TmrInit</STRONG> (ARM, 88 bytes, Stack size 8 bytes, tmr.o(i.TmrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = TmrInit &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
</UL>

<P><STRONG><a name="[4e9]"></a>TmrReset</STRONG> (ARM, 40 bytes, Stack size 8 bytes, tmr.o(i.TmrReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = TmrReset
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowOnlineUserNum
</UL>

<P><STRONG><a name="[517]"></a>TmrSetT</STRONG> (ARM, 44 bytes, Stack size 16 bytes, tmr.o(i.TmrSetT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = TmrSetT
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrlWithTimeout
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
</UL>

<P><STRONG><a name="[4ea]"></a>TmrStart</STRONG> (ARM, 40 bytes, Stack size 8 bytes, tmr.o(i.TmrStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = TmrStart
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrlWithTimeout
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowOnlineUserNum
</UL>

<P><STRONG><a name="[52d]"></a>TmrStop</STRONG> (ARM, 40 bytes, Stack size 8 bytes, tmr.o(i.TmrStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = TmrStop
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrlWithTimeout
</UL>

<P><STRONG><a name="[530]"></a>UartCmdParse</STRONG> (ARM, 1760 bytes, Stack size 40 bytes, uart.o(i.UartCmdParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4816 + Unknown Stack Size
<LI>Call Chain = UartCmdParse &rArr; ntpdate &rArr; uiSetRfTimeRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_Net_SetEvt
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpdate
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTP_Switch
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_P2P_info
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite_SENSOR
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_SENSOR
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartCmdTask
</UL>

<P><STRONG><a name="[535]"></a>UartDumpReg</STRONG> (ARM, 240 bytes, Stack size 16 bytes, uart.o(i.UartDumpReg), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[536]"></a>UartFillReg</STRONG> (ARM, 260 bytes, Stack size 24 bytes, uart.o(i.UartFillReg), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[537]"></a>UartReadI2CReg</STRONG> (ARM, 88 bytes, Stack size 8 bytes, uart.o(i.UartReadI2CReg), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[538]"></a>UartReadReg</STRONG> (ARM, 80 bytes, Stack size 8 bytes, uart.o(i.UartReadReg), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[539]"></a>UartReadSensorALLReg</STRONG> (ARM, 164 bytes, Stack size 16 bytes, uart.o(i.UartReadSensorALLReg), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_SENSOR
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[53a]"></a>UartReadSensorReg</STRONG> (ARM, 268 bytes, Stack size 16 bytes, uart.o(i.UartReadSensorReg), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_SENSOR
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>

<P><STRONG><a name="[53b]"></a>UartWriteI2CReg</STRONG> (ARM, 100 bytes, Stack size 16 bytes, uart.o(i.UartWriteI2CReg), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[53c]"></a>UartWriteReg</STRONG> (ARM, 96 bytes, Stack size 16 bytes, uart.o(i.UartWriteReg), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[53d]"></a>UartWriteSensorReg</STRONG> (ARM, 124 bytes, Stack size 16 bytes, uart.o(i.UartWriteSensorReg), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite_SENSOR
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[53e]"></a>UnpackPS_RF</STRONG> (ARM, 1772 bytes, Stack size 40 bytes, wraprf.o(i.UnpackPS_RF))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = UnpackPS_RF &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpu_ByteMemcpy (via Veneer)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_WrapRx_Task_UnitX
</UL>

<P><STRONG><a name="[4d1]"></a>UpdateH264Header</STRONG> (ARM, 344 bytes, Stack size 20 bytes, tutk_av_sample.o(i.UpdateH264Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UpdateH264Header
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remoteplayback_busy
</UL>

<P><STRONG><a name="[3fd]"></a>UpdateLocalNetworkInfo</STRONG> (ARM, 216 bytes, Stack size 24 bytes, iotcapis.o(i.UpdateLocalNetworkInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = UpdateLocalNetworkInfo &rArr; time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_rand
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Initialize2
</UL>

<P><STRONG><a name="[888]"></a>UpdateMAYONAlarmStatus</STRONG> (ARM, 16 bytes, Stack size 0 bytes, tutk_av_sample.o(i.UpdateMAYONAlarmStatus))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetAlarmStatusAPP
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetCAStatus
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckAlarmManualSwitchStatus
</UL>

<P><STRONG><a name="[897]"></a>UpdateMAYONLightStatus</STRONG> (ARM, 16 bytes, Stack size 0 bytes, tutk_av_sample.o(i.UpdateMAYONLightStatus))
<BR><BR>[Called By]<UL><LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetLightStatus
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckLightManualSwitchStatus
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetLightStatusAPP
</UL>

<P><STRONG><a name="[88e]"></a>UpdateMAYONTXStatus</STRONG> (ARM, 16 bytes, Stack size 0 bytes, tutk_av_sample.o(i.UpdateMAYONTXStatus))
<BR><BR>[Called By]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCRec
</UL>

<P><STRONG><a name="[68]"></a>Upgrade_fw_net</STRONG> (ARM, 180 bytes, Stack size 40 bytes, tutk_av_sample.o(i.Upgrade_fw_net))
<BR><BR>[Stack]<UL><LI>Max Depth = 4296 + Unknown Stack Size
<LI>Call Chain = Upgrade_fw_net &rArr; GetFile &rArr; ispUpdateAllload_Net &rArr; osdDrawISPNow &rArr; osdDrawPreviewIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[542]"></a>VideoCodecInit</STRONG> (ARM, 320 bytes, Stack size 16 bytes, videocodec_common.o(i.VideoCodecInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = VideoCodecInit &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfInit
</UL>

<P><STRONG><a name="[bd]"></a>VideoTask</STRONG> (ARM, 1512 bytes, Stack size 8 bytes, videocodec_common.o(i.VideoTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = VideoTask &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysISU_enable
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isuPlayback_av
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> videocodec_common.o(i.VideoCodecInit)
</UL>
<P><STRONG><a name="[2f2]"></a>WDT_Reset_Count</STRONG> (ARM, 40 bytes, Stack size 8 bytes, timer.o(i.WDT_Reset_Count))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_Reset_Count
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerProjectWDTResetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRF
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spibootCodeUpdate
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiallCodeUpdate
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteUIBackup
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteUI
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteNet
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiUI_OpenFB_ByIndex
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadVersion
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadUIBackup
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadUI
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadRF_ID
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadNet
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadFBSetting
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadData
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCodeUpdate
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCmpWriteData
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCmpBootWriteData
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareUpdateFlow
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetUpdateFlow
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__find_fsl
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_IoCtl
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FOpen
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_100ms_IntHandler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[547]"></a>WDT_init</STRONG> (ARM, 72 bytes, Stack size 8 bytes, timer.o(i.WDT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_init
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysWDT_enable
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysWDT_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareUpdateFlow
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetUpdateFlow
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[54a]"></a>WDT_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, timer.o(i.WDT_off))
<BR><BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysWDT_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareUpdateFlow
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetUpdateFlow
</UL>

<P><STRONG><a name="[54b]"></a>WM8940_AdjustSpeakerVolume</STRONG> (ARM, 128 bytes, Stack size 32 bytes, i2c.o(i.WM8940_AdjustSpeakerVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WM8940_AdjustSpeakerVolume &rArr; i2cWrite_WM8940 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite_WM8940
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Audio_Vol
</UL>

<P><STRONG><a name="[448]"></a>WM8940_MicVol_FadeIn</STRONG> (ARM, 40 bytes, Stack size 8 bytes, i2c.o(i.WM8940_MicVol_FadeIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = WM8940_MicVol_FadeIn &rArr; i2cWrite_WM8940 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite_WM8940
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicVol_FadeIn
</UL>

<P><STRONG><a name="[44a]"></a>WM8940_MicVol_FadeOut</STRONG> (ARM, 44 bytes, Stack size 8 bytes, i2c.o(i.WM8940_MicVol_FadeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = WM8940_MicVol_FadeOut &rArr; i2cWrite_WM8940 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite_WM8940
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicVol_FadeOut
</UL>

<P><STRONG><a name="[54d]"></a>WM8940_SpeakerMute</STRONG> (ARM, 12 bytes, Stack size 0 bytes, i2c.o(i.WM8940_SpeakerMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = WM8940_SpeakerMute &rArr; i2cWrite_WM8940 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite_WM8940
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Audio_Vol
</UL>

<P><STRONG><a name="[54e]"></a>WaitJpegEncComplete</STRONG> (ARM, 116 bytes, Stack size 8 bytes, jpeg.o(i.WaitJpegEncComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = WaitJpegEncComplete &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJpegRst
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureImage_OnRFRx
</UL>

<P><STRONG><a name="[54f]"></a>WaitlwIPInitDone2</STRONG> (ARM, 68 bytes, Stack size 8 bytes, lwipentry.o(i.WaitlwIPInitDone2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[550]"></a>Write_protet</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sdc.o(i.Write_protet))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Write_protet &rArr; sysGetStorageSel &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageSel
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlayback_Delete_File
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDirInit
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupDirInit
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupInit
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupFormat
</UL>

<P><STRONG><a name="[551]"></a>_BinaryTreeEmpty</STRONG> (ARM, 56 bytes, Stack size 8 bytes, block_fifo.o(i._BinaryTreeEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = _BinaryTreeEmpty &rArr;  _BinaryTreeEmpty (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeEmpty
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRelease
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoEmpty
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeEmpty
</UL>

<P><STRONG><a name="[552]"></a>_BinaryTreeGetFrm</STRONG> (ARM, 460 bytes, Stack size 8 bytes, block_fifo.o(i._BinaryTreeGetFrm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = _BinaryTreeGetFrm &rArr;  _BinaryTreeGetFrm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeGetFrm
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRemoveFrameByFrmNo
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRemoveAllFramesLessThanFrmNo
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRemoveAllFramesBiggerThanFrmNo
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetByFrmNo
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeGetFrm
</UL>

<P><STRONG><a name="[553]"></a>_BinaryTreeGetPos</STRONG> (ARM, 596 bytes, Stack size 20 bytes, block_fifo.o(i._BinaryTreeGetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + In Cycle
<LI>Call Chain = _BinaryTreeGetPos &rArr;  _BinaryTreeGetPos (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeGetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetByFrmNoPos
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGet
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeGetPos
</UL>

<P><STRONG><a name="[554]"></a>_BinaryTreeInsertBlock</STRONG> (ARM, 420 bytes, Stack size 24 bytes, block_fifo.o(i._BinaryTreeInsertBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = _BinaryTreeInsertBlock &rArr;  _BinaryTreeInsertBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeInsertBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoPutByPassSameBlock
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoPut
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeInsertBlock
</UL>

<P><STRONG><a name="[555]"></a>_BinaryTreeInsertFrame</STRONG> (ARM, 172 bytes, Stack size 4 bytes, block_fifo.o(i._BinaryTreeInsertFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + In Cycle
<LI>Call Chain = _BinaryTreeInsertFrame &rArr;  _BinaryTreeInsertFrame (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeInsertFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoPutFrmNo
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeInsertFrame
</UL>

<P><STRONG><a name="[556]"></a>_BinaryTreeSearch</STRONG> (ARM, 48 bytes, Stack size 0 bytes, block_fifo.o(i._BinaryTreeSearch))
<BR><BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoSeekByFrmNoPos
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetLostPos
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetInfoByFrmNo
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoExist
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoCountByFrmNo
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeSearch
</UL>

<P><STRONG><a name="[557]"></a>_BinaryTreeSearchMax</STRONG> (ARM, 36 bytes, Stack size 0 bytes, block_fifo.o(i._BinaryTreeSearchMax))
<BR><BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeSearchMax
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRemoveAllFramesBiggerThanFrmNo
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetMaxFrmNo
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeSearchMax
</UL>

<P><STRONG><a name="[558]"></a>_BinaryTreeSearchMin</STRONG> (ARM, 36 bytes, Stack size 0 bytes, block_fifo.o(i._BinaryTreeSearchMin))
<BR><BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeSearchMin
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRemoveAllFramesLessThanFrmNo
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetMinFrmNo
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGet
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeSearchMin
</UL>

<P><STRONG><a name="[559]"></a>_CheckDeviceWANAddrLocked</STRONG> (ARM, 372 bytes, Stack size 56 bytes, iotcapis.o(i._CheckDeviceWANAddrLocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = _CheckDeviceWANAddrLocked &rArr; iotc_netaddr_put_content &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_put_content
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[330]"></a>_FS_LB_GetDriverIndex</STRONG> (ARM, 72 bytes, Stack size 0 bytes, lb_misc.o(i._FS_LB_GetDriverIndex))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_MBR_format
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_status
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_write
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_read
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_ioctl
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_write
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_read
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_WRretry
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_RDretry
</UL>

<P><STRONG><a name="[32c]"></a>_FS_MBR_format</STRONG> (ARM, 704 bytes, Stack size 40 bytes, fat_ioct.o(i._FS_MBR_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = _FS_MBR_format &rArr; FS__lb_sin_write &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_LB_GetDriverIndex
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_write
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTotalBlockCount
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ioctl
</UL>

<P><STRONG><a name="[32b]"></a>_FS_fat_create_file</STRONG> (ARM, 1552 bytes, Stack size 120 bytes, fat_open.o(i._FS_fat_create_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = _FS_fat_create_file &rArr; FSFATNewEntry &rArr; FSFATAllocateFreeCluster &rArr; FSFATOrderFreeCluster &rArr; FSFATFindFreeCluster &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_write
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_dir_realsec
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATNewEntry
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strncpy
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strlen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fopen
</UL>

<P><STRONG><a name="[32a]"></a>_FS_fat_find_file</STRONG> (ARM, 696 bytes, Stack size 64 bytes, fat_open.o(i._FS_fat_find_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = _FS_fat_find_file &rArr; FS__fat_dir_realsec &rArr;  FS__fat_find_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_dir_realsec
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_memcpy
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strncmp
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strlen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_fopen
</UL>

<P><STRONG><a name="[32d]"></a>_FS_fat_format</STRONG> (ARM, 2436 bytes, Stack size 56 bytes, fat_ioct.o(i._FS_fat_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = _FS_fat_format &rArr; FS__lb_sin_write &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8_arm
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSPlaybackCacheBufferReset
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_write
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_write
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMalloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFree
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTotalBlockCount
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ioctl
</UL>

<P><STRONG><a name="[40b]"></a>_GetSendPath</STRONG> (ARM, 92 bytes, Stack size 16 bytes, iotcapis.o(i._GetSendPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = _GetSendPath &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Close
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_thread_Session_Alive
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_RLYClose
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_P2PClose
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check_Ex
</UL>

<P><STRONG><a name="[3d5]"></a>_IOTC_Check_Server</STRONG> (ARM, 256 bytes, Stack size 96 bytes, iotcapis.o(i._IOTC_Check_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 3384 + Unknown Stack Size
<LI>Call Chain = _IOTC_Check_Server &rArr; _IOTC_SendHello1 &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_get_content
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_SendHello1
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
</UL>

<P><STRONG><a name="[55e]"></a>_IOTC_LAN_Connection_Check</STRONG> (ARM, 116 bytes, Stack size 24 bytes, iotcapis.o(i._IOTC_LAN_Connection_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = _IOTC_LAN_Connection_Check &rArr; _SetSendPath &rArr; iotc_netaddr_put_content &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSendPath
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[4b8]"></a>_IOTC_Packet_Handler</STRONG> (ARM, 13824 bytes, Stack size 1480 bytes, iotcapis.o(i._IOTC_Packet_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 6424 + Unknown Stack Size
<LI>Call Chain = _IOTC_Packet_Handler &rArr; IOTC_Handler_MSG_RLY_REQUEST_R2 &rArr; _UpdateUdpServerRelayRequestRStatus &rArr; _UdpRelaySessionInfoRequestServer &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Update_VPGServerList
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Update_DeviceInfo
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_VPGServerList
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_Session_ByRelaySID
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_SessionByClientRandomID
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_Session
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_PreSessionByClientRandomID
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_OnConnectSessionByUID
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_DeviceInfo
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RemoteSiteClose_Session
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IsExceedSession
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Get_Free_Session
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Get_Free_PreSession
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateUdpServerRelayRequestRStatus
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateUdpServerList
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateServerProtocolVersion
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateSendPathAddres
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateLanDeviceList
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateDeviceStatus
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSendPath
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResponseTimeTest
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResponseTimeAck
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Rly_Knock_R
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Knock_R
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Knock
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_SendDeviceLogin1
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check_Client
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_GetLocalIPAddr
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Check_Nat_Type
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLanSearchInfoList
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_SESSION_INFO2
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_REQUEST_R2
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_RR
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_R
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH_R_3
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanDeviceVPG
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRecentClosedClientRandomID
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_rand
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Delete
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Create
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIOTC_Feature_Bitmap
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_sockaddr_to_ip_string
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_put_content
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Fill_ReadBuf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Punch_To
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_LAN_Connection_Check
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckDeviceWANAddrLocked
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskCleanNodesWithType
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectResult
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Update_Server_ProtoVer
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Check_Session_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PConnectionRecvCallback
</UL>

<P><STRONG><a name="[55d]"></a>_IOTC_SendHello1</STRONG> (ARM, 220 bytes, Stack size 1472 bytes, iotcapis.o(i._IOTC_SendHello1))
<BR><BR>[Stack]<UL><LI>Max Depth = 3288 + Unknown Stack Size
<LI>Call Chain = _IOTC_SendHello1 &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Check_Server
</UL>

<P><STRONG><a name="[562]"></a>_IOTC_Send_Punch_To</STRONG> (ARM, 376 bytes, Stack size 1560 bytes, iotcapis.o(i._IOTC_Send_Punch_To))
<BR><BR>[Stack]<UL><LI>Max Depth = 3376 + Unknown Stack Size
<LI>Call Chain = _IOTC_Send_Punch_To &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_sockaddr_to_ip_string
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_put_content
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[405]"></a>__ARM_common_memclr1_12_arm</STRONG> (ARM, 44 bytes, Stack size 0 bytes, usbmsc.o(i.__ARM_common_memclr1_12_arm))
<BR><BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Query_VPGServerList
</UL>

<P><STRONG><a name="[4c5]"></a>__ARM_common_memclr1_7_arm</STRONG> (ARM, 32 bytes, Stack size 0 bytes, ui_graph_project.o(i.__ARM_common_memclr1_7_arm))
<BR><BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSetting
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTime_Gmt_To_Local
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit (via Veneer)
</UL>

<P><STRONG><a name="[993]"></a>__ARM_common_memclr1_8_arm</STRONG> (ARM, 36 bytes, Stack size 0 bytes, usb_storage.o(i.__ARM_common_memclr1_8_arm))
<BR><BR>[Called By]<UL><LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stop_remove
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_get_info
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit (via Veneer)
</UL>

<P><STRONG><a name="[989]"></a>__ARM_common_memclr2_10_arm</STRONG> (ARM, 28 bytes, Stack size 0 bytes, usb-transfer.o(i.__ARM_common_memclr2_10_arm))
<BR><BR>[Called By]<UL><LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_keyboard_hid_probe
</UL>

<P><STRONG><a name="[4cc]"></a>__ARM_common_memclr2_6_arm</STRONG> (ARM, 20 bytes, Stack size 0 bytes, rtc.o(i.__ARM_common_memclr2_6_arm))
<BR><BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time_With_TmpCnt
</UL>

<P><STRONG><a name="[63b]"></a>__ARM_common_memclr4_10_arm</STRONG> (ARM, 20 bytes, Stack size 0 bytes, dhcp.o(i.__ARM_common_memclr4_10_arm))
<BR><BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mouse_hid_probe
</UL>

<P><STRONG><a name="[664]"></a>__ARM_common_memcpy1_6_arm</STRONG> (ARM, 52 bytes, Stack size 0 bytes, ui.o(i.__ARM_common_memcpy1_6_arm))
<BR><BR>[Called By]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiWriteNetworkIDFromFlash
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiReadNetworkIDFromFlash
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmac110_init
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetMAC_To_Flash
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_getallnetdev
</UL>

<P><STRONG><a name="[323]"></a>__ARM_common_memcpy1_8_arm</STRONG> (ARM, 68 bytes, Stack size 0 bytes, asf.o(i.__ARM_common_memcpy1_8_arm))
<BR><BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadHeaderObject
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDel
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDel
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_fat_format
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_SearchWholedir
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ScanWholedir
</UL>

<P><STRONG><a name="[5e4]"></a>__ARM_common_memcpy4_10_arm</STRONG> (ARM, 20 bytes, Stack size 0 bytes, dcffs.o(i.__ARM_common_memcpy4_10_arm))
<BR><BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFsInit
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupFsInit
</UL>

<P><STRONG><a name="[60c]"></a>__ARM_common_memcpy4_7_arm</STRONG> (ARM, 28 bytes, Stack size 0 bytes, dcffs.o(i.__ARM_common_memcpy4_7_arm))
<BR><BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFsInit
</UL>

<P><STRONG><a name="[5e3]"></a>__ARM_common_memcpy4_9_arm</STRONG> (ARM, 20 bytes, Stack size 0 bytes, dcffs.o(i.__ARM_common_memcpy4_9_arm))
<BR><BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFsInit
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupFsInit
</UL>

<P><STRONG><a name="[8eb]"></a>__ARM_common_memset1_4_arm</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ui_flow_project.o(i.__ARM_common_memset1_4_arm))
<BR><BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetBootSetting
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRFStatus
</UL>

<P><STRONG><a name="[238]"></a>__ARM_fpclassify</STRONG> (ARM, 48 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[56b]"></a>__Fill_ReadBuf</STRONG> (ARM, 320 bytes, Stack size 40 bytes, iotcapis.o(i.__Fill_ReadBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = __Fill_ReadBuf &rArr; monopool_alloc &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[4aa]"></a>__OS_MemFree</STRONG> (ARM, 300 bytes, Stack size 8 bytes, porting.o(i.__OS_MemFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __OS_MemFree &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQDelete
</UL>

<P><STRONG><a name="[587]"></a>___av_diff</STRONG> (ARM, 76 bytes, Stack size 0 bytes, avapis.o(i.___av_diff))
<BR><BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvAudioData
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
</UL>

<P><STRONG><a name="[575]"></a>__kernel_poly</STRONG> (ARM, 252 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[576]"></a>__mathlib_dbl_divzero</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[578]"></a>__mathlib_dbl_infnan2</STRONG> (ARM, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[579]"></a>__mathlib_dbl_invalid</STRONG> (ARM, 20 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[57a]"></a>__mathlib_dbl_overflow</STRONG> (ARM, 20 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[57c]"></a>__mathlib_dbl_underflow</STRONG> (ARM, 20 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1f1]"></a>_sys_exit</STRONG> (ARM, 4 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[248]"></a>_ttywrch</STRONG> (ARM, 24 bytes, Stack size 8 bytes, retarget.o(i._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ttywrch &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[59a]"></a>_uiOSDIconColor</STRONG> (ARM, 524 bytes, Stack size 48 bytes, ui_osd.o(i._uiOSDIconColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _uiOSDIconColor
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXYChColor
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIcon
</UL>

<P><STRONG><a name="[876]"></a>adcBatteryCheck</STRONG> (ARM, 8 bytes, Stack size 0 bytes, adc_project.o(i.adcBatteryCheck))
<BR><BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1s_IntHandler
</UL>

<P><STRONG><a name="[5a5]"></a>adcInit</STRONG> (ARM, 260 bytes, Stack size 8 bytes, adc_project.o(i.adcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = adcInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysVOICE_REC
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[5a6]"></a>adcInitDAC_Play</STRONG> (ARM, 104 bytes, Stack size 0 bytes, adc_project.o(i.adcInitDAC_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = adcInitDAC_Play &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5Reset
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavReadFile_PCM
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisReset
</UL>

<P><STRONG><a name="[ef]"></a>adcIntHandler</STRONG> (ARM, 144 bytes, Stack size 0 bytes, adc_project.o(i.adcIntHandler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[877]"></a>adcKeyPolling</STRONG> (ARM, 8 bytes, Stack size 0 bytes, adc_project.o(i.adcKeyPolling))
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_25ms_IntHandler
</UL>

<P><STRONG><a name="[8b6]"></a>adcSetADC_MICIN_PGA_Gain</STRONG> (ARM, 44 bytes, Stack size 0 bytes, adc_project.o(i.adcSetADC_MICIN_PGA_Gain))
<BR><BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[5a7]"></a>adcSetDAC_OutputGain</STRONG> (ARM, 136 bytes, Stack size 0 bytes, adc_project.o(i.adcSetDAC_OutputGain), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[5a8]"></a>alloc_txdes</STRONG> (ARM, 212 bytes, Stack size 16 bytes, ftmac110.o(i.alloc_txdes))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = alloc_txdes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmac110_init
</UL>

<P><STRONG><a name="[5a9]"></a>asfBurstReadIndexObject</STRONG> (ARM, 216 bytes, Stack size 16 bytes, asf.o(i.asfBurstReadIndexObject), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfRead
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGuid
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[5ab]"></a>asfInit</STRONG> (ARM, 96 bytes, Stack size 8 bytes, asf.o(i.asfInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = asfInit &rArr; memset_hw &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisInit
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5Init
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoCodecInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[6bc]"></a>asfPausePlayback</STRONG> (ARM, 40 bytes, Stack size 0 bytes, asf.o(i.asfPausePlayback))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisTask
</UL>

<P><STRONG><a name="[5ae]"></a>asfPlaybackVideoStop</STRONG> (ARM, 284 bytes, Stack size 8 bytes, asf.o(i.asfPlaybackVideoStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = asfPlaybackVideoStop &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPlaybackStop
</UL>

<P><STRONG><a name="[5af]"></a>asfReadFile</STRONG> (ARM, 10228 bytes, Stack size 560 bytes, asf.o(i.asfReadFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = asfReadFile &rArr; dcfClose &rArr; FS_LB_Cache_Clean &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfRead
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOpen
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5StopPlay
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfTell
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSeek
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Sem
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpeg4SuspendTask
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpeg4ResumeTask
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisSuspendTask
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisResumeTask
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5Reset
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackFrame
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGuid
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadVideoPayload
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadPayloadHeader
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadPacketHeader
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadHeaderObject
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
</UL>

<P><STRONG><a name="[5b0]"></a>asfReadHeaderObject</STRONG> (ARM, 1696 bytes, Stack size 64 bytes, asf.o(i.asfReadHeaderObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = asfReadHeaderObject &rArr; iduPlaybackMode &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackMode
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5SetPlayFormat
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8_arm
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSplitFile
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
</UL>

<P><STRONG><a name="[5b6]"></a>asfReadPacketHeader</STRONG> (ARM, 980 bytes, Stack size 24 bytes, asf.o(i.asfReadPacketHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = asfReadPacketHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSplitFile
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
</UL>

<P><STRONG><a name="[5b7]"></a>asfReadPayloadHeader</STRONG> (ARM, 1572 bytes, Stack size 36 bytes, asf.o(i.asfReadPayloadHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = asfReadPayloadHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSplitFile
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
</UL>

<P><STRONG><a name="[5b8]"></a>asfReadVideoPayload</STRONG> (ARM, 1808 bytes, Stack size 56 bytes, asf.o(i.asfReadVideoPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = asfReadVideoPayload &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpeg4ResumeTask
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackFrame
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
</UL>

<P><STRONG><a name="[5bc]"></a>asfSetVideoSectionTime</STRONG> (ARM, 48 bytes, Stack size 8 bytes, asf.o(i.asfSetVideoSectionTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = asfSetVideoSectionTime &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Section
</UL>

<P><STRONG><a name="[5bd]"></a>asfSplitFile</STRONG> (ARM, 1708 bytes, Stack size 536 bytes, asf.o(i.asfSplitFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = asfSplitFile &rArr; dcfClose &rArr; FS_LB_Cache_Clean &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfRead
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOpen
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGuid
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSplitVideoPayload
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadPayloadHeader
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadPacketHeader
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadHeaderObject
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_P2P_Readfile
</UL>

<P><STRONG><a name="[5be]"></a>asfSplitVideoPayload</STRONG> (ARM, 1020 bytes, Stack size 56 bytes, asf.o(i.asfSplitVideoPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = asfSplitVideoPayload &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSplitFile
</UL>

<P><STRONG><a name="[6d3]"></a>autoip_accept_packet</STRONG> (ARM, 40 bytes, Stack size 0 bytes, autoip.o(i.autoip_accept_packet))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[5bf]"></a>autoip_arp_reply</STRONG> (ARM, 296 bytes, Stack size 40 bytes, autoip.o(i.autoip_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = autoip_arp_reply &rArr; autoip_start &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[76d]"></a>autoip_network_changed</STRONG> (ARM, 136 bytes, Stack size 0 bytes, autoip.o(i.autoip_network_changed))
<BR><BR>[Called By]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
</UL>

<P><STRONG><a name="[5c0]"></a>autoip_start</STRONG> (ARM, 548 bytes, Stack size 24 bytes, autoip.o(i.autoip_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = autoip_start &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_reply
</UL>

<P><STRONG><a name="[5c4]"></a>autoip_stop</STRONG> (ARM, 68 bytes, Stack size 8 bytes, autoip.o(i.autoip_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = autoip_stop &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[17b]"></a>autoip_tmr</STRONG> (ARM, 396 bytes, Stack size 48 bytes, autoip.o(i.autoip_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = autoip_tmr &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[27c]"></a>avCalu</STRONG> (ARM, 2020 bytes, Stack size 192 bytes, avapis.o(i.avCalu))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = avCalu &rArr; avCaluDoStatistics &rArr; tutk_block_FifoSize &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoSize
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCaluDoStatistics
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCaluClientDoStatistics
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendFrameData
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvAudioData
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendAudioDataResend
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Request_Resend
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVInfo_ResendReq
</UL>

<P><STRONG><a name="[5c6]"></a>avCaluClientDoStatistics</STRONG> (ARM, 400 bytes, Stack size 40 bytes, avapis.o(i.avCaluClientDoStatistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = avCaluClientDoStatistics &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCalu
</UL>

<P><STRONG><a name="[5c5]"></a>avCaluDoStatistics</STRONG> (ARM, 364 bytes, Stack size 48 bytes, avapis.o(i.avCaluDoStatistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = avCaluDoStatistics &rArr; tutk_block_FifoSize &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoSize
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCalu
</UL>

<P><STRONG><a name="[51b]"></a>avCheckAudioBuf</STRONG> (ARM, 704 bytes, Stack size 2136 bytes, avapis.o(i.avCheckAudioBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8384 + Unknown Stack Size
<LI>Call Chain = avCheckAudioBuf &rArr; avRecvFrameData_new &rArr; AVInfo_ResendReq &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_unLock
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Speaker
</UL>

<P><STRONG><a name="[5c8]"></a>avCheckResendRequest</STRONG> (ARM, 384 bytes, Stack size 1360 bytes, avapis.o(i.avCheckResendRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 3632 + Unknown Stack Size
<LI>Call Chain = avCheckResendRequest &rArr; tutk_block_FifoGetLostPos &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_Release
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoPutByPassSameBlock
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetLostPos
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetByFrmNo
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoCountByFrmNo
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_Alloc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
</UL>

<P><STRONG><a name="[58c]"></a>avCleanAudioPreBuffer</STRONG> (ARM, 124 bytes, Stack size 24 bytes, avapis2.o(i.avCleanAudioPreBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = avCleanAudioPreBuffer &rArr; tutk_block_FifoEmpty &rArr; _BinaryTreeEmpty &rArr;  _BinaryTreeEmpty (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_Release
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doIOTypeInner
</UL>

<P><STRONG><a name="[58b]"></a>avCleanVideoPreBuffer</STRONG> (ARM, 132 bytes, Stack size 24 bytes, avapis2.o(i.avCleanVideoPreBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = avCleanVideoPreBuffer &rArr; tutk_block_FifoEmpty &rArr; _BinaryTreeEmpty &rArr;  _BinaryTreeEmpty (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_Release
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doIOTypeInner
</UL>

<P><STRONG><a name="[51a]"></a>avClientStart</STRONG> (ARM, 228 bytes, Stack size 48 bytes, avapis.o(i.avClientStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 5032 + Unknown Stack Size
<LI>Call Chain = avClientStart &rArr; avClientStart_inner &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AV_SendErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Speaker
</UL>

<P><STRONG><a name="[5c9]"></a>avClientStart_inner</STRONG> (ARM, 1348 bytes, Stack size 1512 bytes, avapis.o(i.avClientStart_inner))
<BR><BR>[Stack]<UL><LI>Max Depth = 4984 + Unknown Stack Size
<LI>Call Chain = avClientStart_inner &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpCodeBigEndianExchange
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculatSendPacketInterval
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unInitAVInfo
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initAVInfo
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_allocFreeAVIndex
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_rand
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_unLock
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Set_CloseCb
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Set_Channel_RcvCb
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Lock
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Channel_ON
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Channel_OFF
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_IsLiteMode
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Get_Remote_ProtocolVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart
</UL>

<P><STRONG><a name="[429]"></a>avClientStop</STRONG> (ARM, 200 bytes, Stack size 24 bytes, avapis.o(i.avClientStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = avClientStop &rArr; _unInitAVInfo &rArr; tutk_block_FifoRelease &rArr; _BinaryTreeEmpty &rArr;  _BinaryTreeEmpty (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unInitAVInfo
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Delete
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Set_CloseCb
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Set_Channel_RcvCb
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Channel_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kill_Task_Speaker
</UL>

<P><STRONG><a name="[50e]"></a>avGetAVApiVer</STRONG> (ARM, 8 bytes, Stack size 0 bytes, avapis.o(i.avGetAVApiVer))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
</UL>

<P><STRONG><a name="[c7]"></a>avIOTCSesstionCloseCB</STRONG> (ARM, 356 bytes, Stack size 56 bytes, avapis.o(i.avIOTCSesstionCloseCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = avIOTCSesstionCloseCB &rArr; _unInitAVInfo &rArr; tutk_block_FifoRelease &rArr; _BinaryTreeEmpty &rArr;  _BinaryTreeEmpty (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unInitAVInfo
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Delete
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Set_CloseCb
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Set_Channel_RcvCb
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Channel_OFF
</UL>
<BR>[Address Reference Count : 2]<UL><LI> avapis.o(i.avClientStart_inner)
<LI> avapis.o(i.avServStart)
</UL>
<P><STRONG><a name="[513]"></a>avInitialize</STRONG> (ARM, 272 bytes, Stack size 32 bytes, avapis.o(i.avInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = avInitialize &rArr; monopool_alloc &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_IsLiteMode
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
</UL>

<P><STRONG><a name="[51c]"></a>avRecvAudioData</STRONG> (ARM, 2164 bytes, Stack size 1384 bytes, avapis.o(i.avRecvAudioData))
<BR><BR>[Stack]<UL><LI>Max Depth = 7632 + Unknown Stack Size
<LI>Call Chain = avRecvAudioData &rArr; avRecvFrameData_new &rArr; AVInfo_ResendReq &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCalu
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___av_diff
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculatSendPacketInterval
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Scan_Slot_Data
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Retrive_Slot_Data
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Request_Resend
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_unLock
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Lock
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_IsLiteMode
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Speaker
</UL>

<P><STRONG><a name="[5c7]"></a>avRecvFrameData_new</STRONG> (ARM, 2200 bytes, Stack size 1416 bytes, avapis.o(i.avRecvFrameData_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 6248 + Unknown Stack Size
<LI>Call Chain = avRecvFrameData_new &rArr; AVInfo_ResendReq &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_Release
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRemoveAllFramesLessThanFrmNo
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetInfoByFrmNo
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetByFrmNo
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoCountByFrmNo
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoCount
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckResendRequest
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCalu
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Get_Empty_Slot
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Fill_Slot_Data
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVInfo_ResendReq
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_unLock
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Lock
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_IsLiteMode
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Check_Session_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvAudioData
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckAudioBuf
</UL>

<P><STRONG><a name="[385]"></a>avRecvIOCtrl</STRONG> (ARM, 580 bytes, Stack size 48 bytes, avapis.o(i.avRecvIOCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = avRecvIOCtrl &rArr; tutk_block_FifoGet &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_Release
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGet
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_IsLiteMode
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Check_Session_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[51e]"></a>avResendBufUsageRate</STRONG> (ARM, 140 bytes, Stack size 16 bytes, avapis.o(i.avResendBufUsageRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = avResendBufUsageRate &rArr; tutk_block_FifoSize &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoSize
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
</UL>

<P><STRONG><a name="[58e]"></a>avSendAudioDataResend</STRONG> (ARM, 552 bytes, Stack size 4200 bytes, avapis.o(i.avSendAudioDataResend))
<BR><BR>[Stack]<UL><LI>Max Depth = 7672 + Unknown Stack Size
<LI>Call Chain = avSendAudioDataResend &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCalu
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Scan_Slot_Data
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Retrive_Slot_Data
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
</UL>

<P><STRONG><a name="[4e4]"></a>avSendFrameData</STRONG> (ARM, 2260 bytes, Stack size 1448 bytes, avapis.o(i.avSendFrameData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4920 + Unknown Stack Size
<LI>Call Chain = avSendFrameData &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_Release
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoSize
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoSeekByFrmNoPos
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRemoveFrameByFrmNo
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoPut
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_Alloc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCalu
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_unLock
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Lock
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_IsLiteMode
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Check_Session_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoFrameData
</UL>

<P><STRONG><a name="[390]"></a>avSendIOCtrl</STRONG> (ARM, 1244 bytes, Stack size 1384 bytes, avapis.o(i.avSendIOCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4856 + Unknown Stack Size
<LI>Call Chain = avSendIOCtrl &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_IsLiteMode
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrlWithTimeout
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[4ec]"></a>avSendIOCtrlExit</STRONG> (ARM, 92 bytes, Stack size 0 bytes, avapis.o(i.avSendIOCtrlExit))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSendIOCtrl
</UL>

<P><STRONG><a name="[591]"></a>avSendVideoDataLost</STRONG> (ARM, 152 bytes, Stack size 1328 bytes, avapis.o(i.avSendVideoDataLost))
<BR><BR>[Stack]<UL><LI>Max Depth = 4800 + Unknown Stack Size
<LI>Call Chain = avSendVideoDataLost &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
</UL>

<P><STRONG><a name="[51d]"></a>avServResetBuffer</STRONG> (ARM, 1244 bytes, Stack size 1400 bytes, avapis.o(i.avServResetBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4872 + Unknown Stack Size
<LI>Call Chain = avServResetBuffer &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoEmpty
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOpCodeSupported
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculatSendPacketInterval
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_unLock
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
</UL>

<P><STRONG><a name="[397]"></a>avServSetResendSize</STRONG> (ARM, 76 bytes, Stack size 0 bytes, avapis.o(i.avServSetResendSize))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[281]"></a>avServStart</STRONG> (ARM, 1568 bytes, Stack size 64 bytes, avapis.o(i.avServStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 3464 + Unknown Stack Size
<LI>Call Chain = avServStart &rArr; AV_SendErrorCode &rArr; IOTC_SendErrorCode &rArr; SendConnectErrorCode_inner &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculatSendPacketInterval
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unInitAVInfo
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initAVInfo
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_allocFreeAVIndex
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AV_SendErrorCode
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_unLock
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Set_CloseCb
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Set_Channel_RcvCb
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Lock
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Channel_ON
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Channel_OFF
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_IsLiteMode
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Check_Session_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Listen
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remoteplayback_busy
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVServerStart
</UL>

<P><STRONG><a name="[2a9]"></a>avServStop</STRONG> (ARM, 168 bytes, Stack size 24 bytes, avapis.o(i.avServStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = avServStop &rArr; _unInitAVInfo &rArr; tutk_block_FifoRelease &rArr; _BinaryTreeEmpty &rArr;  _BinaryTreeEmpty (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unInitAVInfo
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Delete
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Set_CloseCb
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Set_Channel_RcvCb
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Channel_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Session_Status
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregedit_client_from_avsession
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remoteplayback_busy
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Session_Status
</UL>

<P><STRONG><a name="[676]"></a>bSwap16</STRONG> (ARM, 16 bytes, Stack size 0 bytes, general.o(i.bSwap16))
<BR><BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifFileInit
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifSetImageResolution
</UL>

<P><STRONG><a name="[9a]"></a>breakTimeCallBack</STRONG> (ARM, 204 bytes, Stack size 32 bytes, iotcapis.o(i.breakTimeCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = breakTimeCallBack &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iotcapis.o(i.IOTC_Initialize2)
</UL>
<P><STRONG><a name="[8af]"></a>brightness_read</STRONG> (ARM, 12 bytes, Stack size 0 bytes, i2c.o(i.brightness_read))
<BR><BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[8b0]"></a>brightness_write</STRONG> (ARM, 4 bytes, Stack size 0 bytes, i2c.o(i.brightness_write))
<BR><BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[50b]"></a>change_duplex_speed</STRONG> (ARM, 892 bytes, Stack size 48 bytes, ftmac110.o(i.change_duplex_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = change_duplex_speed &rArr; sysForceWDTtoReboot &rArr; spiReleaseFlashStatus &rArr; spiExit4ByteMode &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysForceWDTtoReboot
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyread16
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_LwIPEntry
</UL>

<P><STRONG><a name="[350]"></a>check_parser_idle</STRONG> (ARM, 104 bytes, Stack size 0 bytes, vlc.o(i.check_parser_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = check_parser_idle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAnnexbNALU
</UL>

<P><STRONG><a name="[107]"></a>ciuIntHandler_CH1</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ciu.o(i.ciuIntHandler_CH1))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[108]"></a>ciuIntHandler_CH2</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ciu.o(i.ciuIntHandler_CH2))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[109]"></a>ciuIntHandler_CH3</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ciu.o(i.ciuIntHandler_CH3))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[10a]"></a>ciuIntHandler_CH4</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ciu.o(i.ciuIntHandler_CH4))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[474]"></a>ciu_1_Stop</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ciu.o(i.ciu_1_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
</UL>

<P><STRONG><a name="[475]"></a>ciu_2_Stop</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ciu.o(i.ciu_2_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
</UL>

<P><STRONG><a name="[476]"></a>ciu_3_Stop</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ciu.o(i.ciu_3_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
</UL>

<P><STRONG><a name="[478]"></a>ciu_4_Stop</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ciu.o(i.ciu_4_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
</UL>

<P><STRONG><a name="[2a7]"></a>client_p2pdisconnected</STRONG> (ARM, 244 bytes, Stack size 16 bytes, tutk_av_sample.o(i.client_p2pdisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 3424 + Unknown Stack Size
<LI>Call Chain = client_p2pdisconnected &rArr; IOTC_Session_Close &rArr; _IOTC_Send_RLYClose &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Close
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unregedit_client_from_avsession
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Session_Status
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Session_Status
</UL>

<P><STRONG><a name="[5d3]"></a>cmd_s_chk</STRONG> (ARM, 116 bytes, Stack size 104 bytes, tutk_av_sample.o(i.cmd_s_chk), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[8ad]"></a>contrast_read</STRONG> (ARM, 12 bytes, Stack size 0 bytes, i2c.o(i.contrast_read))
<BR><BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_contrast_test
</UL>

<P><STRONG><a name="[8ae]"></a>contrast_write</STRONG> (ARM, 4 bytes, Stack size 0 bytes, i2c.o(i.contrast_write))
<BR><BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_contrast_test
</UL>

<P><STRONG><a name="[5d7]"></a>convertErrorToConnErr</STRONG> (ARM, 40 bytes, Stack size 0 bytes, tconnection.o(i.convertErrorToConnErr))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionHandlerThread
</UL>

<P><STRONG><a name="[16c]"></a>dailyUpdateSendQueryTask</STRONG> (ARM, 108 bytes, Stack size 32 bytes, iotcapis.o(i.dailyUpdateSendQueryTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 3328 + Unknown Stack Size
<LI>Call Chain = dailyUpdateSendQueryTask &rArr; sendIOTC_Query_Device &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Delete
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendIOTC_Query_Device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iotcapis.o(i.updateVPGServerListDailyRoutine)
</UL>
<P><STRONG><a name="[5da]"></a>dcfBackupCacheClean</STRONG> (ARM, 296 bytes, Stack size 16 bytes, dcffs.o(i.dcfBackupCacheClean))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = dcfBackupCacheClean &rArr; FS_LB_Cache_Clean &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__find_fsl
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_LB_Cache_Clean
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackupFormat
</UL>

<P><STRONG><a name="[5db]"></a>dcfBackupClose</STRONG> (ARM, 132 bytes, Stack size 16 bytes, dcffs.o(i.dcfBackupClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = dcfBackupClose &rArr; FS_FClose &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FClose
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuFwUpdLoadTxFW_SD
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdatebootload
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdate
</UL>

<P><STRONG><a name="[5dc]"></a>dcfBackupDirInit</STRONG> (ARM, 296 bytes, Stack size 40 bytes, dcf.o(i.dcfBackupDirInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_protet
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfMkBackupDir
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChBackupDir
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[5df]"></a>dcfBackupDriveInfo</STRONG> (ARM, 260 bytes, Stack size 16 bytes, dcffs.o(i.dcfBackupDriveInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = dcfBackupDriveInfo &rArr; FS_IoCtl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_IoCtl
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackupFormat
</UL>

<P><STRONG><a name="[5e0]"></a>dcfBackupFormat</STRONG> (ARM, 228 bytes, Stack size 40 bytes, dcf.o(i.dcfBackupFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = dcfBackupFormat &rArr; dcfChBackupDir &rArr; FS_OpenDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_protet
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfMkBackupDir
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFormatBackup
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChBackupDir
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackupFormat
</UL>

<P><STRONG><a name="[5e2]"></a>dcfBackupFsInit</STRONG> (ARM, 196 bytes, Stack size 16 bytes, dcffs.o(i.dcfBackupFsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dcfBackupFsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_9_arm
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_10_arm
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupInit
</UL>

<P><STRONG><a name="[5e5]"></a>dcfBackupInit</STRONG> (ARM, 264 bytes, Stack size 40 bytes, dcf.o(i.dcfBackupInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = dcfBackupInit &rArr; dcfChBackupDir &rArr; FS_OpenDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_protet
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_IoCtl
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfMkBackupDir
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChBackupDir
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupFsInit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
</UL>

<P><STRONG><a name="[5e6]"></a>dcfBackupOpen</STRONG> (ARM, 272 bytes, Stack size 80 bytes, dcffs.o(i.dcfBackupOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = dcfBackupOpen &rArr; FS_FOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FOpen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuFwUpdLoadTxFW_SD
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdatebootload
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdate
</UL>

<P><STRONG><a name="[5e7]"></a>dcfBackupRead</STRONG> (ARM, 140 bytes, Stack size 16 bytes, dcffs.o(i.dcfBackupRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = dcfBackupRead &rArr; FS_FRead &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FRead
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FError
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuFwUpdLoadTxFW_SD
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdatebootload
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdate
</UL>

<P><STRONG><a name="[5e8]"></a>dcfBackupUninit</STRONG> (ARM, 20 bytes, Stack size 8 bytes, dcf.o(i.dcfBackupUninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dcfBackupUninit
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcUnmount
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
</UL>

<P><STRONG><a name="[5ea]"></a>dcfCacheClean</STRONG> (ARM, 204 bytes, Stack size 16 bytes, dcffs.o(i.dcfCacheClean))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = dcfCacheClean &rArr; FS_LB_Cache_Clean &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__find_fsl
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_LB_Cache_Clean
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfUninit
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackFormat
</UL>

<P><STRONG><a name="[5eb]"></a>dcfCacheClear</STRONG> (ARM, 36 bytes, Stack size 16 bytes, dcffs.o(i.dcfCacheClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = dcfCacheClear &rArr; FS_LB_Cache_Clear &rArr; FS_X_OS_LockDeviceOp &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__find_fsl
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_LB_Cache_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFormat
</UL>

<P><STRONG><a name="[5ec]"></a>dcfCacheInit</STRONG> (ARM, 160 bytes, Stack size 16 bytes, dcffs.o(i.dcfCacheInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dcfCacheInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__find_fsl
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_LB_Cache_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfInit
</UL>

<P><STRONG><a name="[605]"></a>dcfCamListFilter</STRONG> (ARM, 272 bytes, Stack size 12 bytes, dcf.o(i.dcfCamListFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dcfCamListFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFileInit
</UL>

<P><STRONG><a name="[5dd]"></a>dcfChBackupDir</STRONG> (ARM, 572 bytes, Stack size 72 bytes, dcffs.o(i.dcfChBackupDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = dcfChBackupDir &rArr; FS_OpenDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_OpenDir
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CloseDir
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupDirInit
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupInit
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupFormat
</UL>

<P><STRONG><a name="[5ed]"></a>dcfChDir</STRONG> (ARM, 572 bytes, Stack size 72 bytes, dcffs.o(i.dcfChDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = dcfChDir &rArr; FS_OpenDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_OpenDir
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CloseDir
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextFile
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDirInit
</UL>

<P><STRONG><a name="[5ee]"></a>dcfChPlayDir</STRONG> (ARM, 572 bytes, Stack size 72 bytes, dcffs.o(i.dcfChPlayDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = dcfChPlayDir &rArr; FS_OpenDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_OpenDir
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CloseDir
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanDiskAll
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFileInit
</UL>

<P><STRONG><a name="[5ef]"></a>dcfCheckBackupUnit</STRONG> (ARM, 124 bytes, Stack size 8 bytes, dcf.o(i.dcfCheckBackupUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = dcfCheckBackupUnit &rArr; FS_IoCtl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_IoCtl
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFormatBackup
</UL>

<P><STRONG><a name="[5f0]"></a>dcfCheckDir</STRONG> (ARM, 252 bytes, Stack size 32 bytes, dcf.o(i.dcfCheckDir), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[5f1]"></a>dcfCheckDirExist</STRONG> (ARM, 100 bytes, Stack size 72 bytes, dcffs.o(i.dcfCheckDirExist))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = dcfCheckDirExist &rArr; FS_OpenDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_OpenDir
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CloseDir
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextDir
</UL>

<P><STRONG><a name="[324]"></a>dcfCheckFileChannel</STRONG> (ARM, 100 bytes, Stack size 0 bytes, dcf.o(i.dcfCheckFileChannel))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_SearchWholedir
</UL>

<P><STRONG><a name="[5f2]"></a>dcfCheckUnit</STRONG> (ARM, 144 bytes, Stack size 8 bytes, dcf.o(i.dcfCheckUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = dcfCheckUnit &rArr; FS_IoCtl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_IoCtl
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFormat
</UL>

<P><STRONG><a name="[36a]"></a>dcfClose</STRONG> (ARM, 332 bytes, Stack size 24 bytes, dcffs.o(i.dcfClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = dcfClose &rArr; FS_LB_Cache_Clean &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__find_fsl
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_LB_Cache_Clean
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FClose
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoDuration
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuFwUpdLoadTxFW_SD
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCloseFileByIdx
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdatebootload
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdate
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSplitFile
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSetProgram
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavreadfile
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifReadFile
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavReadFile_PCM
</UL>

<P><STRONG><a name="[456]"></a>dcfCloseFileByIdx</STRONG> (ARM, 188 bytes, Stack size 24 bytes, dcf.o(i.dcfCloseFileByIdx))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = dcfCloseFileByIdx &rArr; dcfClose &rArr; FS_LB_Cache_Clean &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCreateFile
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCloseFile
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifWriteFile
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoiceFile
</UL>

<P><STRONG><a name="[5f3]"></a>dcfCreateNextDir</STRONG> (ARM, 964 bytes, Stack size 216 bytes, dcf.o(i.dcfCreateNextDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = dcfCreateNextDir &rArr; dcfCheckDirExist &rArr; FS_OpenDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_IoCtl
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfMkDir
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetDirEnt
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCheckDirExist
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSetFreeDirEnt
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextFile
</UL>

<P><STRONG><a name="[461]"></a>dcfCreateNextFile</STRONG> (ARM, 1896 bytes, Stack size 160 bytes, dcf.o(i.dcfCreateNextFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = dcfCreateNextFile &rArr; dcfCreateNextDir &rArr; dcfCheckDirExist &rArr; FS_OpenDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOpen
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChDir
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetNewFileTime
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextDir
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCreateFile
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifWriteFile
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoiceFile
</UL>

<P><STRONG><a name="[5f8]"></a>dcfCreatePlaybackTargetPath</STRONG> (ARM, 120 bytes, Stack size 16 bytes, dcffs.o(i.dcfCreatePlaybackTargetPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dcfCreatePlaybackTargetPath &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOpen
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDirSearch
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDirScan
</UL>

<P><STRONG><a name="[5f9]"></a>dcfCreateTargetPath</STRONG> (ARM, 112 bytes, Stack size 8 bytes, dcffs.o(i.dcfCreateTargetPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dcfCreateTargetPath &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOpen
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDir
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfRename
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfMkDir
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetDirEnt
</UL>

<P><STRONG><a name="[5fa]"></a>dcfDir</STRONG> (ARM, 352 bytes, Stack size 40 bytes, dcffs.o(i.dcfDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = dcfDir &rArr; FS_ReadWholeDir &rArr; FS__fat_readwholedir &rArr; FS__fat_dir_realsec &rArr;  FS__fat_find_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadWholeDir
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_OpenDir
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CloseDir
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateTargetPath
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDirInit
</UL>

<P><STRONG><a name="[5fb]"></a>dcfDirExist</STRONG> (ARM, 140 bytes, Stack size 8 bytes, dcffs.o(i.dcfDirExist), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_OpenDir
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CloseDir
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[5fc]"></a>dcfDirInit</STRONG> (ARM, 676 bytes, Stack size 64 bytes, dcf.o(i.dcfDirInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4608 + Unknown Stack Size
<LI>Call Chain = dcfDirInit &rArr; uiCheckTXUpgradeFileName &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_protet
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDir
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChDir
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfMkDir
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSetDirEntList
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFormat
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfInit
</UL>

<P><STRONG><a name="[5ff]"></a>dcfDriveInfo</STRONG> (ARM, 252 bytes, Stack size 16 bytes, dcffs.o(i.dcfDriveInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = dcfDriveInfo &rArr; FS_IoCtl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_IoCtl
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackFormat
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetDiskFree
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLowGetDiskFree
</UL>

<P><STRONG><a name="[600]"></a>dcfDumpDriveInfo</STRONG> (ARM, 216 bytes, Stack size 8 bytes, dcffs.o(i.dcfDumpDriveInfo), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[601]"></a>dcfFileInit</STRONG> (ARM, 676 bytes, Stack size 56 bytes, dcf.o(i.dcfFileInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = dcfFileInit &rArr; dcfPlayDirScan &rArr; FS_ScanWholeDir &rArr; FS__fat_ScanWholedir &rArr; FSFATFreeFATLink &rArr; FSFATSetFSInfo &rArr; FS__lb_sin_write &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDirScan
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChPlayDir
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSetFileEntList
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSetFileDistInDir
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCamListFilter
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanFileOnPlaybackDir
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFormat
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfInit
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
</UL>

<P><STRONG><a name="[609]"></a>dcfFileTypeCount_Clean</STRONG> (ARM, 40 bytes, Stack size 0 bytes, dcf.o(i.dcfFileTypeCount_Clean))
<BR><BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFormat
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_IN
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
</UL>

<P><STRONG><a name="[606]"></a>dcfFileTypeCount_Dec</STRONG> (ARM, 84 bytes, Stack size 0 bytes, dcf.o(i.dcfFileTypeCount_Dec), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[607]"></a>dcfFindFreeDirEnt</STRONG> (ARM, 124 bytes, Stack size 8 bytes, dcf.o(i.dcfFindFreeDirEnt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[608]"></a>dcfFormat</STRONG> (ARM, 316 bytes, Stack size 16 bytes, dcffs.o(i.dcfFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = dcfFormat &rArr; dcfCheckUnit &rArr; FS_IoCtl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCheckUnit
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_IoCtl
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFileTypeCount_Clean
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFormat
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfInit
</UL>

<P><STRONG><a name="[5e1]"></a>dcfFormatBackup</STRONG> (ARM, 336 bytes, Stack size 16 bytes, dcffs.o(i.dcfFormatBackup))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = dcfFormatBackup &rArr; dcfCheckBackupUnit &rArr; FS_IoCtl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCheckBackupUnit
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_IoCtl
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupFormat
</UL>

<P><STRONG><a name="[60a]"></a>dcfFreeDirEnt</STRONG> (ARM, 196 bytes, Stack size 8 bytes, dcf.o(i.dcfFreeDirEnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dcfFreeDirEnt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDelDir
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDel
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOverWriteDel
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDelAll
</UL>

<P><STRONG><a name="[60b]"></a>dcfFsInit</STRONG> (ARM, 368 bytes, Stack size 24 bytes, dcffs.o(i.dcfFsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dcfFsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_9_arm
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_7_arm
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_10_arm
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfInit
</UL>

<P><STRONG><a name="[60d]"></a>dcfGetCurDirFileCount</STRONG> (ARM, 80 bytes, Stack size 8 bytes, dcf.o(i.dcfGetCurDirFileCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dcfGetCurDirFileCount &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackListMode
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawDelMsg
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFileNum
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackMoveForward
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackMoveBackward
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDeleteDir
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDeleteAll
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDelete
</UL>

<P><STRONG><a name="[5f5]"></a>dcfGetDirEnt</STRONG> (ARM, 448 bytes, Stack size 56 bytes, dcffs.o(i.dcfGetDirEnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = dcfGetDirEnt &rArr; FS_OpenDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadDir
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_OpenDir
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CloseDir
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateTargetPath
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextDir
</UL>

<P><STRONG><a name="[322]"></a>dcfGetFileType</STRONG> (ARM, 68 bytes, Stack size 16 bytes, dcf.o(i.dcfGetFileType))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dcfGetFileType &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_SearchWholedir
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ScanWholedir
</UL>

<P><STRONG><a name="[44e]"></a>dcfGetMainStorageFreeSize</STRONG> (ARM, 32 bytes, Stack size 0 bytes, dcffs.o(i.dcfGetMainStorageFreeSize))
<BR><BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataPacketPost
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCreateFile
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCloseFile
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
</UL>

<P><STRONG><a name="[5f7]"></a>dcfGetNewFileTime</STRONG> (ARM, 576 bytes, Stack size 24 bytes, dcf.o(i.dcfGetNewFileTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = dcfGetNewFileTime &rArr; RTC_Get_Time &rArr; RTC_Get_GMT_Time &rArr; Set_SD2068_RTC &rArr; i2cWrite_SD2068 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextFile
</UL>

<P><STRONG><a name="[68f]"></a>dcfGetPlaybackFileListHead</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcf.o(i.dcfGetPlaybackFileListHead))
<BR><BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdPlaybackFilePrev
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdPlaybackFileNext
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_recorded_filelist
</UL>

<P><STRONG><a name="[8e5]"></a>dcfGetPlaybackFileListTail</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcf.o(i.dcfGetPlaybackFileListTail))
<BR><BR>[Called By]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlayback_Delete_File
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdPlaybackFileNext
</UL>

<P><STRONG><a name="[460]"></a>dcfGetTotalDirCount</STRONG> (ARM, 76 bytes, Stack size 8 bytes, dcf.o(i.dcfGetTotalDirCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dcfGetTotalDirCount &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCreateFile
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlayback_Delete_File
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackListMode
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
</UL>

<P><STRONG><a name="[68e]"></a>dcfGetVideoDirListHead</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcf.o(i.dcfGetVideoDirListHead))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_recorded_filelist
</UL>

<P><STRONG><a name="[90f]"></a>dcfGetVideoDirListTail</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcf.o(i.dcfGetVideoDirListTail))
<BR><BR>[Called By]<UL><LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
</UL>

<P><STRONG><a name="[60e]"></a>dcfInit</STRONG> (ARM, 360 bytes, Stack size 24 bytes, dcf.o(i.dcfInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632 + Unknown Stack Size
<LI>Call Chain = dcfInit &rArr; dcfDirInit &rArr; uiCheckTXUpgradeFileName &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_IoCtl
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFsInit
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFormat
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCacheInit
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifFileInit
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ramDiskInit1
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ramDiskInit
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSetProgram
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFileInit
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDirInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_IN
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
</UL>

<P><STRONG><a name="[5de]"></a>dcfMkBackupDir</STRONG> (ARM, 312 bytes, Stack size 8 bytes, dcffs.o(i.dcfMkBackupDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = dcfMkBackupDir &rArr; FS_MkDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_MkDir
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupDirInit
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupInit
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupFormat
</UL>

<P><STRONG><a name="[5f4]"></a>dcfMkDir</STRONG> (ARM, 204 bytes, Stack size 8 bytes, dcffs.o(i.dcfMkDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = dcfMkDir &rArr; FS_MkDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_MkDir
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateTargetPath
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDirInit
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextDir
</UL>

<P><STRONG><a name="[612]"></a>dcfOWDel</STRONG> (ARM, 392 bytes, Stack size 88 bytes, dcffs.o(i.dcfOWDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = dcfOWDel &rArr; FS_Remove &rArr; FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8_arm
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Remove
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_OpenDir
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CloseDir
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectDeviceStatus
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDelDir
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOverWriteDel
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDelAll
</UL>

<P><STRONG><a name="[614]"></a>dcfOWDelDir</STRONG> (ARM, 260 bytes, Stack size 80 bytes, dcffs.o(i.dcfOWDelDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = dcfOWDelDir &rArr; FS_Remove &rArr; FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Remove
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_OpenDir
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CloseDir
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDelDir
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDel
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOverWriteDel
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDelAll
</UL>

<P><STRONG><a name="[368]"></a>dcfOpen</STRONG> (ARM, 172 bytes, Stack size 80 bytes, dcffs.o(i.dcfOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = dcfOpen &rArr; FS_FOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FOpen
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateTargetPath
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreatePlaybackTargetPath
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoDuration
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuFwUpdLoadTxFW_SD
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextFile
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdatebootload
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdate
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSplitFile
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSetProgram
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavreadfile
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifReadFile
</UL>

<P><STRONG><a name="[45f]"></a>dcfOverWriteDel</STRONG> (ARM, 492 bytes, Stack size 16 bytes, dcf.o(i.dcfOverWriteDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = dcfOverWriteDel &rArr; dcfOWDel &rArr; FS_Remove &rArr; FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDelDir
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDel
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFreeDirEnt
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataPacketPost
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCreateFile
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCloseFile
</UL>

<P><STRONG><a name="[615]"></a>dcfPlayDel</STRONG> (ARM, 400 bytes, Stack size 96 bytes, dcffs.o(i.dcfPlayDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = dcfPlayDel &rArr; FS_Remove &rArr; FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8_arm
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Remove
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_OpenDir
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CloseDir
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectDeviceStatus
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDel
</UL>

<P><STRONG><a name="[602]"></a>dcfPlayDirScan</STRONG> (ARM, 348 bytes, Stack size 96 bytes, dcffs.o(i.dcfPlayDirScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = dcfPlayDirScan &rArr; FS_ScanWholeDir &rArr; FS__fat_ScanWholedir &rArr; FSFATFreeFATLink &rArr; FSFATSetFSInfo &rArr; FS__lb_sin_write &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ScanWholeDir
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_OpenDir
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CloseDir
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreatePlaybackTargetPath
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFileInit
</UL>

<P><STRONG><a name="[616]"></a>dcfPlayDirSearch</STRONG> (ARM, 376 bytes, Stack size 144 bytes, dcffs.o(i.dcfPlayDirSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = dcfPlayDirSearch &rArr; FS_SearchWholeDir &rArr; FS__fat_SearchWholedir &rArr; FS__fat_dir_realsec &rArr;  FS__fat_find_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SearchWholeDir
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_OpenDir
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CloseDir
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreatePlaybackTargetPath
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanDiskAll
</UL>

<P><STRONG><a name="[617]"></a>dcfPlaybackCalendarInit</STRONG> (ARM, 536 bytes, Stack size 56 bytes, dcf.o(i.dcfPlaybackCalendarInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = dcfPlaybackCalendarInit &rArr; dcfScanDiskAll &rArr; dcfPlayDirSearch &rArr; FS_SearchWholeDir &rArr; FS__fat_SearchWholedir &rArr; FS__fat_dir_realsec &rArr;  FS__fat_find_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanDiskAll
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackCalendar
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCalendarFileLoad
</UL>

<P><STRONG><a name="[619]"></a>dcfPlaybackDel</STRONG> (ARM, 1076 bytes, Stack size 24 bytes, dcf.o(i.dcfPlaybackDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = dcfPlaybackDel &rArr; dcfPlayDel &rArr; FS_Remove &rArr; FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDel
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDelDir
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawDelMsg
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFreeDirEnt
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlayback_Delete_File
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDelete
</UL>

<P><STRONG><a name="[61b]"></a>dcfPlaybackDelAll</STRONG> (ARM, 488 bytes, Stack size 32 bytes, dcf.o(i.dcfPlaybackDelAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = dcfPlaybackDelAll &rArr; dcfOWDel &rArr; FS_Remove &rArr; FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetEvt
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDelDir
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDel
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFreeDirEnt
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageInserted
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDeleteAll
</UL>

<P><STRONG><a name="[61c]"></a>dcfPlaybackDelDir</STRONG> (ARM, 460 bytes, Stack size 16 bytes, dcf.o(i.dcfPlaybackDelDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = dcfPlaybackDelDir &rArr; dcfOWDel &rArr; FS_Remove &rArr; FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDelDir
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDel
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFreeDirEnt
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageInserted
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDeleteDir
</UL>

<P><STRONG><a name="[6e]"></a>dcfPlaybackDirBackward</STRONG> (ARM, 244 bytes, Stack size 16 bytes, dcf.o(i.dcfPlaybackDirBackward))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dcfPlaybackDirBackward &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_osd_project.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>dcfPlaybackDirForward</STRONG> (ARM, 244 bytes, Stack size 16 bytes, dcf.o(i.dcfPlaybackDirForward))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dcfPlaybackDirForward &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlayback_Delete_File
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_osd_project.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>dcfPlaybackFileNext</STRONG> (ARM, 160 bytes, Stack size 16 bytes, dcf.o(i.dcfPlaybackFileNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dcfPlaybackFileNext &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackMoveForward
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdPlaybackFileNext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_osd_project.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>dcfPlaybackFilePrev</STRONG> (ARM, 164 bytes, Stack size 16 bytes, dcf.o(i.dcfPlaybackFilePrev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dcfPlaybackFilePrev &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlayback_Delete_File
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackMoveBackward
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdPlaybackFilePrev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_osd_project.o(.data)
</UL>
<P><STRONG><a name="[61d]"></a>dcfPlaybackFormat</STRONG> (ARM, 148 bytes, Stack size 8 bytes, dcf.o(i.dcfPlaybackFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616 + Unknown Stack Size
<LI>Call Chain = dcfPlaybackFormat &rArr; dcfDirInit &rArr; uiCheckTXUpgradeFileName &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFormat
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCacheClear
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFileInit
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDirInit
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetStorageStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackFormat
</UL>

<P><STRONG><a name="[369]"></a>dcfRead</STRONG> (ARM, 140 bytes, Stack size 16 bytes, dcffs.o(i.dcfRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = dcfRead &rArr; FS_FRead &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FRead
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FError
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVideoDuration
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuFwUpdLoadTxFW_SD
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdatebootload
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdate
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSplitFile
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfBurstReadIndexObject
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSetProgram
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavreadfile
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifReadFile
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavReadFile_PCM
</UL>

<P><STRONG><a name="[61f]"></a>dcfRename</STRONG> (ARM, 68 bytes, Stack size 16 bytes, dcffs.o(i.dcfRename))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = dcfRename &rArr; FS_fat_rename &rArr; FS__fat_findpath &rArr; FS__fat_find_dir &rArr; FS__fat_dir_realsec &rArr;  FS__fat_find_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_fat_rename
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__find_fsl
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateTargetPath
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
</UL>

<P><STRONG><a name="[618]"></a>dcfScanDiskAll</STRONG> (ARM, 812 bytes, Stack size 112 bytes, dcf.o(i.dcfScanDiskAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = dcfScanDiskAll &rArr; dcfPlayDirSearch &rArr; FS_SearchWholeDir &rArr; FS__fat_SearchWholedir &rArr; FS__fat_dir_realsec &rArr;  FS__fat_find_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDeadLockMonitor_Reset
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDirSearch
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfChPlayDir
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSetFileEntList
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSetFileDistInDir
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackCalendarInit
</UL>

<P><STRONG><a name="[620]"></a>dcfScanFileOnPlaybackDir</STRONG> (ARM, 264 bytes, Stack size 16 bytes, dcf.o(i.dcfScanFileOnPlaybackDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = dcfScanFileOnPlaybackDir &rArr; dcfFileInit &rArr; dcfPlayDirScan &rArr; FS_ScanWholeDir &rArr; FS__fat_ScanWholedir &rArr; FSFATFreeFATLink &rArr; FSFATSetFSInfo &rArr; FS__lb_sin_write &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFileInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlayback_Delete_File
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdPlaybackFilePrev
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdPlaybackFileNext
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_recorded_filelist
</UL>

<P><STRONG><a name="[469]"></a>dcfSeek</STRONG> (ARM, 144 bytes, Stack size 8 bytes, dcffs.o(i.dcfSeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dcfSeek &rArr; FS_FSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FSeek
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteFilePropertiesObjectPost
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataObjectPost
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavreadfile
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoiceFile
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavReadFile_PCM
</UL>

<P><STRONG><a name="[882]"></a>dcfSetChannelRecType</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dcf.o(i.dcfSetChannelRecType))
<BR><BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoByChannel
</UL>

<P><STRONG><a name="[5fe]"></a>dcfSetDirEntList</STRONG> (ARM, 692 bytes, Stack size 72 bytes, dcf.o(i.dcfSetDirEntList))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = dcfSetDirEntList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDirInit
</UL>

<P><STRONG><a name="[604]"></a>dcfSetFileDistInDir</STRONG> (ARM, 828 bytes, Stack size 32 bytes, dcf.o(i.dcfSetFileDistInDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dcfSetFileDistInDir &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanDiskAll
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFileInit
</UL>

<P><STRONG><a name="[603]"></a>dcfSetFileEntList</STRONG> (ARM, 428 bytes, Stack size 24 bytes, dcf.o(i.dcfSetFileEntList))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = dcfSetFileEntList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanDiskAll
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFileInit
</UL>

<P><STRONG><a name="[5f6]"></a>dcfSetFreeDirEnt</STRONG> (ARM, 252 bytes, Stack size 24 bytes, dcf.o(i.dcfSetFreeDirEnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = dcfSetFreeDirEnt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextDir
</UL>

<P><STRONG><a name="[621]"></a>dcfSetFreeFileEnt</STRONG> (ARM, 232 bytes, Stack size 8 bytes, dcf.o(i.dcfSetFreeFileEnt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[468]"></a>dcfTell</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dcffs.o(i.dcfTell))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dcfTell &rArr; FS_FTell &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FTell
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteFilePropertiesObjectPost
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataObjectPost
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
</UL>

<P><STRONG><a name="[622]"></a>dcfUninit</STRONG> (ARM, 140 bytes, Stack size 8 bytes, dcf.o(i.dcfUninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = dcfUninit &rArr; dcfCacheClean &rArr; FS_LB_Cache_Clean &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcUnmount
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ramDiskUninit1
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ramDiskUninit
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCacheClean
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_OFF
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_IN
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_OFF
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_Device_Mount
</UL>

<P><STRONG><a name="[463]"></a>dcfWrite</STRONG> (ARM, 364 bytes, Stack size 32 bytes, dcffs.o(i.dcfWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = dcfWrite &rArr; FS_FWrite &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FWrite
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FError
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteIndexObject
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteFilePropertiesObjectPost
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataPacketPost
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataObjectPre
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataObjectPost
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCreateFile
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifWriteFile
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavWriteVoiceData
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoiceFile
</UL>

<P><STRONG><a name="[423]"></a>decode_se_v</STRONG> (ARM, 192 bytes, Stack size 24 bytes, vlc.o(i.decode_se_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = decode_se_v &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpretPPS
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestOfSliceHeader
</UL>

<P><STRONG><a name="[421]"></a>decode_u_1</STRONG> (ARM, 92 bytes, Stack size 16 bytes, vlc.o(i.decode_u_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = decode_u_1 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpretSPS
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpretPPS
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestOfSliceHeader
</UL>

<P><STRONG><a name="[422]"></a>decode_u_v</STRONG> (ARM, 208 bytes, Stack size 24 bytes, vlc.o(i.decode_u_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = decode_u_v &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpretSPS
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpretPPS
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestOfSliceHeader
</UL>

<P><STRONG><a name="[340]"></a>decode_ue_v</STRONG> (ARM, 176 bytes, Stack size 24 bytes, vlc.o(i.decode_ue_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = decode_ue_v &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpretSPS
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpretPPS
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestOfSliceHeader
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstPartOfSliceHeader
</UL>

<P><STRONG><a name="[995]"></a>dev_print</STRONG> (ARM, 588 bytes, Stack size 4 bytes, usb_storage.o(i.dev_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dev_print
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_info
</UL>

<P><STRONG><a name="[625]"></a>dhcp_arp_reply</STRONG> (ARM, 384 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = dhcp_arp_reply &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[179]"></a>dhcp_coarse_tmr</STRONG> (ARM, 940 bytes, Stack size 48 bytes, dhcp.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_discover &rArr; autoip_start &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>dhcp_fine_tmr</STRONG> (ARM, 260 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_discover &rArr; autoip_start &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[639]"></a>dhcp_network_changed</STRONG> (ARM, 128 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_network_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = dhcp_network_changed &rArr; dhcp_discover &rArr; autoip_start &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_stop
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
</UL>

<P><STRONG><a name="[635]"></a>dhcp_release</STRONG> (ARM, 324 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = dhcp_release &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[631]"></a>dhcp_renew</STRONG> (ARM, 344 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[4e6]"></a>dhcp_start</STRONG> (ARM, 724 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; autoip_start &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLwIP
</UL>

<P><STRONG><a name="[642]"></a>dhcp_stop</STRONG> (ARM, 336 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = dhcp_stop &rArr; autoip_stop &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_stop
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[646]"></a>dns_gethostbyname_addrtype</STRONG> (ARM, 1048 bytes, Stack size 40 bytes, dns.o(i.dns_gethostbyname_addrtype))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = dns_gethostbyname_addrtype &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Random
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
</UL>

<P><STRONG><a name="[707]"></a>dns_init</STRONG> (ARM, 4 bytes, Stack size 0 bytes, dns.o(i.dns_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[4e7]"></a>dns_setserver</STRONG> (ARM, 36 bytes, Stack size 0 bytes, dns.o(i.dns_setserver))
<BR><BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLwIP
</UL>

<P><STRONG><a name="[17c]"></a>dns_tmr</STRONG> (ARM, 572 bytes, Stack size 40 bytes, dns.o(i.dns_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = dns_tmr &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Random
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[651]"></a>dump_phy_regs</STRONG> (ARM, 360 bytes, Stack size 8 bytes, ftmac110.o(i.dump_phy_regs), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyread16
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[652]"></a>ehci_bus_reset</STRONG> (ARM, 160 bytes, Stack size 16 bytes, ehci-hcd.o(i.ehci_bus_reset), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[97c]"></a>ehci_hcd_init</STRONG> (ARM, 160 bytes, Stack size 0 bytes, ehci-a1016a.o(i.ehci_hcd_init))
<BR><BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbHostInit
</UL>

<P><STRONG><a name="[653]"></a>ehci_mdelay</STRONG> (ARM, 92 bytes, Stack size 24 bytes, ehci-hcd.o(i.ehci_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ehci_mdelay
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerCountRead
</UL>
<BR>[Called By]<UL><LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bulk_msg
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_test_unit_ready
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_new_device
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_reset
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_configure
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_submit_root
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lowlevel_init
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mouse_hid_probe
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_keyboard_hid_probe
</UL>

<P><STRONG><a name="[655]"></a>ehci_reset</STRONG> (ARM, 68 bytes, Stack size 0 bytes, ehci-hcd.o(i.ehci_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ehci_reset &rArr; handshake
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake
</UL>
<BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbHostInit
</UL>

<P><STRONG><a name="[659]"></a>ehci_submit_root</STRONG> (ARM, 1160 bytes, Stack size 64 bytes, ehci-hcd.o(i.ehci_submit_root))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ehci_submit_root &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_mdelay
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;submit_control_msg
</UL>

<P><STRONG><a name="[34d]"></a>encode_se_v</STRONG> (ARM, 204 bytes, Stack size 48 bytes, vlc.o(i.encode_se_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = encode_se_v &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_writeUVLC2buffer
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateSeq_parameter_set_rbsp
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePic_parameter_set_rbsp
</UL>

<P><STRONG><a name="[34b]"></a>encode_u_1</STRONG> (ARM, 40 bytes, Stack size 24 bytes, vlc.o(i.encode_u_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = encode_u_1 &rArr; encode_writeUVLC2buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_writeUVLC2buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateSeq_parameter_set_rbsp
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePic_parameter_set_rbsp
</UL>

<P><STRONG><a name="[34c]"></a>encode_u_v</STRONG> (ARM, 40 bytes, Stack size 24 bytes, vlc.o(i.encode_u_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = encode_u_v &rArr; encode_writeUVLC2buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_writeUVLC2buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateSeq_parameter_set_rbsp
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePic_parameter_set_rbsp
</UL>

<P><STRONG><a name="[34a]"></a>encode_ue_v</STRONG> (ARM, 188 bytes, Stack size 40 bytes, vlc.o(i.encode_ue_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = encode_ue_v &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_writeUVLC2buffer
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateSeq_parameter_set_rbsp
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePic_parameter_set_rbsp
</UL>

<P><STRONG><a name="[65d]"></a>encode_writeUVLC2buffer</STRONG> (ARM, 144 bytes, Stack size 16 bytes, vlc.o(i.encode_writeUVLC2buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = encode_writeUVLC2buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ue_v
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_u_v
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_u_1
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_se_v
</UL>

<P><STRONG><a name="[65e]"></a>encryptInit</STRONG> (ARM, 40 bytes, Stack size 8 bytes, des.o(i.encryptInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = encryptInit &rArr; OSSemCreate &rArr; OS_EventWaitListInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[10b]"></a>encryptIntHandler</STRONG> (ARM, 44 bytes, Stack size 16 bytes, des.o(i.encryptIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = encryptIntHandler &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[65f]"></a>errHandle</STRONG> (ARM, 40 bytes, Stack size 8 bytes, sdcerr.o(i.errHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcUnmountSeq
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMountSeq
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcGetCsd2Dot0
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcGetCardStatus
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDataTransferMode
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckMultipleWriteError
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckCardBusy
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCardIdentificationMode2Dot0
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckWriteError
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckReadError
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckCommandResponseComplete
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcWriteSingleBlock
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcWriteMultipleBlock
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcReadSingleBlock
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcReadMultipleBlock
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMount
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcErase
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckTransferState
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDetectCard
</UL>

<P><STRONG><a name="[6f5]"></a>err_to_errno</STRONG> (ARM, 32 bytes, Stack size 0 bytes, err.o(i.err_to_errno))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[665]"></a>etharp_input</STRONG> (ARM, 764 bytes, Stack size 72 bytes, etharp.o(i.etharp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = etharp_input &rArr; autoip_arp_reply &rArr; autoip_start &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_reply
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[cf]"></a>etharp_output</STRONG> (ARM, 948 bytes, Stack size 56 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_raw &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[636]"></a>etharp_query</STRONG> (ARM, 868 bytes, Stack size 56 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = etharp_query &rArr; etharp_raw &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[5c1]"></a>etharp_request</STRONG> (ARM, 56 bytes, Stack size 24 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_reply
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
</UL>

<P><STRONG><a name="[178]"></a>etharp_tmr</STRONG> (ARM, 204 bytes, Stack size 48 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = etharp_tmr &rArr; etharp_raw &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>ethernet_input</STRONG> (ARM, 340 bytes, Stack size 24 bytes, ethernet.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = ethernet_input &rArr; etharp_input &rArr; autoip_arp_reply &rArr; autoip_start &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_input)
</UL>
<P><STRONG><a name="[667]"></a>ethernet_output</STRONG> (ARM, 308 bytes, Stack size 32 bytes, ethernet.o(i.ethernet_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ethernet_output &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[13a]"></a>ethernetif_init</STRONG> (ARM, 392 bytes, Stack size 16 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ethernetif_init &rArr; mem_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6_arm
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwipentry.o(i.tcpip_init_done)
</UL>
<P><STRONG><a name="[66e]"></a>ethernetif_input2</STRONG> (ARM, 292 bytes, Stack size 40 bytes, ethernetif.o(i.ethernetif_input2))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = ethernetif_input2 &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpkt_finish_handler2
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmac110_isr
</UL>

<P><STRONG><a name="[670]"></a>exifApp1Parse</STRONG> (ARM, 896 bytes, Stack size 56 bytes, exif.o(i.exifApp1Parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = exifApp1Parse &rArr;  exifFileParse (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackFrame
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegDecompression
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isuPlayback
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifIfdParse
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifFileParse
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifFileParse
</UL>

<P><STRONG><a name="[675]"></a>exifDqtParse</STRONG> (ARM, 256 bytes, Stack size 24 bytes, exif.o(i.exifDqtParse), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[60f]"></a>exifFileInit</STRONG> (ARM, 168 bytes, Stack size 16 bytes, exif.o(i.exifFileInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = exifFileInit &rArr; jpegSetQuantizationQuality &rArr; exifSetQuantizationTable
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSwap16
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetQuantizationQuality
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfInit
</UL>

<P><STRONG><a name="[672]"></a>exifFileParse</STRONG> (ARM, 2288 bytes, Stack size 80 bytes, exif.o(i.exifFileParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetRestartInterval
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetQuantizationTable
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetImageResolution
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetHuffmanTable
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetDataFormat
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifSof0Parse
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifApp1Parse
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifApp1Parse
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifReadFile
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJpgGraph
</UL>

<P><STRONG><a name="[671]"></a>exifIfdParse</STRONG> (ARM, 624 bytes, Stack size 16 bytes, exif.o(i.exifIfdParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = exifIfdParse &rArr; exifIfdTag &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifIfdTag
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifApp1Parse
</UL>

<P><STRONG><a name="[67e]"></a>exifIfdTag</STRONG> (ARM, 928 bytes, Stack size 8 bytes, exif.o(i.exifIfdTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = exifIfdTag &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifIfdParse
</UL>

<P><STRONG><a name="[686]"></a>exifIntToStr</STRONG> (ARM, 240 bytes, Stack size 32 bytes, exif.o(i.exifIntToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = exifIntToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifSetDateTime
</UL>

<P><STRONG><a name="[67f]"></a>exifReadFile</STRONG> (ARM, 652 bytes, Stack size 64 bytes, exif.o(i.exifReadFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = exifReadFile &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfRead
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOpen
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackFrame
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegDecompressionYUV420
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifFileParse
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCheckNextEvtIsPrevOrNext
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
</UL>

<P><STRONG><a name="[825]"></a>exifSetCompressedBitsPerPixel</STRONG> (ARM, 64 bytes, Stack size 0 bytes, exif.o(i.exifSetCompressedBitsPerPixel))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureImage_OnRFRx
</UL>

<P><STRONG><a name="[684]"></a>exifSetCopyRightVersion</STRONG> (ARM, 28 bytes, Stack size 8 bytes, exif.o(i.exifSetCopyRightVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exifSetCopyRightVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureImage_OnRFRx
</UL>

<P><STRONG><a name="[685]"></a>exifSetDateTime</STRONG> (ARM, 224 bytes, Stack size 40 bytes, exif.o(i.exifSetDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = exifSetDateTime &rArr; exifIntToStr
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifIntToStr
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureImage_OnRFRx
</UL>

<P><STRONG><a name="[687]"></a>exifSetImageResolution</STRONG> (ARM, 116 bytes, Stack size 16 bytes, exif.o(i.exifSetImageResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exifSetImageResolution
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bSwap16
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureImage_OnRFRx
</UL>

<P><STRONG><a name="[6f2]"></a>exifSetQuantizationTable</STRONG> (ARM, 112 bytes, Stack size 8 bytes, exif.o(i.exifSetQuantizationTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exifSetQuantizationTable
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetQuantizationQuality
</UL>

<P><STRONG><a name="[678]"></a>exifSof0Parse</STRONG> (ARM, 624 bytes, Stack size 56 bytes, exif.o(i.exifSof0Parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = exifSof0Parse &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifFileParse
</UL>

<P><STRONG><a name="[688]"></a>exifSosParse</STRONG> (ARM, 412 bytes, Stack size 24 bytes, exif.o(i.exifSosParse), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetQuantizationTable
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[689]"></a>exifWriteFile</STRONG> (ARM, 732 bytes, Stack size 32 bytes, exif.o(i.exifWriteFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = exifWriteFile &rArr; dcfCreateNextFile &rArr; dcfCreateNextDir &rArr; dcfCheckDirExist &rArr; FS_OpenDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfWrite
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextFile
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCloseFileByIdx
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackEXIFWrite
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureImage_OnRFRx
</UL>

<P><STRONG><a name="[68a]"></a>feed_Config</STRONG> (ARM, 392 bytes, Stack size 24 bytes, i2c.o(i.feed_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = feed_Config &rArr; i2cWrite16addr_Byte &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite16addr_Byte
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead16addr_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit_GT9271
</UL>

<P><STRONG><a name="[228]"></a>ferror</STRONG> (ARM, 8 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[7b1]"></a>format_printf2</STRONG> (ARM, 28 bytes, Stack size 0 bytes, ehci-hcd.o(i.format_printf2))
<BR><BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_hub
</UL>

<P><STRONG><a name="[88]"></a>fputc</STRONG> (ARM, 32 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[33a]"></a>ftmac110_init</STRONG> (ARM, 1044 bytes, Stack size 32 bytes, ftmac110.o(i.ftmac110_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ftmac110_init &rArr; alloc_txdes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6_arm
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyread16
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_txdes
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTMAC110_main
</UL>

<P><STRONG><a name="[f3]"></a>ftmac110_isr</STRONG> (ARM, 84 bytes, Stack size 8 bytes, ftmac110.o(i.ftmac110_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ftmac110_isr &rArr; ethernetif_input2 &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input2
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[68b]"></a>ftmac110_xmit</STRONG> (ARM, 128 bytes, Stack size 16 bytes, ftmac110.o(i.ftmac110_xmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ftmac110_xmit
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[68c]"></a>ftmac110_xmit_wait_dma_done</STRONG> (ARM, 96 bytes, Stack size 8 bytes, ftmac110.o(i.ftmac110_xmit_wait_dma_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ftmac110_xmit_wait_dma_done &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[89a]"></a>getTVinFormat</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sys.o(i.getTVinFormat))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetStartMovie
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTVInFormat
</UL>

<P><STRONG><a name="[3a5]"></a>get_recorded_filelist</STRONG> (ARM, 2968 bytes, Stack size 80 bytes, tutk_av_sample.o(i.get_recorded_filelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 4960 + Unknown Stack Size
<LI>Call Chain = get_recorded_filelist &rArr; avSendIOCtrlWithTimeout &rArr; avSendIOCtrl &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanFileOnPlaybackDir
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetPlaybackFileListHead
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetVideoDirListHead
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Time_To_Second
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Second_To_Time
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrlWithTimeout
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_TimeZone
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_DST
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[28e]"></a>gettimeofday</STRONG> (ARM, 96 bytes, Stack size 16 bytes, tutk_av_sample.o(i.gettimeofday))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gettimeofday
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCountRead
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrl
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendFrameData
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvAudioData
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckAudioBuf
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RootAction
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RootAction
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateDeviceStatus
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResponseTimeTest
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResponseTimeAck
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_callback_Try_Port
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRecentClosedClientRandomID
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTryPortNode
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckResendRequest
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCaluDoStatistics
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCaluClientDoStatistics
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCalu
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVCtrl
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectResult
</UL>

<P><STRONG><a name="[269]"></a>gpioConfig</STRONG> (ARM, 524 bytes, Stack size 0 bytes, gpio.o(i.gpioConfig))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead_B2
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead_B1
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ReadReg_B2
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ReadReg_B1
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsRfiu_FCC_DirectTXRX
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTestGPIO
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioInit
</UL>

<P><STRONG><a name="[26a]"></a>gpioGetLevel</STRONG> (ARM, 228 bytes, Stack size 4 bytes, gpio.o(i.gpioGetLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpioGetLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead_B2
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead_B1
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ReadReg_B2
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ReadReg_B1
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckMotion
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiKeyParse
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTestGPIO
</UL>

<P><STRONG><a name="[690]"></a>gpioInit</STRONG> (ARM, 396 bytes, Stack size 40 bytes, gpio.o(i.gpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = gpioInit &rArr; gpioLvTrgIntCfg &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioConfig
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsIntIRQEnable (via Veneer)
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioLvTrgIntCfg
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioIntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[691]"></a>gpioIntConfig</STRONG> (ARM, 312 bytes, Stack size 0 bytes, gpio.o(i.gpioIntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTestGPIO
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioInit
</UL>

<P><STRONG><a name="[fb]"></a>gpioIntHandler</STRONG> (ARM, 132 bytes, Stack size 16 bytes, gpio_project.o(i.gpioIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = gpioIntHandler &rArr; uiSentKeyToUi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSentKeyToUi
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Exception
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[692]"></a>gpioLvTrgIntCfg</STRONG> (ARM, 724 bytes, Stack size 24 bytes, gpio.o(i.gpioLvTrgIntCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = gpioLvTrgIntCfg &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTestGPIO
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioInit
</UL>

<P><STRONG><a name="[6a0]"></a>gpioSetDir</STRONG> (ARM, 152 bytes, Stack size 0 bytes, gpio.o(i.gpioSetDir))
<BR><BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit_GT9271
</UL>

<P><STRONG><a name="[25a]"></a>gpioSetLevel</STRONG> (ARM, 164 bytes, Stack size 0 bytes, gpio.o(i.gpioSetLevel))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF_B2
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRF_B1
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitA7196
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B2
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B1
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead_B2
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead_B1
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteReg_B2
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteReg_B1
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteID_B2
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteID_B1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WOR_enable_B1
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_TxMode_Stop
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_TxMode_Start
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_RxMode_Stop
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_RxMode_Start
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ReadReg_B2
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ReadReg_B1
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ID_Update
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Config_B2
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Config_B1
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ChgTo_6M_B2
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ChgTo_6M_B1
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ChgTo_3M_B2
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ChgTo_3M_B1
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Cal_B2
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Cal_B1
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetStartMovie
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadSwitchChannel
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckMotion
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiKeyParse
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetGoToFormat
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetOutputMode
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioTimerCtrLed
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTestGPIO
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_zeropointfivems_IntHandler
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit_GT9271
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcPowerOnRest
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMountSeq
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMount
</UL>

<P><STRONG><a name="[695]"></a>gpioTimerCtrLed</STRONG> (ARM, 140 bytes, Stack size 0 bytes, gpio_project.o(i.gpioTimerCtrLed))
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
</UL>

<P><STRONG><a name="[f6]"></a>gpio_1_IntHandler</STRONG> (ARM, 104 bytes, Stack size 16 bytes, gpio_project.o(i.gpio_1_IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = gpio_1_IntHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Exception
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[98b]"></a>hid_qh_init</STRONG> (ARM, 392 bytes, Stack size 24 bytes, ehci-hcd.o(i.hid_qh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hid_qh_init
</UL>
<BR>[Called By]<UL><LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mouse_hid_probe
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_keyboard_hid_probe
</UL>

<P><STRONG><a name="[353]"></a>htons</STRONG> (ARM, 16 bytes, Stack size 0 bytes, p2p_server.o(i.htons))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpdate
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
</UL>

<P><STRONG><a name="[696]"></a>hub_event_handle</STRONG> (ARM, 772 bytes, Stack size 56 bytes, usb-hub.o(i.hub_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = hub_event_handle &rArr; usb_hub_port_connect_change &rArr; usb_new_device &rArr; usb_string &rArr; usb_string_sub &rArr; usb_control_msg &rArr; submit_control_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scan
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_info
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_control_msg
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_port_feature
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_connect_change
</UL>

<P><STRONG><a name="[69c]"></a>hub_port_reset</STRONG> (ARM, 528 bytes, Stack size 72 bytes, usb-hub.o(i.hub_port_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = hub_port_reset &rArr; usb_clear_port_feature &rArr; usb_control_msg &rArr; submit_control_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_control_msg
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_mdelay
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_port_feature
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_new_device
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
</UL>

<P><STRONG><a name="[987]"></a>hub_qh_init</STRONG> (ARM, 220 bytes, Stack size 16 bytes, ehci-hcd.o(i.hub_qh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hub_qh_init
</UL>
<BR>[Called By]<UL><LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_probe
</UL>

<P><STRONG><a name="[69d]"></a>i2cDeviceInit</STRONG> (ARM, 176 bytes, Stack size 8 bytes, i2c.o(i.i2cDeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = i2cDeviceInit &rArr; i2cInit_GT9271 &rArr; feed_Config &rArr; i2cWrite16addr_Byte &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite_WM8940
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit_GT9271
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[73b]"></a>i2cDeviceInit2</STRONG> (ARM, 8 bytes, Stack size 0 bytes, i2c.o(i.i2cDeviceInit2))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[69f]"></a>i2cInit</STRONG> (ARM, 44 bytes, Stack size 8 bytes, i2c.o(i.i2cInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = i2cInit &rArr; SD2068_RTC_Init &rArr; Set_SD2068_RTC &rArr; i2cWrite_SD2068 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD2068_RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[69e]"></a>i2cInit_GT9271</STRONG> (ARM, 552 bytes, Stack size 40 bytes, i2c.o(i.i2cInit_GT9271))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = i2cInit_GT9271 &rArr; feed_Config &rArr; i2cWrite16addr_Byte &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetDir
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite16addr_Byte
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead16addr_Byte
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_Config
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cDeviceInit
</UL>

<P><STRONG><a name="[f4]"></a>i2cIntHandler</STRONG> (ARM, 24 bytes, Stack size 0 bytes, i2c.o(i.i2cIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = i2cIntHandler &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[342]"></a>i2cRead16addr_Byte</STRONG> (ARM, 1084 bytes, Stack size 24 bytes, i2c.o(i.i2cRead16addr_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = i2cRead16addr_Byte &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Touch_getPosition
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit_GT9271
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_Config
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9271_getPosition
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9271_PrintInfo
</UL>

<P><STRONG><a name="[6a1]"></a>i2cRead_Byte</STRONG> (ARM, 360 bytes, Stack size 32 bytes, i2c.o(i.i2cRead_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = i2cRead_Byte &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[36d]"></a>i2cRead_SD2068</STRONG> (ARM, 292 bytes, Stack size 24 bytes, i2c.o(i.i2cRead_SD2068))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = i2cRead_SD2068 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SD2068_RTC
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SD2068_RTC
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD2068_RTC_Init
</UL>

<P><STRONG><a name="[533]"></a>i2cRead_SENSOR</STRONG> (ARM, 236 bytes, Stack size 24 bytes, i2c.o(i.i2cRead_SENSOR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = i2cRead_SENSOR &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartReadSensorReg
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartReadSensorALLReg
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmdParse
</UL>

<P><STRONG><a name="[343]"></a>i2cWrite16addr_Byte</STRONG> (ARM, 216 bytes, Stack size 32 bytes, i2c.o(i.i2cWrite16addr_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = i2cWrite16addr_Byte &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Touch_getPosition
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit_GT9271
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_Config
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9271_getPosition
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9271_PrintInfo
</UL>

<P><STRONG><a name="[6a2]"></a>i2cWrite_Byte</STRONG> (ARM, 356 bytes, Stack size 32 bytes, i2c.o(i.i2cWrite_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = i2cWrite_Byte &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[4e8]"></a>i2cWrite_SD2068</STRONG> (ARM, 308 bytes, Stack size 24 bytes, i2c.o(i.i2cWrite_SD2068))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = i2cWrite_SD2068 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SD2068_RTC
</UL>

<P><STRONG><a name="[534]"></a>i2cWrite_SENSOR</STRONG> (ARM, 8 bytes, Stack size 0 bytes, i2c.o(i.i2cWrite_SENSOR))
<BR><BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWriteSensorReg
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmdParse
</UL>

<P><STRONG><a name="[54c]"></a>i2cWrite_WM8940</STRONG> (ARM, 248 bytes, Stack size 24 bytes, i2c.o(i.i2cWrite_WM8940))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = i2cWrite_WM8940 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8940_MicVol_FadeOut
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8940_MicVol_FadeIn
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8940_SpeakerMute
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8940_AdjustSpeakerVolume
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cDeviceInit
</UL>

<P><STRONG><a name="[6a3]"></a>i2c_Touch_getPosition</STRONG> (ARM, 384 bytes, Stack size 32 bytes, i2c.o(i.i2c_Touch_getPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = i2c_Touch_getPosition &rArr; i2cWrite16addr_Byte &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite16addr_Byte
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead16addr_Byte
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_100ms_IntHandler
</UL>

<P><STRONG><a name="[6a4]"></a>icmp_dest_unreach</STRONG> (ARM, 12 bytes, Stack size 0 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[6a6]"></a>icmp_input</STRONG> (ARM, 920 bytes, Stack size 48 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = icmp_input &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[6ab]"></a>icmp_time_exceeded</STRONG> (ARM, 12 bytes, Stack size 0 bytes, icmp.o(i.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[101]"></a>iduIntHandler</STRONG> (ARM, 5004 bytes, Stack size 112 bytes, idu.o(i.iduIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = iduIntHandler &rArr; iduPlaybackFrame &rArr; isCap1920x1080I &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackFrame
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[736]"></a>iduLockVideoAllColor</STRONG> (ARM, 24 bytes, Stack size 0 bytes, idu.o(i.iduLockVideoAllColor))
<BR><BR>[Called By]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowEnterMenuMode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[6ad]"></a>iduMenuMode</STRONG> (ARM, 32 bytes, Stack size 8 bytes, idu.o(i.iduMenuMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = iduMenuMode &rArr; iduPlaybackMode &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetStartMovie
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetGoToFormat
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowEnterMenuMode
</UL>

<P><STRONG><a name="[940]"></a>iduOSDClear</STRONG> (ARM, 60 bytes, Stack size 0 bytes, idu.o(i.iduOSDClear))
<BR><BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDReset
</UL>

<P><STRONG><a name="[6ae]"></a>iduOSDColorRGB</STRONG> (ARM, 536 bytes, Stack size 0 bytes, idu.o(i.iduOSDColorRGB))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduOSDDisplay1
</UL>

<P><STRONG><a name="[6b3]"></a>iduOSDColorYUV</STRONG> (ARM, 524 bytes, Stack size 0 bytes, idu.o(i.iduOSDColorYUV))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVOSDDisplay
</UL>

<P><STRONG><a name="[83a]"></a>iduOSDDisable</STRONG> (ARM, 124 bytes, Stack size 0 bytes, idu.o(i.iduOSDDisable))
<BR><BR>[Called By]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisable
</UL>

<P><STRONG><a name="[93e]"></a>iduOSDDisable_All</STRONG> (ARM, 144 bytes, Stack size 0 bytes, idu.o(i.iduOSDDisable_All))
<BR><BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDReset
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisableAll
</UL>

<P><STRONG><a name="[69]"></a>iduOSDDisplay1</STRONG> (ARM, 424 bytes, Stack size 28 bytes, idu.o(i.iduOSDDisplay1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = iduOSDDisplay1
</UL>
<BR>[Calls]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduOSDColorRGB
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDPreviewInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_osd_project.o(.data)
</UL>
<P><STRONG><a name="[839]"></a>iduOSDEnable</STRONG> (ARM, 140 bytes, Stack size 0 bytes, idu.o(i.iduOSDEnable))
<BR><BR>[Called By]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
</UL>

<P><STRONG><a name="[95a]"></a>iduOSDGetYStartEnd</STRONG> (ARM, 356 bytes, Stack size 0 bytes, idu.o(i.iduOSDGetYStartEnd))
<BR><BR>[Called By]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDMultiLanguageStrCenter
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDMultiLanguageStrByX
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorCenter
</UL>

<P><STRONG><a name="[5ba]"></a>iduPlaybackFrame</STRONG> (ARM, 576 bytes, Stack size 16 bytes, idu.o(i.iduPlaybackFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = iduPlaybackFrame &rArr; isCap1920x1080I &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCap1920x1080I
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadVideoPayload
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifApp1Parse
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifReadFile
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisPlayDMA_ISR
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduIntHandler
</UL>

<P><STRONG><a name="[396]"></a>iduPlaybackMode</STRONG> (ARM, 844 bytes, Stack size 40 bytes, idu.o(i.iduPlaybackMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = iduPlaybackMode &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TV_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuCamOnOffCmd
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfiuInit
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadHeaderObject
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckP2PMode
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuTreeInit
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeChannel
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOutputRedirection
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduMenuMode
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[8f6]"></a>iduPreviewMode</STRONG> (ARM, 4 bytes, Stack size 0 bytes, idu.o(i.iduPreviewMode))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetStartMovie
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
</UL>

<P><STRONG><a name="[83f]"></a>iduRst</STRONG> (ARM, 64 bytes, Stack size 0 bytes, idu.o(i.iduRst))
<BR><BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetOutputMode
</UL>

<P><STRONG><a name="[834]"></a>iduSetVBuff</STRONG> (ARM, 24 bytes, Stack size 0 bytes, idu.o(i.iduSetVBuff))
<BR><BR>[Called By]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
</UL>

<P><STRONG><a name="[82b]"></a>iduSetVidBufAddr</STRONG> (ARM, 132 bytes, Stack size 0 bytes, idu.o(i.iduSetVidBufAddr))
<BR><BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackMoveForward
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackMoveBackward
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDelete
</UL>

<P><STRONG><a name="[7a2]"></a>iduSetVideoBuf0Addr</STRONG> (ARM, 44 bytes, Stack size 0 bytes, idu.o(i.iduSetVideoBuf0Addr))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetStartMovie
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPairInMenu
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawUpgradeFW
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSystemReboot
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRunFormat
</UL>

<P><STRONG><a name="[6af]"></a>iduSwitchNTSCPAL</STRONG> (ARM, 144 bytes, Stack size 16 bytes, idu.o(i.iduSwitchNTSCPAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = iduSwitchNTSCPAL &rArr; TV_init
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TV_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TVout_Format
</UL>

<P><STRONG><a name="[373]"></a>iduTVColorbar_onoff</STRONG> (ARM, 92 bytes, Stack size 8 bytes, idu.o(i.iduTVColorbar_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = iduTVColorbar_onoff &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeChannel
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PStatueToRF
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_DecompressOneFrame
</UL>

<P><STRONG><a name="[6b0]"></a>iduTVOSDBRI</STRONG> (ARM, 268 bytes, Stack size 8 bytes, idu.o(i.iduTVOSDBRI))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = iduTVOSDBRI &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVOSDDisplay
</UL>

<P><STRONG><a name="[93f]"></a>iduTVOSDClear</STRONG> (ARM, 88 bytes, Stack size 0 bytes, idu.o(i.iduTVOSDClear))
<BR><BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDReset
</UL>

<P><STRONG><a name="[6b1]"></a>iduTVOSDDisable</STRONG> (ARM, 176 bytes, Stack size 8 bytes, idu.o(i.iduTVOSDDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = iduTVOSDDisable &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisableAll
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisable
</UL>

<P><STRONG><a name="[6b2]"></a>iduTVOSDDisable_All</STRONG> (ARM, 172 bytes, Stack size 16 bytes, idu.o(i.iduTVOSDDisable_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = iduTVOSDDisable_All &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDReset
</UL>

<P><STRONG><a name="[6a]"></a>iduTVOSDDisplay</STRONG> (ARM, 416 bytes, Stack size 40 bytes, idu.o(i.iduTVOSDDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = iduTVOSDDisplay &rArr; iduTVOSDBRI &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVOSDBRI
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduOSDColorYUV
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDPreviewInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_osd_project.o(.data)
</UL>
<P><STRONG><a name="[39b]"></a>iduTVOSDEnable</STRONG> (ARM, 272 bytes, Stack size 8 bytes, idu.o(i.iduTVOSDEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = iduTVOSDEnable &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[737]"></a>iduUnlockVideoAllColor</STRONG> (ARM, 20 bytes, Stack size 0 bytes, idu.o(i.iduUnlockVideoAllColor))
<BR><BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowEnterMenuMode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[5ad]"></a>iis5Init</STRONG> (ARM, 408 bytes, Stack size 16 bytes, iis.o(i.iis5Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = iis5Init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Sem
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5SetPlayFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfInit
</UL>

<P><STRONG><a name="[5b5]"></a>iis5Reset</STRONG> (ARM, 164 bytes, Stack size 8 bytes, iis.o(i.iis5Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = iis5Reset &rArr; adcInitDAC_Play &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5SetPlayFormat
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInitDAC_Play
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
</UL>

<P><STRONG><a name="[6b4]"></a>iis5SetNextPlayDMA</STRONG> (ARM, 64 bytes, Stack size 24 bytes, iis.o(i.iis5SetNextPlayDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = iis5SetNextPlayDMA &rArr; marsDMAConfig &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuAudioPlayDMA_ISR
</UL>

<P><STRONG><a name="[5bb]"></a>iis5SetPlayFormat</STRONG> (ARM, 268 bytes, Stack size 0 bytes, iis.o(i.iis5SetPlayFormat))
<BR><BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisInit
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5Reset
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5Init
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadHeaderObject
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavReadFile_PCM
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisReset
</UL>

<P><STRONG><a name="[5b3]"></a>iis5StopPlay</STRONG> (ARM, 100 bytes, Stack size 16 bytes, iis.o(i.iis5StopPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = iis5StopPlay &rArr; marsDMAClose &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAClose
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
</UL>

<P><STRONG><a name="[84a]"></a>iisCaptureVideoInit</STRONG> (ARM, 24 bytes, Stack size 0 bytes, iis.o(i.iisCaptureVideoInit))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysVOICE_REC
</UL>

<P><STRONG><a name="[5ac]"></a>iisInit</STRONG> (ARM, 492 bytes, Stack size 16 bytes, iis.o(i.iisInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = iisInit &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Sem
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5SetPlayFormat
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysIIS_enable
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisSetRecFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfInit
</UL>

<P><STRONG><a name="[ee]"></a>iisIntHandler</STRONG> (ARM, 108 bytes, Stack size 0 bytes, iis.o(i.iisIntHandler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[e1]"></a>iisPlayDMA_ISR</STRONG> (ARM, 592 bytes, Stack size 56 bytes, iis.o(i.iisPlayDMA_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = iisPlayDMA_ISR &rArr; iduPlaybackFrame &rArr; isCap1920x1080I &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAConfig
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Sem
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis.o(i.iisTask)
</UL>
<P><STRONG><a name="[e2]"></a>iisRecDMA_ISR</STRONG> (ARM, 356 bytes, Stack size 40 bytes, iis.o(i.iisRecDMA_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = iisRecDMA_ISR &rArr; marsDMAConfig &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCountRead
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAConfig
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iis.o(i.iisTask)
</UL>
<P><STRONG><a name="[6b9]"></a>iisReset</STRONG> (ARM, 212 bytes, Stack size 8 bytes, iis.o(i.iisReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = iisReset &rArr; adcInitDAC_Play &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5SetPlayFormat
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisSetRecFormat
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInitDAC_Play
</UL>
<BR>[Called By]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoice
</UL>

<P><STRONG><a name="[5b1]"></a>iisResumeTask</STRONG> (ARM, 60 bytes, Stack size 8 bytes, iis.o(i.iisResumeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = iisResumeTask &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
</UL>

<P><STRONG><a name="[6ba]"></a>iisSetNextRecDMA</STRONG> (ARM, 68 bytes, Stack size 24 bytes, iis.o(i.iisSetNextRecDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = iisSetNextRecDMA &rArr; marsDMAConfig &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuAudioRet_RecDMA_ISR
</UL>

<P><STRONG><a name="[6b8]"></a>iisSetRecFormat</STRONG> (ARM, 256 bytes, Stack size 0 bytes, iis.o(i.iisSetRecFormat))
<BR><BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisInit
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisReset
</UL>

<P><STRONG><a name="[7b7]"></a>iisStartPlay</STRONG> (ARM, 40 bytes, Stack size 0 bytes, iis.o(i.iisStartPlay))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuAudioPlayDMA_ISR
</UL>

<P><STRONG><a name="[7b8]"></a>iisStartRec</STRONG> (ARM, 28 bytes, Stack size 0 bytes, iis.o(i.iisStartRec))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuAudioRet_RecDMA_ISR
</UL>

<P><STRONG><a name="[6bb]"></a>iisStopPlay</STRONG> (ARM, 100 bytes, Stack size 16 bytes, iis.o(i.iisStopPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = iisStopPlay &rArr; marsDMAClose &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAClose
</UL>
<BR>[Called By]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
</UL>

<P><STRONG><a name="[5b4]"></a>iisSuspendTask</STRONG> (ARM, 20 bytes, Stack size 8 bytes, iis.o(i.iisSuspendTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = iisSuspendTask &rArr; OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
</UL>

<P><STRONG><a name="[e0]"></a>iisTask</STRONG> (ARM, 1792 bytes, Stack size 32 bytes, iis.o(i.iisTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = iisTask &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAOpen
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAConfig
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfPausePlayback
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 2]<UL><LI> iis.o(i.iis5Init)
<LI> iis.o(i.iisInit)
</UL>
<P><STRONG><a name="[2b6]"></a>inet_addr</STRONG> (ARM, 28 bytes, Stack size 8 bytes, ip4_addr.o(i.inet_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = inet_addr &rArr; ip4addr_aton &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpdate
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DN2IP
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
</UL>

<P><STRONG><a name="[6a8]"></a>inet_chksum</STRONG> (ARM, 24 bytes, Stack size 4 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[6a7]"></a>inet_chksum_pbuf</STRONG> (ARM, 132 bytes, Stack size 16 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[6bf]"></a>inet_chksum_pseudo_partial</STRONG> (ARM, 388 bytes, Stack size 40 bytes, inet_chksum.o(i.inet_chksum_pseudo_partial), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[6c0]"></a>initMemoryPool</STRONG> (ARM, 2560 bytes, Stack size 96 bytes, memorypool.o(i.initMemoryPool))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = initMemoryPool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_heap_size
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLwipRamHeap
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLwipBuf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[419]"></a>initRF_B1</STRONG> (ARM, 476 bytes, Stack size 56 bytes, amic7196.o(i.initRF_B1))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = initRF_B1 &rArr; A7196_Cal_B1 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B1
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead_B1
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteReg_B1
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Config_B1
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Cal_B1
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitA7196
</UL>

<P><STRONG><a name="[41a]"></a>initRF_B2</STRONG> (ARM, 476 bytes, Stack size 56 bytes, amic7196.o(i.initRF_B2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = initRF_B2 &rArr; A7196_Cal_B2 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSend_B2
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteRead_B2
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteReg_B2
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Config_B2
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_Cal_B2
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitA7196
</UL>

<P><STRONG><a name="[254]"></a>init_serial_A</STRONG> (ARM, 364 bytes, Stack size 40 bytes, uart.o(i.init_serial_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = init_serial_A
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[3e2]"></a>iotc_SendMessage</STRONG> (ARM, 196 bytes, Stack size 1560 bytes, iotcapis.o(i.iotc_SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816 + Unknown Stack Size
<LI>Call Chain = iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransCodePartial
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UdpRelaySessionInfoRequestServer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_thread_Session_Alive
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_callback_Try_Port
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Search_R
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Search
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Rly_Knock_R
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_RLYClose
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_P2PClose
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Knock_RR
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Knock_R
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Knock
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_SendDeviceLogin1
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_SESSION_INFO2
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_REQUEST_R2
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendIOTC_Query_Device
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Punch_To
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_SendHello1
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectResult
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectErrorCode_inner
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
</UL>

<P><STRONG><a name="[40c]"></a>iotc_convert_to_IPv4_addr</STRONG> (ARM, 8 bytes, Stack size 0 bytes, iotc_util.o(i.iotc_convert_to_IPv4_addr))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLanSearchInfoList
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check_Ex
</UL>

<P><STRONG><a name="[6c4]"></a>iotc_free_host_list</STRONG> (ARM, 168 bytes, Stack size 16 bytes, iotc_util.o(i.iotc_free_host_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = iotc_free_host_list &rArr; ttk_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexDelete
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_mutex_unlock
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_mutex_lock
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_customize_master
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_resolve_master
</UL>

<P><STRONG><a name="[6c8]"></a>iotc_lookup_host</STRONG> (ARM, 1288 bytes, Stack size 112 bytes, iotc_util.o(i.iotc_lookup_host))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = iotc_lookup_host &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexDelete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_mutex_unlock
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_mutex_lock
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_mutex_init
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_mem_free
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_customize_master
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_resolve_master
</UL>

<P><STRONG><a name="[3f1]"></a>iotc_netaddr_get_content</STRONG> (ARM, 272 bytes, Stack size 88 bytes, iotc_util.o(i.iotc_netaddr_get_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = iotc_netaddr_get_content &rArr; tutk_platform_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Update_VPGServerList
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UdpRelaySessionInfoRequestServer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_thread_Session_Alive
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_RLYClose
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_P2PClose
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLanSearchTaskCB
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeepNATCB
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceLoginCB
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LanSearchPrecheckRTaskCB
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_update_ip
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Check_Server
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectResult
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectErrorCode_inner
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check_Ex
</UL>

<P><STRONG><a name="[289]"></a>iotc_netaddr_put_content</STRONG> (ARM, 360 bytes, Stack size 80 bytes, iotc_util.o(i.iotc_netaddr_put_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = iotc_netaddr_put_content &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_Session
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateUdpServerRelayRequestRStatus
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateServerProtocolVersion
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateDeviceStatus
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSendPath
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_SESSION_INFO2
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Punch_To
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckDeviceWANAddrLocked
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Update_Server_ProtoVer
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSendLANSearch
</UL>

<P><STRONG><a name="[6cb]"></a>iotc_resolve_master</STRONG> (ARM, 392 bytes, Stack size 48 bytes, iotcapis.o(i.iotc_resolve_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = iotc_resolve_master &rArr; iotc_lookup_host &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_lookup_host
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_free_host_list
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_update_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_thread_resolve_master_name_new
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_resolve_master_all
</UL>

<P><STRONG><a name="[3d1]"></a>iotc_resolve_master_all</STRONG> (ARM, 148 bytes, Stack size 24 bytes, iotcapis.o(i.iotc_resolve_master_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = iotc_resolve_master_all &rArr; iotc_resolve_master &rArr; iotc_lookup_host &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_set_thread_name
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_resolve_master
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
</UL>

<P><STRONG><a name="[574]"></a>iotc_sockaddr_to_ip_addr</STRONG> (ARM, 220 bytes, Stack size 88 bytes, iotc_util.o(i.iotc_sockaddr_to_ip_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = iotc_sockaddr_to_ip_addr &rArr; ttk_host_get_sockaddr &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_inet_ntop
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_host_get_sockaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Update_VPGServerList
</UL>

<P><STRONG><a name="[3f4]"></a>iotc_sockaddr_to_ip_string</STRONG> (ARM, 44 bytes, Stack size 8 bytes, iotc_util.o(i.iotc_sockaddr_to_ip_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = iotc_sockaddr_to_ip_string &rArr; tutk_platform_inet_ntop &rArr; ipaddr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_inet_ntop
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_callback_Try_Port
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_SendDeviceLogin1
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_GetLocalIPAddr
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Punch_To
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check_Ex
</UL>

<P><STRONG><a name="[6cf]"></a>iotc_thread_resolve_master_name_new</STRONG> (ARM, 176 bytes, Stack size 24 bytes, iotcapis.o(i.iotc_thread_resolve_master_name_new), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_set_thread_name
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_resolve_master
</UL>

<P><STRONG><a name="[6cc]"></a>iotc_update_ip</STRONG> (ARM, 256 bytes, Stack size 120 bytes, iotcapis.o(i.iotc_update_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = iotc_update_ip &rArr; iotc_netaddr_get_content &rArr; tutk_platform_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_get_content
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_customize_master
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_resolve_master
</UL>

<P><STRONG><a name="[666]"></a>ip4_addr_isbroadcast_u32</STRONG> (ARM, 76 bytes, Stack size 0 bytes, ip4_addr.o(i.ip4_addr_isbroadcast_u32))
<BR><BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[6d0]"></a>ip4_frag</STRONG> (ARM, 960 bytes, Stack size 80 bytes, ip4_frag.o(i.ip4_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>

<P><STRONG><a name="[13c]"></a>ip4_input</STRONG> (ARM, 984 bytes, Stack size 40 bytes, ip4.o(i.ip4_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ip4_input &rArr; tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_accept_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_input)
</UL>
<P><STRONG><a name="[6a9]"></a>ip4_output_if</STRONG> (ARM, 64 bytes, Stack size 32 bytes, ip4.o(i.ip4_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[6d8]"></a>ip4_output_if_src</STRONG> (ARM, 804 bytes, Stack size 40 bytes, ip4.o(i.ip4_output_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>

<P><STRONG><a name="[6d4]"></a>ip4_reass</STRONG> (ARM, 2588 bytes, Stack size 56 bytes, ip4_frag.o(i.ip4_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = ip4_reass &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[6aa]"></a>ip4_route</STRONG> (ARM, 180 bytes, Stack size 4 bytes, ip4.o(i.ip4_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[647]"></a>ip4addr_aton</STRONG> (ARM, 572 bytes, Stack size 48 bytes, ip4_addr.o(i.ip4addr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ip4addr_aton &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
</UL>

<P><STRONG><a name="[359]"></a>ip4addr_ntoa</STRONG> (ARM, 236 bytes, Stack size 44 bytes, ip4_addr.o(i.ip4addr_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ip4addr_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
</UL>

<P><STRONG><a name="[2b8]"></a>ip4addr_ntoa_r</STRONG> (ARM, 228 bytes, Stack size 44 bytes, ip4_addr.o(i.ip4addr_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PSendEvent
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DN2IP
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
</UL>

<P><STRONG><a name="[6dc]"></a>ip_chksum_pseudo</STRONG> (ARM, 228 bytes, Stack size 24 bytes, inet_chksum.o(i.ip_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ip_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[6dd]"></a>ip_chksum_pseudo_partial</STRONG> (ARM, 308 bytes, Stack size 40 bytes, inet_chksum.o(i.ip_chksum_pseudo_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ip_chksum_pseudo_partial &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[177]"></a>ip_reass_tmr</STRONG> (ARM, 84 bytes, Stack size 16 bytes, ip4_frag.o(i.ip_reass_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[3e1]"></a>ipaddr_addr</STRONG> (ARM, 28 bytes, Stack size 8 bytes, ip4_addr.o(i.ipaddr_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ipaddr_addr &rArr; ip4addr_aton &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_sendMessageTo
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_SendDeviceLogin1
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_GetLocalIPAddr
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPrivateIP
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectResult
</UL>

<P><STRONG><a name="[43b]"></a>ipaddr_ntoa</STRONG> (ARM, 236 bytes, Stack size 44 bytes, sockets.o(i.ipaddr_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ipaddr_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_getLocal
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_receivingMsg
</UL>

<P><STRONG><a name="[87e]"></a>ipaddr_ntoa_r</STRONG> (ARM, 228 bytes, Stack size 44 bytes, sockets.o(i.ipaddr_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ipaddr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_inet_ntop
</UL>

<P><STRONG><a name="[105]"></a>ipuIntHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ipu.o(i.ipuIntHandler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[472]"></a>ipuStop</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ipu.o(i.ipuStop))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysVOICE_REC
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
</UL>

<P><STRONG><a name="[374]"></a>isCap1920x1080I</STRONG> (ARM, 56 bytes, Stack size 8 bytes, ep952controller.o(i.isCap1920x1080I))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = isCap1920x1080I &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackFrame
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Decoding1Frame
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_InitBuf
</UL>

<P><STRONG><a name="[2b]"></a>ispFirmwareNetPrepare</STRONG> (ARM, 288 bytes, Stack size 16 bytes, isp.o(i.ispFirmwareNetPrepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 3480 + Unknown Stack Size
<LI>Call Chain = ispFirmwareNetPrepare &rArr; Clear_Session_Status &rArr; client_p2pdisconnected &rArr; IOTC_Session_Close &rArr; _IOTC_Send_RLYClose &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_Net_SetEvt
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetFWUpgradeStatus
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_DeInitialize
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Session_Status
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReleSemProcess
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBlkSemProcess
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>ispFirmwareNetUpdateFlow</STRONG> (ARM, 464 bytes, Stack size 24 bytes, isp.o(i.ispFirmwareNetUpdateFlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 3848 + Unknown Stack Size
<LI>Call Chain = ispFirmwareNetUpdateFlow &rArr; osdDrawISPNow &rArr; osdDrawPreviewIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSPI_Enable
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Enable
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiallCodeUpdate
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetFWUpgradeStatus
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawISPNow
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_off
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_init
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSemProcess
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[6e4]"></a>ispFirmwareUpdateFlow</STRONG> (ARM, 424 bytes, Stack size 16 bytes, isp.o(i.ispFirmwareUpdateFlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 4080 + Unknown Stack Size
<LI>Call Chain = ispFirmwareUpdateFlow &rArr; ispUpdateAllload &rArr; osdDrawISPNow &rArr; osdDrawPreviewIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Enable
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetFWUpgradeStatus
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_off
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_init
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_DeInitialize
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Session_Status
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReleSemProcess
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBlkSemProcess
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDevInsertedUpgradeEvt
</UL>

<P><STRONG><a name="[6e6]"></a>ispUpdate</STRONG> (ARM, 656 bytes, Stack size 24 bytes, isp.o(i.ispUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3848 + Unknown Stack Size
<LI>Call Chain = ispUpdate &rArr; osdDrawISPNow &rArr; osdDrawPreviewIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfRead
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOpen
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupRead
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupOpen
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupClose
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSPI_Enable
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Enable
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Disable
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMount
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCodeUpdate
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCmpWriteData
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawISPNow
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUpgradeFW
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackIsp
</UL>

<P><STRONG><a name="[6e5]"></a>ispUpdateAllload</STRONG> (ARM, 1104 bytes, Stack size 240 bytes, isp.o(i.ispUpdateAllload))
<BR><BR>[Stack]<UL><LI>Max Depth = 4064 + Unknown Stack Size
<LI>Call Chain = ispUpdateAllload &rArr; osdDrawISPNow &rArr; osdDrawPreviewIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfRead
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOpen
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupRead
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupOpen
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupClose
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSPI_Enable
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Enable
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Disable
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiallCodeUpdate
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMount
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawISPNow
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareUpdateFlow
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUpgradeFW
</UL>

<P><STRONG><a name="[360]"></a>ispUpdateAllload_Net</STRONG> (ARM, 236 bytes, Stack size 16 bytes, isp.o(i.ispUpdateAllload_Net))
<BR><BR>[Stack]<UL><LI>Max Depth = 3840 + Unknown Stack Size
<LI>Call Chain = ispUpdateAllload_Net &rArr; osdDrawISPNow &rArr; osdDrawPreviewIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSPI_Enable
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Enable
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiallCodeUpdate
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawISPNow
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
</UL>

<P><STRONG><a name="[6ea]"></a>ispUpdatebootload</STRONG> (ARM, 664 bytes, Stack size 24 bytes, isp.o(i.ispUpdatebootload))
<BR><BR>[Stack]<UL><LI>Max Depth = 3848 + Unknown Stack Size
<LI>Call Chain = ispUpdatebootload &rArr; osdDrawISPNow &rArr; osdDrawPreviewIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfRead
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOpen
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupRead
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupOpen
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupClose
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSPI_Enable
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Enable
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Disable
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spibootCodeUpdate
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMount
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCmpBootWriteData
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawISPNow
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUpgradeFW
</UL>

<P><STRONG><a name="[6ed]"></a>isuInit</STRONG> (ARM, 28 bytes, Stack size 8 bytes, isu.o(i.isuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = isuInit &rArr; OSSemCreate &rArr; OS_EventWaitListInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[100]"></a>isuIntHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, isu.o(i.isuIntHandler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[674]"></a>isuPlayback</STRONG> (ARM, 8 bytes, Stack size 0 bytes, isu.o(i.isuPlayback))
<BR><BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifApp1Parse
</UL>

<P><STRONG><a name="[545]"></a>isuPlayback_av</STRONG> (ARM, 8 bytes, Stack size 0 bytes, isu.o(i.isuPlayback_av))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoTask
</UL>

<P><STRONG><a name="[471]"></a>isuStop</STRONG> (ARM, 4 bytes, Stack size 0 bytes, isu.o(i.isuStop))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysVOICE_REC
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
</UL>

<P><STRONG><a name="[6ee]"></a>jpegCapturePreviewImg</STRONG> (ARM, 196 bytes, Stack size 64 bytes, jpeg.o(i.jpegCapturePreviewImg))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = jpegCapturePreviewImg &rArr; JPEG_Enc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetQuantizationTable
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Enc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureImage_OnRFRx
</UL>

<P><STRONG><a name="[673]"></a>jpegDecompression</STRONG> (ARM, 688 bytes, Stack size 32 bytes, jpeg.o(i.jpegDecompression))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = jpegDecompression &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJpegRst
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifApp1Parse
</UL>

<P><STRONG><a name="[683]"></a>jpegDecompressionYUV420</STRONG> (ARM, 540 bytes, Stack size 40 bytes, jpeg.o(i.jpegDecompressionYUV420))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = jpegDecompressionYUV420 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJpegRst
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifReadFile
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJpgGraph
</UL>

<P><STRONG><a name="[6ef]"></a>jpegInit</STRONG> (ARM, 52 bytes, Stack size 8 bytes, jpeg.o(i.jpegInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = jpegInit &rArr; OSSemCreate &rArr; OS_EventWaitListInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJpegRst
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[104]"></a>jpegIntHandler</STRONG> (ARM, 116 bytes, Stack size 8 bytes, jpeg.o(i.jpegIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = jpegIntHandler &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJpegRst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[6f0]"></a>jpegRAW420</STRONG> (ARM, 128 bytes, Stack size 48 bytes, jpeg.o(i.jpegRAW420))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpegRAW420
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJpgGraph
</UL>

<P><STRONG><a name="[67b]"></a>jpegSetDataFormat</STRONG> (ARM, 16 bytes, Stack size 0 bytes, jpeg.o(i.jpegSetDataFormat))
<BR><BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifFileParse
</UL>

<P><STRONG><a name="[6f1]"></a>jpegSetHuffmanDecodeTable</STRONG> (ARM, 1012 bytes, Stack size 680 bytes, jpeg.o(i.jpegSetHuffmanDecodeTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = jpegSetHuffmanDecodeTable
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetHuffmanTable
</UL>

<P><STRONG><a name="[679]"></a>jpegSetHuffmanTable</STRONG> (ARM, 52 bytes, Stack size 8 bytes, jpeg.o(i.jpegSetHuffmanTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetHuffmanDecodeTable
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifFileParse
</UL>

<P><STRONG><a name="[67c]"></a>jpegSetImageResolution</STRONG> (ARM, 160 bytes, Stack size 16 bytes, jpeg.o(i.jpegSetImageResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpegSetImageResolution
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifFileParse
</UL>

<P><STRONG><a name="[677]"></a>jpegSetQuantizationQuality</STRONG> (ARM, 300 bytes, Stack size 8 bytes, jpeg.o(i.jpegSetQuantizationQuality))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpegSetQuantizationQuality &rArr; exifSetQuantizationTable
</UL>
<BR>[Calls]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifSetQuantizationTable
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifFileInit
</UL>

<P><STRONG><a name="[67d]"></a>jpegSetQuantizationTable</STRONG> (ARM, 484 bytes, Stack size 12 bytes, jpeg.o(i.jpegSetQuantizationTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = jpegSetQuantizationTable
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifSosParse
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifFileParse
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCapturePreviewImg
</UL>

<P><STRONG><a name="[67a]"></a>jpegSetRestartInterval</STRONG> (ARM, 28 bytes, Stack size 0 bytes, jpeg.o(i.jpegSetRestartInterval))
<BR><BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifFileParse
</UL>

<P><STRONG><a name="[6f3]"></a>low_level_init</STRONG> (ARM, 148 bytes, Stack size 16 bytes, ethernetif.o(i.low_level_init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6_arm
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[507]"></a>lwipBufInit</STRONG> (ARM, 428 bytes, Stack size 16 bytes, porting.o(i.lwipBufInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = lwipBufInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_LwIPEntry
</UL>

<P><STRONG><a name="[436]"></a>lwip_accept</STRONG> (ARM, 868 bytes, Stack size 64 bytes, sockets.o(i.lwip_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = lwip_accept &rArr; netconn_delete &rArr; netconn_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_acceptTCPconnection
</UL>

<P><STRONG><a name="[443]"></a>lwip_bind</STRONG> (ARM, 256 bytes, Stack size 16 bytes, sockets.o(i.lwip_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = lwip_bind &rArr; netconn_bind &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_setup
</UL>

<P><STRONG><a name="[6f9]"></a>lwip_chksum_copy</STRONG> (ARM, 32 bytes, Stack size 16 bytes, inet_chksum.o(i.lwip_chksum_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = lwip_chksum_copy &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[357]"></a>lwip_close</STRONG> (ARM, 168 bytes, Stack size 24 bytes, sockets.o(i.lwip_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = lwip_close &rArr; netconn_delete &rArr; netconn_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpdate
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PSendEvent
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpConnect2
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection_destroy
</UL>

<P><STRONG><a name="[356]"></a>lwip_connect</STRONG> (ARM, 280 bytes, Stack size 16 bytes, sockets.o(i.lwip_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = lwip_connect &rArr; netconn_disconnect &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpConnect2
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_setup
</UL>

<P><STRONG><a name="[441]"></a>lwip_fcntl</STRONG> (ARM, 140 bytes, Stack size 8 bytes, sockets.o(i.lwip_fcntl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwip_fcntl
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpConnect2
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_setup
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionHandlerThread
</UL>

<P><STRONG><a name="[2b9]"></a>lwip_freeaddrinfo</STRONG> (ARM, 40 bytes, Stack size 8 bytes, netdb.o(i.lwip_freeaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = lwip_freeaddrinfo &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DN2IP
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_lookup_hostname
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_host_get_sockaddr
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_put_content
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_lookup_host
</UL>

<P><STRONG><a name="[2b7]"></a>lwip_getaddrinfo</STRONG> (ARM, 656 bytes, Stack size 40 bytes, netdb.o(i.lwip_getaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DN2IP
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_lookup_hostname
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_host_get_sockaddr
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_put_content
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_lookup_host
</UL>

<P><STRONG><a name="[439]"></a>lwip_getsockname</STRONG> (ARM, 188 bytes, Stack size 48 bytes, sockets.o(i.lwip_getsockname))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = lwip_getsockname &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_setup
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_connectedReadyToSend
</UL>

<P><STRONG><a name="[33c]"></a>lwip_getsockopt</STRONG> (ARM, 1096 bytes, Stack size 56 bytes, sockets.o(i.lwip_getsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = lwip_getsockopt &rArr; sys_mutex_lock &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpConnect2
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fd_RootAction
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionHandlerThread
</UL>

<P><STRONG><a name="[442]"></a>lwip_htonl</STRONG> (ARM, 32 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_setup
</UL>

<P><STRONG><a name="[3d4]"></a>lwip_htons</STRONG> (ARM, 16 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo_partial
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_callback_Try_Port
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_GetLocalIPAddr
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_OpenUDP_P2PSocket
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_OpenUDP_LANSocket
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_update_ip
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_resolve_master
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[1b3]"></a>lwip_init</STRONG> (ARM, 44 bytes, Stack size 8 bytes, init_1.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = lwip_init &rArr; netif_init &rArr; dhcp_network_changed &rArr; dhcp_discover &rArr; autoip_start &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[709]"></a>lwip_ioctl</STRONG> (ARM, 260 bytes, Stack size 24 bytes, sockets.o(i.lwip_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = lwip_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpdate
</UL>

<P><STRONG><a name="[444]"></a>lwip_listen</STRONG> (ARM, 144 bytes, Stack size 16 bytes, sockets.o(i.lwip_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = lwip_listen &rArr; netconn_listen_with_backlog &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_setup
</UL>

<P><STRONG><a name="[10e]"></a>lwip_netconn_do_bind</STRONG> (ARM, 148 bytes, Stack size 8 bytes, api_msg.o(i.lwip_netconn_do_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_bind &rArr; tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout_debug &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_bind)
</UL>
<P><STRONG><a name="[10f]"></a>lwip_netconn_do_close</STRONG> (ARM, 460 bytes, Stack size 8 bytes, api_msg.o(i.lwip_netconn_do_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_close &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 3]<UL><LI> api_lib.o(i.netconn_recv_data)
<LI> api_lib.o(i.netconn_shutdown)
<LI> api_lib.o(i.netconn_close)
</UL>
<P><STRONG><a name="[110]"></a>lwip_netconn_do_connect</STRONG> (ARM, 580 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_connect &rArr; tcp_connect &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_connect)
</UL>
<P><STRONG><a name="[111]"></a>lwip_netconn_do_delconn</STRONG> (ARM, 640 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_delconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_delconn &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_delete)
</UL>
<P><STRONG><a name="[112]"></a>lwip_netconn_do_disconnect</STRONG> (ARM, 96 bytes, Stack size 8 bytes, api_msg.o(i.lwip_netconn_do_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_disconnect)
</UL>
<P><STRONG><a name="[113]"></a>lwip_netconn_do_getaddr</STRONG> (ARM, 364 bytes, Stack size 8 bytes, api_msg.o(i.lwip_netconn_do_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_getaddr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_getaddr)
</UL>
<P><STRONG><a name="[114]"></a>lwip_netconn_do_gethostbyname</STRONG> (ARM, 64 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_gethostbyname &rArr; dns_gethostbyname_addrtype &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_gethostbyname)
</UL>
<P><STRONG><a name="[115]"></a>lwip_netconn_do_listen</STRONG> (ARM, 344 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_listen &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_listen_with_backlog)
</UL>
<P><STRONG><a name="[116]"></a>lwip_netconn_do_newconn</STRONG> (ARM, 308 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_newconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_newconn &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_new_with_proto_and_callback)
</UL>
<P><STRONG><a name="[117]"></a>lwip_netconn_do_recv</STRONG> (ARM, 144 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_recv_data)
</UL>
<P><STRONG><a name="[118]"></a>lwip_netconn_do_send</STRONG> (ARM, 156 bytes, Stack size 8 bytes, api_msg.o(i.lwip_netconn_do_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_send &rArr; udp_sendto &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_send)
</UL>
<P><STRONG><a name="[119]"></a>lwip_netconn_do_write</STRONG> (ARM, 512 bytes, Stack size 8 bytes, api_msg.o(i.lwip_netconn_do_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_write &rArr; lwip_netconn_do_writemore &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_write_partly)
</UL>
<P><STRONG><a name="[28f]"></a>lwip_ntohs</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sockets.o(i.lwip_ntohs))
<BR><BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_print
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_host_get_sockaddr
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_lan_search_record
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_lan_search_record_found
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_callback_Try_Port
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_OpenUDP_P2PSocket
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTryPortNode
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check_Ex
</UL>

<P><STRONG><a name="[35b]"></a>lwip_recv</STRONG> (ARM, 32 bytes, Stack size 16 bytes, sockets.o(i.lwip_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpdate
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_receivingMsg
</UL>

<P><STRONG><a name="[43d]"></a>lwip_recvfrom</STRONG> (ARM, 912 bytes, Stack size 80 bytes, sockets.o(i.lwip_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_receivingMsg
</UL>

<P><STRONG><a name="[43e]"></a>lwip_select</STRONG> (ARM, 1276 bytes, Stack size 136 bytes, sockets.o(i.lwip_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = lwip_select &rArr; lwip_selscan &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpConnect2
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_sendMessageTo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_sendMessage
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionHandlerThread
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_Run
</UL>

<P><STRONG><a name="[35a]"></a>lwip_send</STRONG> (ARM, 168 bytes, Stack size 24 bytes, sockets.o(i.lwip_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpSendAll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_sendMessageTo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_sendMessage
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RootAction
</UL>

<P><STRONG><a name="[43f]"></a>lwip_sendto</STRONG> (ARM, 460 bytes, Stack size 40 bytes, sockets.o(i.lwip_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpdate
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_sendMessageTo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_sendMessage
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RootAction
</UL>

<P><STRONG><a name="[355]"></a>lwip_setsockopt</STRONG> (ARM, 912 bytes, Stack size 40 bytes, sockets.o(i.lwip_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = lwip_setsockopt &rArr; sys_mutex_lock &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpSetSendTimeout
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpConnect2
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_changeDistance
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection_new
</UL>

<P><STRONG><a name="[4bf]"></a>lwip_shutdown</STRONG> (ARM, 176 bytes, Stack size 16 bytes, sockets.o(i.lwip_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = lwip_shutdown &rArr; netconn_shutdown &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PSendEvent
</UL>

<P><STRONG><a name="[354]"></a>lwip_socket</STRONG> (ARM, 284 bytes, Stack size 24 bytes, sockets.o(i.lwip_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpdate
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fw
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpConnect2
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection_new
</UL>

<P><STRONG><a name="[6be]"></a>lwip_standard_chksum</STRONG> (ARM, 216 bytes, Stack size 24 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_chksum_copy
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo_partial
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
</UL>

<P><STRONG><a name="[648]"></a>lwip_strnicmp</STRONG> (ARM, 84 bytes, Stack size 8 bytes, def.o(i.lwip_strnicmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwip_strnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[255]"></a>$Super$$main</STRONG> (ARM, 316 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; initMemoryPool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmemInit
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAInit
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerInit
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMemoryPool
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpuInit (via Veneer)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSVersion (via Veneer)
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart (via Veneer)
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit (via Veneer)
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_intInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>mainTask</STRONG> (ARM, 644 bytes, Stack size 8 bytes, main_task_project.o(i.mainTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 4040 + Unknown Stack Size
<LI>Call Chain = mainTask &rArr; uiInit &rArr; uiMenuSetBootSetting &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial_A
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiuInit
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Start
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfiuInit
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDeadLockMonitor_Reset
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_init
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDPreviewInit
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfInit
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idu_ClearBuf
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_background_init
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_back_RF_Task_init
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_back_Network_Task_init
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_backLowTask_init
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetStorageStatus
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPowerOff
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysKeepSetStorageSel
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInit
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduUnlockVideoAllColor
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduLockVideoAllColor
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTMAC110_main
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_IDUInit
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PwrOnSeq
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioInit
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_av_sample
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isuInit
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;siuInit
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cDeviceInit2
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cDeviceInit
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegInit
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbHostInit
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcTaskInit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Init
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptInit
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartCmdInit
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVideoClipOption
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[729]"></a>main_intInit</STRONG> (ARM, 416 bytes, Stack size 8 bytes, main.o(i.main_intInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = main_intInit
</UL>
<BR>[Calls]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsIntInit (via Veneer)
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsIntFIQEnable (via Veneer)
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsIntFIQDefIsr (via Veneer)
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsIntIRQEnable (via Veneer)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsIntIRQDefIsr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[748]"></a>marsDMACheckReady</STRONG> (ARM, 32 bytes, Stack size 16 bytes, mars_dmareqfunc.o(i.marsDMACheckReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = marsDMACheckReady &rArr; marsDMAWaitForInt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAWaitForInt
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAClose
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteWrite
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteRead
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavReadFile_PCM
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckDmaWriteComplete
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckDmaReadComplete
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcWriteSingleBlock
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcWriteMultipleBlock
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcReadSingleBlock
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcReadMultipleBlock
</UL>

<P><STRONG><a name="[6b6]"></a>marsDMAClose</STRONG> (ARM, 100 bytes, Stack size 24 bytes, mars_dma.o(i.marsDMAClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = marsDMAClose &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5StopPlay
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw_Word
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMACheckReady
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeChannel
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeAudio_QuadMode
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoice
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisStopPlay
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_RFI_RX_CH_Restart
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavReadFile_PCM
</UL>

<P><STRONG><a name="[74a]"></a>marsDMACloseReleaseSource</STRONG> (ARM, 120 bytes, Stack size 24 bytes, mars_dma.o(i.marsDMACloseReleaseSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = marsDMACloseReleaseSource &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbReleaseDmaSource
</UL>

<P><STRONG><a name="[6b5]"></a>marsDMAConfig</STRONG> (ARM, 152 bytes, Stack size 16 bytes, mars_dma.o(i.marsDMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = marsDMAConfig &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisSetNextRecDMA
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5SetNextPlayDMA
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw_Word
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAReq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisTask
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisRecDMA_ISR
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisPlayDMA_ISR
</UL>

<P><STRONG><a name="[72b]"></a>marsDMAInit</STRONG> (ARM, 152 bytes, Stack size 32 bytes, mars_dma.o(i.marsDMAInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = marsDMAInit &rArr; OSSemCreate &rArr; OS_EventWaitListInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsIntIRQDefIsr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[10c]"></a>marsDMAIntHandler</STRONG> (ARM, 224 bytes, Stack size 40 bytes, mars_dma.o(i.marsDMAIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = marsDMAIntHandler &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mars_dma.o(i.marsDMAInit)
</UL>
<P><STRONG><a name="[6bd]"></a>marsDMAOpen</STRONG> (ARM, 184 bytes, Stack size 24 bytes, mars_dma.o(i.marsDMAOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsIntIRQEnable (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw_Word
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAReq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisTask
</UL>

<P><STRONG><a name="[74b]"></a>marsDMAReq</STRONG> (ARM, 104 bytes, Stack size 40 bytes, mars_dmareqfunc.o(i.marsDMAReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAOpen
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteWrite
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteRead
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavReadFile_PCM
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcSetWriteDataDma
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcSetReadDataDma
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcWriteSingleBlock
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcWriteMultipleBlock
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcReadSingleBlock
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcReadMultipleBlock
</UL>

<P><STRONG><a name="[749]"></a>marsDMAWaitForInt</STRONG> (ARM, 284 bytes, Stack size 24 bytes, mars_dma.o(i.marsDMAWaitForInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = marsDMAWaitForInt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw_Word
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_hw
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMACheckReady
</UL>

<P><STRONG><a name="[50]"></a>marsRfiu_FCC_DirectTXRX</STRONG> (ARM, 2580 bytes, Stack size 80 bytes, rfiu.o(i.marsRfiu_FCC_DirectTXRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = marsRfiu_FCC_DirectTXRX &rArr; RfiuReset &rArr; sysForceWDTtoReboot &rArr; spiReleaseFlashStatus &rArr; spiExit4ByteMode &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioConfig
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteReg_B2
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteReg_B1
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_TxMode_Stop
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_TxMode_Start
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ReadReg_B2
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ReadReg_B1
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_CH_sel
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuWaitForInt_Tx
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuWaitForInt_Rx
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Tx
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Rx
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfiuReset
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[52c]"></a>marsTimerClose</STRONG> (ARM, 96 bytes, Stack size 8 bytes, mars_timer.o(i.marsTimerClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = marsTimerClose &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsIntIRQDisable (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IR_TX
</UL>

<P><STRONG><a name="[525]"></a>marsTimerConfig</STRONG> (ARM, 52 bytes, Stack size 0 bytes, mars_timer.o(i.marsTimerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IR_TX
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerProjectTimerInit
</UL>

<P><STRONG><a name="[527]"></a>marsTimerCountEnable</STRONG> (ARM, 136 bytes, Stack size 24 bytes, mars_timer.o(i.marsTimerCountEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = marsTimerCountEnable &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IR_TX
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTimerTest
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerProjectTimerInit
</UL>

<P><STRONG><a name="[52b]"></a>marsTimerCountPause</STRONG> (ARM, 48 bytes, Stack size 0 bytes, mars_timer.o(i.marsTimerCountPause))
<BR><BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCountPause
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IR_TX
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_zeropointfivems_IntHandler
</UL>

<P><STRONG><a name="[654]"></a>marsTimerCountRead</STRONG> (ARM, 36 bytes, Stack size 0 bytes, mars_timer.o(i.marsTimerCountRead))
<BR><BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCountRead
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPWMTest
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_mdelay
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake
</UL>

<P><STRONG><a name="[526]"></a>marsTimerCountWrite</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mars_timer.o(i.marsTimerCountWrite))
<BR><BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IR_TX
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPWMTest
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerProjectTimerInit
</UL>

<P><STRONG><a name="[72d]"></a>marsTimerInit</STRONG> (ARM, 100 bytes, Stack size 16 bytes, mars_timer.o(i.marsTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = marsTimerInit &rArr; OSSemCreate &rArr; OS_EventWaitListInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsIntIRQDisable (via Veneer)
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsIntIRQDefIsr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[10d]"></a>marsTimerIntHandler</STRONG> (ARM, 132 bytes, Stack size 40 bytes, mars_timer.o(i.marsTimerIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = marsTimerIntHandler &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mars_timer.o(i.marsTimerInit)
</UL>
<P><STRONG><a name="[528]"></a>marsTimerInterruptEnable</STRONG> (ARM, 48 bytes, Stack size 0 bytes, mars_timer.o(i.marsTimerInterruptEnable))
<BR><BR>[Called By]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInterruptEnable
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IR_TX
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_zeropointfivems_IntHandler
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerProjectTimerInit
</UL>

<P><STRONG><a name="[52a]"></a>marsTimerOpen</STRONG> (ARM, 164 bytes, Stack size 24 bytes, mars_timer.o(i.marsTimerOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = marsTimerOpen &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsIntIRQEnable (via Veneer)
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSClkEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IR_TX
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInit
</UL>

<P><STRONG><a name="[967]"></a>marsTimerPwmConfig</STRONG> (ARM, 100 bytes, Stack size 4 bytes, mars_timer.o(i.marsTimerPwmConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = marsTimerPwmConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPWMTest
</UL>

<P><STRONG><a name="[752]"></a>marsTimerPwmCountEnable</STRONG> (ARM, 100 bytes, Stack size 16 bytes, mars_timer.o(i.marsTimerPwmCountEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = marsTimerPwmCountEnable &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPWMTest
</UL>

<P><STRONG><a name="[753]"></a>marsTimerPwmEnable</STRONG> (ARM, 100 bytes, Stack size 16 bytes, mars_timer.o(i.marsTimerPwmEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = marsTimerPwmEnable &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPWMTest
</UL>

<P><STRONG><a name="[524]"></a>marsTimerPwmOpen</STRONG> (ARM, 92 bytes, Stack size 24 bytes, mars_timer.o(i.marsTimerPwmOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = marsTimerPwmOpen
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsIntIRQEnable (via Veneer)
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSClkEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerProjectTimerInit
</UL>

<P><STRONG><a name="[4f0]"></a>marsTimerWaitForInt</STRONG> (ARM, 148 bytes, Stack size 16 bytes, mars_timer.o(i.marsTimerWaitForInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = marsTimerWaitForInt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimerTask
</UL>

<P><STRONG><a name="[4fa]"></a>marsTimerWaitForTickInt</STRONG> (ARM, 48 bytes, Stack size 16 bytes, mars_timer.o(i.marsTimerWaitForTickInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = marsTimerWaitForTickInt &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimerTickTask
</UL>

<P><STRONG><a name="[5aa]"></a>matchGuid</STRONG> (ARM, 312 bytes, Stack size 12 bytes, asf.o(i.matchGuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = matchGuid
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSplitFile
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfBurstReadIndexObject
</UL>

<P><STRONG><a name="[f8]"></a>mdIntHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, motiondetect_hw.o(i.mdIntHandler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[754]"></a>mem_free</STRONG> (ARM, 856 bytes, Stack size 16 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = mem_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[702]"></a>mem_init</STRONG> (ARM, 212 bytes, Stack size 8 bytes, mem.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = mem_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[5c3]"></a>mem_malloc</STRONG> (ARM, 788 bytes, Stack size 24 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mem_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[756]"></a>mem_trim</STRONG> (ARM, 508 bytes, Stack size 40 bytes, mem.o(i.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mem_trim &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[27d]"></a>memcpy_hw</STRONG> (ARM, 108 bytes, Stack size 8 bytes, mars_dmareqfunc.o(i.memcpy_hw))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpu_ByteMemcpy (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteVideStreamPropertiesObject
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteVidePayload
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteHeaderObject
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteHeaderExtensionObject
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteHdrPaddingObject
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDummyVidePayload
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataPacketPre
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataPacketPost
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataObjectPre
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteCodecListObject
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteAudiPayload
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCreateFile
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadVideoPayload
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegDecompression
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_chksum_copy
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_reply
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServResetBuffer
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrl
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendFrameData
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvIOCtrl
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvAudioData
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Close
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remoteplayback_busy
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_DecodeOneFrame
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_memcpy
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_lookup_hostname
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_setup
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_host_get_sockaddr
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_Alloc
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpCodeSupportVer1
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpCodeSupportCurrent
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendVideoDataLost
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendAudioDataResend
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionHandlerThread
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Update_VPGServerList
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Update_DeviceInfo
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateUdpServerRelayRequestRStatus
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateUdpServerList
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateSendPathAddres
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateLanDeviceList
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UdpRelaySessionInfoRequestServer
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSendPath
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_callback_Try_Port
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Search_R
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Search
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Knock_RR
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Knock_R
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Knock
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_SendDeviceLogin1
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Check_Nat_Type
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLanSearchInfoList
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransCodePartial
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseTransCodePartial
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_SESSION_INFO2
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_REQUEST_R2
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_RR
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_R
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH_R_3
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTryPortNode
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckResendRequest
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCalu
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doIOTypeInner
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVCtrl
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Retrive_Slot_Data
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Request_Resend
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Fill_Slot_Data
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVInfo_ResendReq
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIOTC_Feature_Bitmap
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_sockaddr_to_ip_addr
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Fill_ReadBuf
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Punch_To
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSendPath
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckDeviceWANAddrLocked
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectResult
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectErrorCode_inner
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check_Ex
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSendLANSearch
</UL>

<P><STRONG><a name="[663]"></a>memp_free</STRONG> (ARM, 160 bytes, Stack size 8 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[703]"></a>memp_init</STRONG> (ARM, 204 bytes, Stack size 32 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = memp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[66c]"></a>memp_malloc_fn</STRONG> (ARM, 156 bytes, Stack size 8 bytes, memp.o(i.memp_malloc_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[3a8]"></a>memset_hw</STRONG> (ARM, 384 bytes, Stack size 64 bytes, mars_dmareqfunc.o(i.memset_hw))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = memset_hw &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAOpen
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAWaitForInt
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAConfig
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAClose
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfWriteDataPacketPost
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfInit
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanDiskAll
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFileInit
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDirInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PSendEvent
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemSET
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemAlloc
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[416]"></a>memset_hw_Word</STRONG> (ARM, 532 bytes, Stack size 56 bytes, mars_dmareqfunc.o(i.memset_hw_Word))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = memset_hw_Word &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAOpen
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAWaitForInt
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAConfig
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAClose
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearPKBuf
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idu_ClearBuf
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearBuf
</UL>

<P><STRONG><a name="[758]"></a>mmcCheckTransferState</STRONG> (ARM, 96 bytes, Stack size 16 bytes, mmc.o(i.mmcCheckTransferState))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mmcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcSetCommand
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcGetResponseR1
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckCommandResponseComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevStatus
</UL>

<P><STRONG><a name="[75c]"></a>mmcReadSingleBlock</STRONG> (ARM, 88 bytes, Stack size 16 bytes, mmc.o(i.mmcReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = mmcReadSingleBlock &rArr; sdcSetReadDataDma &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcSetReadDataDma
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcSetCommand
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcGetResponseR1
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckReadError
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckDmaReadComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevRead
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevMulRead
</UL>

<P><STRONG><a name="[760]"></a>mmcWriteSingleBlock</STRONG> (ARM, 120 bytes, Stack size 24 bytes, mmc.o(i.mmcWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = mmcWriteSingleBlock &rArr; sdcSetWriteDataDma &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcSetWriteDataDma
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcSetCommand
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcGetResponseR1
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckWriteError
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckDmaWriteComplete
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckCommandResponseComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevWrite
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevMulWrite
</UL>

<P><STRONG><a name="[290]"></a>monopool_alloc</STRONG> (ARM, 360 bytes, Stack size 24 bytes, monopool.o(i.monopool_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = monopool_alloc &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexUnLock
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexLock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServResetBuffer
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrl
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvAudioData
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avInitialize
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckAudioBuf
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Close
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Initialize2
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_mem_alloc
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoNew
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_Alloc
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlistNew
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlistAppend
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection_new
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxConnMgr_createNewConnection
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Update_VPGServerList
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateUdpServerRelayRequestRStatus
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateLanDeviceList
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLanSearchInfoList
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTryPortNode
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckResendRequest
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Fill_Slot_Data
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Create
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIOTC_Feature_Bitmap
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnManager_create
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_resolve_master_all
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Fill_ReadBuf
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3fa]"></a>monopool_check</STRONG> (ARM, 24 bytes, Stack size 0 bytes, monopool.o(i.monopool_check))
<BR><BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Initialize2
</UL>

<P><STRONG><a name="[2a2]"></a>monopool_free</STRONG> (ARM, 284 bytes, Stack size 16 bytes, monopool.o(i.monopool_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexUnLock
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_DeInitialize
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServResetBuffer
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvAudioData
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckAudioBuf
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection_destroy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RootAction
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_mem_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_Release
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRemoveFrameByFrmNo
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRemoveAllFramesLessThanFrmNo
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRemoveAllFramesBiggerThanFrmNo
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRelease
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoEmpty
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeEmpty
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlistRemoveNode
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlistDestroy
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection_new
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeConnItem
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionHandlerThread
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnManager_destroy
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_walk_purge
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_delete
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockMng_Remove
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Update_VPGServerList
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateLanDeviceList
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseSession
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_callback_Try_Port
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLanSearchInfoList
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseTryPortNode
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanDeviceVPG
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRecentClosedClientRandomID
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckResendRequest
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unInitAVInfo
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initAVInfo
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVCtrl
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Fill_Slot_Data
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Create
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIOTC_Feature_Bitmap
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Feature_Bitmap_Release
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_thread_resolve_master_name_new
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_resolve_master_all
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Fill_ReadBuf
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskDeleteNode
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskCleanNodesWithType
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskCleanAllNodes
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Channel_OFF
</UL>

<P><STRONG><a name="[404]"></a>monopool_init</STRONG> (ARM, 52 bytes, Stack size 0 bytes, monopool.o(i.monopool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = monopool_init &rArr; OS_MutexInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexInit
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Mem_Init
</UL>

<P><STRONG><a name="[424]"></a>more_rbsp_data</STRONG> (ARM, 32 bytes, Stack size 0 bytes, vlc.o(i.more_rbsp_data))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpretPPS
</UL>

<P><STRONG><a name="[5b9]"></a>mpeg4ResumeTask</STRONG> (ARM, 20 bytes, Stack size 8 bytes, mpeg4.o(i.mpeg4ResumeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = mpeg4ResumeTask &rArr; OSTaskResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadVideoPayload
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
</UL>

<P><STRONG><a name="[764]"></a>mpeg4SetVideoFrameRate</STRONG> (ARM, 68 bytes, Stack size 16 bytes, mpeg4.o(i.mpeg4SetVideoFrameRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpeg4SetVideoFrameRate
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelMpeg4SetVideoFrameRate
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_VideoFrameRate
</UL>

<P><STRONG><a name="[92c]"></a>mpeg4SetVideoQuality</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mpeg4.o(i.mpeg4SetVideoQuality))
<BR><BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_VideoQuality
</UL>

<P><STRONG><a name="[5b2]"></a>mpeg4SuspendTask</STRONG> (ARM, 32 bytes, Stack size 8 bytes, mpeg4.o(i.mpeg4SuspendTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = mpeg4SuspendTask &rArr; OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
</UL>

<P><STRONG><a name="[6fa]"></a>netbuf_delete</STRONG> (ARM, 60 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[726]"></a>netbuf_free</STRONG> (ARM, 156 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[724]"></a>netbuf_ref</STRONG> (ARM, 224 bytes, Stack size 16 bytes, netbuf.o(i.netbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[6f4]"></a>netconn_accept</STRONG> (ARM, 380 bytes, Stack size 24 bytes, api_lib.o(i.netconn_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = netconn_accept &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[59c]"></a>netconn_alloc</STRONG> (ARM, 280 bytes, Stack size 24 bytes, api_msg.o(i.netconn_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = netconn_alloc &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[6f8]"></a>netconn_bind</STRONG> (ARM, 204 bytes, Stack size 32 bytes, api_lib.o(i.netconn_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = netconn_bind &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[767]"></a>netconn_close</STRONG> (ARM, 144 bytes, Stack size 32 bytes, api_lib.o(i.netconn_close), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[6fc]"></a>netconn_connect</STRONG> (ARM, 212 bytes, Stack size 32 bytes, api_lib.o(i.netconn_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = netconn_connect &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[6f6]"></a>netconn_delete</STRONG> (ARM, 100 bytes, Stack size 32 bytes, api_lib.o(i.netconn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = netconn_delete &rArr; netconn_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[6fb]"></a>netconn_disconnect</STRONG> (ARM, 196 bytes, Stack size 32 bytes, api_lib.o(i.netconn_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = netconn_disconnect &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[5a4]"></a>netconn_free</STRONG> (ARM, 384 bytes, Stack size 8 bytes, api_msg.o(i.netconn_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = netconn_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[6f7]"></a>netconn_getaddr</STRONG> (ARM, 328 bytes, Stack size 32 bytes, api_lib.o(i.netconn_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = netconn_getaddr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[6fd]"></a>netconn_gethostbyname</STRONG> (ARM, 332 bytes, Stack size 32 bytes, api_lib.o(i.netconn_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
</UL>

<P><STRONG><a name="[70a]"></a>netconn_listen_with_backlog</STRONG> (ARM, 188 bytes, Stack size 32 bytes, api_lib.o(i.netconn_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = netconn_listen_with_backlog &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</UL>

<P><STRONG><a name="[728]"></a>netconn_new_with_proto_and_callback</STRONG> (ARM, 464 bytes, Stack size 40 bytes, api_lib.o(i.netconn_new_with_proto_and_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[71e]"></a>netconn_recv</STRONG> (ARM, 392 bytes, Stack size 24 bytes, api_lib.o(i.netconn_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = netconn_recv &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[71f]"></a>netconn_recv_tcp_pbuf</STRONG> (ARM, 156 bytes, Stack size 8 bytes, api_lib.o(i.netconn_recv_tcp_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[725]"></a>netconn_send</STRONG> (ARM, 192 bytes, Stack size 32 bytes, api_lib.o(i.netconn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = netconn_send &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[727]"></a>netconn_shutdown</STRONG> (ARM, 120 bytes, Stack size 32 bytes, api_lib.o(i.netconn_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = netconn_shutdown &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>

<P><STRONG><a name="[723]"></a>netconn_write_partly</STRONG> (ARM, 436 bytes, Stack size 40 bytes, api_lib.o(i.netconn_write_partly))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = netconn_write_partly &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[43a]"></a>netdev_getallnetdev</STRONG> (ARM, 144 bytes, Stack size 24 bytes, tutk_av_sample.o(i.netdev_getallnetdev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netdev_getallnetdev
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6_arm
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_getLocal
</UL>

<P><STRONG><a name="[76b]"></a>netif_add</STRONG> (ARM, 212 bytes, Stack size 24 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done
</UL>

<P><STRONG><a name="[704]"></a>netif_init</STRONG> (ARM, 360 bytes, Stack size 24 bytes, netif.o(i.netif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = netif_init &rArr; dhcp_network_changed &rArr; dhcp_discover &rArr; autoip_start &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_network_changed
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loopif_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6d9]"></a>netif_loop_output</STRONG> (ARM, 380 bytes, Stack size 24 bytes, netif.o(i.netif_loop_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = netif_loop_output &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output_ipv4
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>

<P><STRONG><a name="[11b]"></a>netif_poll</STRONG> (ARM, 412 bytes, Stack size 24 bytes, netif.o(i.netif_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = netif_poll &rArr; ip4_input &rArr; tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netif.o(i.netif_loop_output)
</UL>
<P><STRONG><a name="[5c2]"></a>netif_set_addr</STRONG> (ARM, 332 bytes, Stack size 24 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_stop
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
</UL>

<P><STRONG><a name="[872]"></a>netif_set_default</STRONG> (ARM, 12 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done
</UL>

<P><STRONG><a name="[770]"></a>netif_set_up</STRONG> (ARM, 92 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done
</UL>

<P><STRONG><a name="[771]"></a>ntohl</STRONG> (ARM, 32 bytes, Stack size 0 bytes, p2p_server.o(i.ntohl))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpdate
</UL>

<P><STRONG><a name="[67]"></a>ntpdate</STRONG> (ARM, 804 bytes, Stack size 4328 bytes, lwipentry.o(i.ntpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4776 + Unknown Stack Size
<LI>Call Chain = ntpdate &rArr; uiSetRfTimeRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfTimeRxToTx
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_GMT_Time
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Second_To_Time
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DN2IP
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_LwIPEntry
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmdParse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[772]"></a>osdDrawCamLiveView</STRONG> (ARM, 104 bytes, Stack size 0 bytes, ui_osd_project.o(i.osdDrawCamLiveView))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = osdDrawCamLiveView &rArr; uiOsdDrawCameraBatteryLevel &rArr; H264_Decode_One_I_frame &rArr; H264DecodeLastFrame &rArr; Idu_ClearBuf &rArr; memset_hw_Word &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCameraBatteryLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
</UL>

<P><STRONG><a name="[774]"></a>osdDrawClearRemoteMsg</STRONG> (ARM, 88 bytes, Stack size 0 bytes, ui_osd_project.o(i.osdDrawClearRemoteMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = osdDrawClearRemoteMsg &rArr; uiOSDASCIIStringByColorCenter &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorCenter
</UL>
<BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
</UL>

<P><STRONG><a name="[61a]"></a>osdDrawDelMsg</STRONG> (ARM, 236 bytes, Stack size 56 bytes, ui_osd_project.o(i.osdDrawDelMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = osdDrawDelMsg &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetCurDirFileCount
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDel
</UL>

<P><STRONG><a name="[777]"></a>osdDrawFileNum</STRONG> (ARM, 380 bytes, Stack size 48 bytes, ui_osd_project.o(i.osdDrawFileNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = osdDrawFileNum &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetCurDirFileCount
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlayIcon
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackMoveForward
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackMoveBackward
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDelete
</UL>

<P><STRONG><a name="[778]"></a>osdDrawFillEmpty</STRONG> (ARM, 420 bytes, Stack size 40 bytes, ui_osd_project.o(i.osdDrawFillEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = osdDrawFillEmpty &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDMultiLanguageStrCenter
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageSel
</UL>
<BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackMoveForward
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackMoveBackward
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDeleteDir
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDeleteAll
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDelete
</UL>

<P><STRONG><a name="[77d]"></a>osdDrawFillWait</STRONG> (ARM, 144 bytes, Stack size 16 bytes, ui_osd_project.o(i.osdDrawFillWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = osdDrawFillWait &rArr; osdDrawMessage &rArr; uiOSDMultiLanguageStrByXY &rArr; uiOsdGetStrLib &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlayback_Delete_File
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDeleteDir
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDeleteAll
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDelete
</UL>

<P><STRONG><a name="[77f]"></a>osdDrawHDDUninstallMsg</STRONG> (ARM, 196 bytes, Stack size 48 bytes, ui_osd_project.o(i.osdDrawHDDUninstallMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = osdDrawHDDUninstallMsg &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
</UL>

<P><STRONG><a name="[781]"></a>osdDrawHDDUninstallStatusMsg</STRONG> (ARM, 328 bytes, Stack size 32 bytes, ui_osd_project.o(i.osdDrawHDDUninstallStatusMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = osdDrawHDDUninstallStatusMsg &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInit
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisable
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
</UL>

<P><STRONG><a name="[6e1]"></a>osdDrawISPNow</STRONG> (ARM, 92 bytes, Stack size 8 bytes, ui_osd_project.o(i.osdDrawISPNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 3824 + Unknown Stack Size
<LI>Call Chain = osdDrawISPNow &rArr; osdDrawPreviewIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdatebootload
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload_Net
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdate
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetUpdateFlow
</UL>

<P><STRONG><a name="[784]"></a>osdDrawISPStatus</STRONG> (ARM, 276 bytes, Stack size 32 bytes, ui_osd_project.o(i.osdDrawISPStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 3848 + Unknown Stack Size
<LI>Call Chain = osdDrawISPStatus &rArr; osdDrawPreviewIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDevInsertedUpgradeEvt
</UL>

<P><STRONG><a name="[785]"></a>osdDrawMemFull</STRONG> (ARM, 396 bytes, Stack size 56 bytes, ui_osd_project.o(i.osdDrawMemFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = osdDrawMemFull &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageSel
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXYChColor
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawSDCardFULL
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectDeviceStatus
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoiceFile
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAllPreviewIcon
</UL>

<P><STRONG><a name="[787]"></a>osdDrawMenuPreview</STRONG> (ARM, 364 bytes, Stack size 56 bytes, ui_osd_project.o(i.osdDrawMenuPreview))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = osdDrawMenuPreview &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAllPreviewIcon
</UL>

<P><STRONG><a name="[77e]"></a>osdDrawMessage</STRONG> (ARM, 160 bytes, Stack size 24 bytes, ui_osd_project.o(i.osdDrawMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = osdDrawMessage &rArr; uiOSDMultiLanguageStrByXY &rArr; uiOsdGetStrLib &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDMultiLanguageStrCenter
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDMultiLanguageStrByY
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDMultiLanguageStrByXY
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDMultiLanguageStrByX
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawISPStatus
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFillWait
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawUpgradeFW
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSystemReboot
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRunFormat
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawRestoreDefaltSettings
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuNoFile
</UL>

<P><STRONG><a name="[78c]"></a>osdDrawMotionMsg</STRONG> (ARM, 148 bytes, Stack size 16 bytes, ui_osd_project.o(i.osdDrawMotionMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = osdDrawMotionMsg &rArr; uiOSDASCIIStringByColorY &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorY
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
</UL>

<P><STRONG><a name="[78e]"></a>osdDrawMotionPreview</STRONG> (ARM, 252 bytes, Stack size 48 bytes, ui_osd_project.o(i.osdDrawMotionPreview))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = osdDrawMotionPreview &rArr; uiOSDASCIIStringByColorY &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXYChColor
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorY
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetPir
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAllPreviewIcon
</UL>

<P><STRONG><a name="[78f]"></a>osdDrawNotHDD</STRONG> (ARM, 164 bytes, Stack size 40 bytes, ui_osd_project.o(i.osdDrawNotHDD))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = osdDrawNotHDD &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInit
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisable
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
</UL>

<P><STRONG><a name="[790]"></a>osdDrawPlayIcon</STRONG> (ARM, 536 bytes, Stack size 80 bytes, ui_osd_project.o(i.osdDrawPlayIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = osdDrawPlayIcon &rArr; osdDrawFileNum &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFileNum
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageSel
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackMoveForward
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackMoveBackward
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDelete
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
</UL>

<P><STRONG><a name="[791]"></a>osdDrawPlayIndicator</STRONG> (ARM, 468 bytes, Stack size 56 bytes, ui_osd_project.o(i.osdDrawPlayIndicator))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = osdDrawPlayIndicator &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
</UL>

<P><STRONG><a name="[792]"></a>osdDrawPlaybackArea</STRONG> (ARM, 156 bytes, Stack size 24 bytes, ui_osd_project.o(i.osdDrawPlaybackArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 3848 + Unknown Stack Size
<LI>Call Chain = osdDrawPlaybackArea &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDReset
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackMoveForward
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackMoveBackward
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDelete
</UL>

<P><STRONG><a name="[783]"></a>osdDrawPreviewIcon</STRONG> (ARM, 596 bytes, Stack size 40 bytes, ui_osd_project.o(i.osdDrawPreviewIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 3816 + Unknown Stack Size
<LI>Call Chain = osdDrawPreviewIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMemFull
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRemoteOn
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckRfTalkStatus
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCameraBatteryLevel
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSDIcon
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawTalkBack
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRecPreview
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMotionPreview
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_fw_ver_net
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawRemindDownload
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLightIcon
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCamera
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAlarmIcon
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMenuPreview
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlaybackArea
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawISPNow
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDPreviewInit
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawISPStatus
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackEXIFWrite
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_OFF
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_Device_Mount
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPair
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNoSignal
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawProtect
</UL>

<P><STRONG><a name="[79d]"></a>osdDrawProtect</STRONG> (ARM, 476 bytes, Stack size 56 bytes, ui_osd_project.o(i.osdDrawProtect))
<BR><BR>[Stack]<UL><LI>Max Depth = 3872 + Unknown Stack Size
<LI>Call Chain = osdDrawProtect &rArr; osdDrawPreviewIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlayback_Delete_File
</UL>

<P><STRONG><a name="[794]"></a>osdDrawQuadIcon</STRONG> (ARM, 560 bytes, Stack size 48 bytes, ui_osd_project.o(i.osdDrawQuadIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 3824 + Unknown Stack Size
<LI>Call Chain = osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMemFull
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRemoteOn
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckRfTalkStatus
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCameraBatteryLevel
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSDIcon
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRecPreview
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadVideoOn
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_fw_ver_net
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawRemindDownload
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLightIcon
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCamera
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAlarmIcon
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMenuPreview
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlaybackArea
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDPreviewInit
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckP2PMode
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRFStatus
</UL>

<P><STRONG><a name="[79e]"></a>osdDrawQuadVideoOn</STRONG> (ARM, 124 bytes, Stack size 16 bytes, ui_osd_project.o(i.osdDrawQuadVideoOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = osdDrawQuadVideoOn &rArr; uiOsdDrawCamera &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCamera
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawRecPerSec
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAllPreviewIcon
</UL>

<P><STRONG><a name="[795]"></a>osdDrawRecPreview</STRONG> (ARM, 140 bytes, Stack size 40 bytes, ui_osd_project.o(i.osdDrawRecPreview))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = osdDrawRecPreview &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXYChColor
</UL>
<BR>[Called By]<UL><LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiDrawManualRec
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAllPreviewIcon
</UL>

<P><STRONG><a name="[799]"></a>osdDrawRemoteOn</STRONG> (ARM, 288 bytes, Stack size 48 bytes, ui_osd_project.o(i.osdDrawRemoteOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = osdDrawRemoteOn &rArr; uiOsdDrawNetworkLink &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_network_status
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNetworkLink
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PImageLevel
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAllPreviewIcon
</UL>

<P><STRONG><a name="[7a1]"></a>osdDrawRunFormat</STRONG> (ARM, 688 bytes, Stack size 56 bytes, ui_osd_project.o(i.osdDrawRunFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = osdDrawRunFormat &rArr; uiGraphDrawLoadingGraph &rArr; uiGraphDrawJPGImage &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearPKBuf
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSDIcon
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMessage
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageInserted
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawLoadingGraph
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInsertSD
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduSetVideoBuf0Addr
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
</UL>

<P><STRONG><a name="[797]"></a>osdDrawSDIcon</STRONG> (ARM, 408 bytes, Stack size 64 bytes, ui_osd_project.o(i.osdDrawSDIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = osdDrawSDIcon &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageSel
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiKeyParse
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSdCardMode
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_Draw_SD_Icon
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRunFormat
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAllPreviewIcon
</UL>

<P><STRONG><a name="[7a5]"></a>osdDrawSchduleWarnMsg</STRONG> (ARM, 276 bytes, Stack size 32 bytes, ui_osd_project.o(i.osdDrawSchduleWarnMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = osdDrawSchduleWarnMsg &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInit
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisable
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSetting
</UL>

<P><STRONG><a name="[7a6]"></a>osdDrawSystemReboot</STRONG> (ARM, 224 bytes, Stack size 24 bytes, ui_osd_project.o(i.osdDrawSystemReboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = osdDrawSystemReboot &rArr; osdDrawMessage &rArr; uiOSDMultiLanguageStrByXY &rArr; uiOsdGetStrLib &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearPKBuf
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMessage
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduSetVideoBuf0Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIP
</UL>

<P><STRONG><a name="[7a7]"></a>osdDrawUpgradeFW</STRONG> (ARM, 820 bytes, Stack size 80 bytes, ui_osd_project.o(i.osdDrawUpgradeFW))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = osdDrawUpgradeFW &rArr; osdDrawMessage &rArr; uiOSDMultiLanguageStrByXY &rArr; uiOsdGetStrLib &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearPKBuf
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysForceWDTtoReboot
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMessage
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduSetVideoBuf0Addr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
</UL>

<P><STRONG><a name="[7a8]"></a>osdDrawVideoOn</STRONG> (ARM, 72 bytes, Stack size 0 bytes, ui_osd_project.o(i.osdDrawVideoOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = osdDrawVideoOn &rArr; uiOsdDrawCamera &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCamera
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStopByChannel
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
</UL>

<P><STRONG><a name="[7a9]"></a>osdDrawVideoTime</STRONG> (ARM, 1036 bytes, Stack size 88 bytes, ui_osd_project.o(i.osdDrawVideoTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4144 + Unknown Stack Size
<LI>Call Chain = osdDrawVideoTime &rArr; uiOsdVolumeControl &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSentKeyToUi
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdVolumeControl
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysShowTimeOnOSD_VideoClip
</UL>

<P><STRONG><a name="[632]"></a>pbuf_alloc</STRONG> (ARM, 1176 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input2
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[6d1]"></a>pbuf_alloced_custom</STRONG> (ARM, 284 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_alloced_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = pbuf_alloced_custom &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[6d2]"></a>pbuf_cat</STRONG> (ARM, 264 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = pbuf_cat &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[7ab]"></a>pbuf_chain</STRONG> (ARM, 220 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = pbuf_chain &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[6da]"></a>pbuf_clen</STRONG> (ARM, 40 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[66a]"></a>pbuf_copy</STRONG> (ARM, 664 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = pbuf_copy &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[63c]"></a>pbuf_copy_partial</STRONG> (ARM, 360 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = pbuf_copy_partial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[633]"></a>pbuf_free</STRONG> (ARM, 484 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input2
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_poll
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[66d]"></a>pbuf_header</STRONG> (ARM, 8 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = pbuf_header &rArr; pbuf_header_impl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[6d7]"></a>pbuf_header_force</STRONG> (ARM, 8 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_header_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = pbuf_header_force &rArr; pbuf_header_impl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[412]"></a>pbuf_pool_used</STRONG> (ARM, 92 bytes, Stack size 4 bytes, stats.o(i.pbuf_pool_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pbuf_pool_used
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
</UL>

<P><STRONG><a name="[64c]"></a>pbuf_put_at</STRONG> (ARM, 96 bytes, Stack size 4 bytes, pbuf.o(i.pbuf_put_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pbuf_put_at
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[62a]"></a>pbuf_realloc</STRONG> (ARM, 580 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[66b]"></a>pbuf_ref</STRONG> (ARM, 160 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = pbuf_ref &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[64b]"></a>pbuf_take</STRONG> (ARM, 424 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = pbuf_take &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[64d]"></a>pbuf_take_at</STRONG> (ARM, 172 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_take_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = pbuf_take_at &rArr; pbuf_take &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[64a]"></a>pbuf_try_get_at</STRONG> (ARM, 104 bytes, Stack size 4 bytes, pbuf.o(i.pbuf_try_get_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pbuf_try_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[7ae]"></a>phyNETRunPerSec</STRONG> (ARM, 188 bytes, Stack size 16 bytes, ftmac110.o(i.phyNETRunPerSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = phyNETRunPerSec &rArr; uiOsdDrawNetworkLink &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyread16
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNetworkLink
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_Draw_NET_Icon
</UL>

<P><STRONG><a name="[7af]"></a>phy_processing</STRONG> (ARM, 284 bytes, Stack size 32 bytes, ftmac110.o(i.phy_processing), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyread16
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[50a]"></a>phyread16</STRONG> (ARM, 92 bytes, Stack size 16 bytes, ftmac110.o(i.phyread16))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = phyread16 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyNETRunPerSec
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_LwIPEntry
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_processing
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmac110_init
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_phy_regs
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_duplex_speed
</UL>

<P><STRONG><a name="[509]"></a>phywrite16</STRONG> (ARM, 140 bytes, Stack size 16 bytes, ftmac110.o(i.phywrite16))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = phywrite16 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_LwIPEntry
</UL>

<P><STRONG><a name="[4f3]"></a>poll_hid</STRONG> (ARM, 168 bytes, Stack size 4 bytes, usb-transfer.o(i.poll_hid))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = poll_hid
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimerTask
</UL>

<P><STRONG><a name="[4f2]"></a>poll_hub</STRONG> (ARM, 224 bytes, Stack size 24 bytes, usb-transfer.o(i.poll_hub))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = poll_hub &rArr; usbHostSetIntEvt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbHostSetIntEvt
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_printf2
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimerTask
</UL>

<P><STRONG><a name="[65b]"></a>pow</STRONG> (ARM, 3940 bytes, Stack size 112 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ue_v
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_se_v
</UL>

<P><STRONG><a name="[180]"></a>ramDiskDevIoCtl1</STRONG> (ARM, 76 bytes, Stack size 0 bytes, ramdisk.o(i.ramDiskDevIoCtl1))
<BR>[Address Reference Count : 1]<UL><LI> storage.o(.constdata)
</UL>
<P><STRONG><a name="[17e]"></a>ramDiskDevRead1</STRONG> (ARM, 60 bytes, Stack size 8 bytes, ramdisk.o(i.ramDiskDevRead1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ramDiskDevRead1
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(.constdata)
</UL>
<P><STRONG><a name="[7b6]"></a>ramDiskDevStatus</STRONG> (ARM, 112 bytes, Stack size 8 bytes, ramdisk.o(i.ramDiskDevStatus), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCF_GetDeviceIndex
</UL>

<P><STRONG><a name="[17d]"></a>ramDiskDevStatus1</STRONG> (ARM, 80 bytes, Stack size 0 bytes, ramdisk.o(i.ramDiskDevStatus1))
<BR>[Address Reference Count : 1]<UL><LI> storage.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>ramDiskDevWrite1</STRONG> (ARM, 60 bytes, Stack size 8 bytes, ramdisk.o(i.ramDiskDevWrite1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ramDiskDevWrite1
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(.constdata)
</UL>
<P><STRONG><a name="[610]"></a>ramDiskInit</STRONG> (ARM, 72 bytes, Stack size 8 bytes, ramdisk.o(i.ramDiskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ramDiskInit &rArr; DCF_GetDeviceIndex &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCF_GetDeviceIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfInit
</UL>

<P><STRONG><a name="[611]"></a>ramDiskInit1</STRONG> (ARM, 60 bytes, Stack size 0 bytes, ramdisk.o(i.ramDiskInit1))
<BR><BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfInit
</UL>

<P><STRONG><a name="[623]"></a>ramDiskUninit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, ramdisk.o(i.ramDiskUninit))
<BR><BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfUninit
</UL>

<P><STRONG><a name="[624]"></a>ramDiskUninit1</STRONG> (ARM, 8 bytes, Stack size 0 bytes, ramdisk.o(i.ramDiskUninit1))
<BR><BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfUninit
</UL>

<P><STRONG><a name="[6c2]"></a>ram_heap_size</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mem.o(i.ram_heap_size))
<BR><BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMemoryPool
</UL>

<P><STRONG><a name="[425]"></a>rbsp_trailing_bits</STRONG> (ARM, 80 bytes, Stack size 8 bytes, vlc.o(i.rbsp_trailing_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = rbsp_trailing_bits &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpretSPS
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpretPPS
</UL>

<P><STRONG><a name="[3d3]"></a>resolve_customize_master</STRONG> (ARM, 144 bytes, Stack size 32 bytes, iotcapis.o(i.resolve_customize_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = resolve_customize_master &rArr; iotc_lookup_host &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_lookup_host
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_free_host_list
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_update_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
</UL>

<P><STRONG><a name="[121]"></a>rfiuAudioPlayDMA_ISR</STRONG> (ARM, 428 bytes, Stack size 32 bytes, wraprf.o(i.rfiuAudioPlayDMA_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = rfiuAudioPlayDMA_ISR &rArr; iis5SetNextPlayDMA &rArr; marsDMAConfig &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisStartPlay
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5SetNextPlayDMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wraprf.o(i.rfiu_RxMpeg4DecTask_UnitX)
</UL>
<P><STRONG><a name="[122]"></a>rfiuAudioRet_RecDMA_ISR</STRONG> (ARM, 168 bytes, Stack size 8 bytes, wraprf.o(i.rfiuAudioRet_RecDMA_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = rfiuAudioRet_RecDMA_ISR &rArr; iisSetNextRecDMA &rArr; marsDMAConfig &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisStartRec
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisSetNextRecDMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wraprf.o(i.rfiu_RxMpeg4DecTask_UnitX)
</UL>
<P><STRONG><a name="[7d0]"></a>rfiuCalAudioplayBufCount</STRONG> (ARM, 28 bytes, Stack size 0 bytes, rfiu.o(i.rfiuCalAudioplayBufCount))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
</UL>

<P><STRONG><a name="[7cf]"></a>rfiuCalBufRemainCount</STRONG> (ARM, 28 bytes, Stack size 0 bytes, rfiu.o(i.rfiuCalBufRemainCount))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
</UL>

<P><STRONG><a name="[7d2]"></a>rfiuCalVideoDisplayBufCount</STRONG> (ARM, 28 bytes, Stack size 0 bytes, rfiu.o(i.rfiuCalVideoDisplayBufCount))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
</UL>

<P><STRONG><a name="[7b9]"></a>rfiuCamOnOffCmd</STRONG> (ARM, 364 bytes, Stack size 16 bytes, rfiu.o(i.rfiuCamOnOffCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = rfiuCamOnOffCmd &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_InitCamOnOff
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_End
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackMode
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_CameraOnOff
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[38f]"></a>rfiuCamSleepCmd</STRONG> (ARM, 364 bytes, Stack size 48 bytes, rfiu.o(i.rfiuCamSleepCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = rfiuCamSleepCmd &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_WrapRx_Task_UnitX
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBatteryCam_stopIfDone
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[74e]"></a>rfiuDataPktConfig_Rx</STRONG> (ARM, 496 bytes, Stack size 24 bytes, rfiu.o(i.rfiuDataPktConfig_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = rfiuDataPktConfig_Rx &rArr; A7196_ChgTo_6M_B2 &rArr; ByteSendFast_B2
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_RxMode_Start
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ChgTo_6M_B2
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ChgTo_6M_B1
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ChgTo_3M_B2
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ChgTo_3M_B1
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuRxListenDataState
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsRfiu_FCC_DirectTXRX
</UL>

<P><STRONG><a name="[74c]"></a>rfiuDataPktConfig_Tx</STRONG> (ARM, 816 bytes, Stack size 24 bytes, rfiu.o(i.rfiuDataPktConfig_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = rfiuDataPktConfig_Tx &rArr; A7196_ChgTo_3M_B2 &rArr; ByteSendFast_B2
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_TxMode_Start
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ChgTo_3M_B2
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ChgTo_3M_B1
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuRxReplyACKState
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuReplyACK_FWUPD
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuFwUpdSend_Done_State
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsRfiu_FCC_DirectTXRX
</UL>

<P><STRONG><a name="[31]"></a>rfiuForceResync</STRONG> (ARM, 244 bytes, Stack size 24 bytes, rfiu.o(i.rfiuForceResync))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = rfiuForceResync &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[7bc]"></a>rfiuFwUpdLoadTxFW_SD</STRONG> (ARM, 664 bytes, Stack size 240 bytes, rfiu.o(i.rfiuFwUpdLoadTxFW_SD))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = rfiuFwUpdLoadTxFW_SD &rArr; dcfClose &rArr; FS_LB_Cache_Clean &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfRead
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOpen
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupRead
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupOpen
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupClose
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuTxFwUpdateFromSD
</UL>

<P><STRONG><a name="[7bd]"></a>rfiuFwUpdSend_Done_State</STRONG> (ARM, 260 bytes, Stack size 24 bytes, rfiu.o(i.rfiuFwUpdSend_Done_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = rfiuFwUpdSend_Done_State &rArr; RfiuReset &rArr; sysForceWDTtoReboot &rArr; spiReleaseFlashStatus &rArr; spiExit4ByteMode &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Tx
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfiuReset
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
</UL>

<P><STRONG><a name="[7d6]"></a>rfiuGetACK2FwUpdDataMap</STRONG> (ARM, 436 bytes, Stack size 16 bytes, rfiu.o(i.rfiuGetACK2FwUpdDataMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rfiuGetACK2FwUpdDataMap
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
</UL>

<P><STRONG><a name="[7d5]"></a>rfiuGetACKType</STRONG> (ARM, 212 bytes, Stack size 24 bytes, rfiu.o(i.rfiuGetACKType))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rfiuGetACKType
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
</UL>

<P><STRONG><a name="[7be]"></a>rfiuH264Decode</STRONG> (ARM, 628 bytes, Stack size 88 bytes, h264.o(i.rfiuH264Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = rfiuH264Decode &rArr; rfiuH264Decoding1Frame &rArr; sysForceWDTtoReboot &rArr; spiReleaseFlashStatus &rArr; spiExit4ByteMode &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_RF_SetEvt
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMPEG_enable
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMPEG_disable
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Decoding1Frame
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_ParseHeader
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
</UL>

<P><STRONG><a name="[37e]"></a>rfiuH264Decode_I_Header</STRONG> (ARM, 252 bytes, Stack size 4 bytes, h264.o(i.rfiuH264Decode_I_Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rfiuH264Decode_I_Header
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264_Decode_One_I_frame
</UL>

<P><STRONG><a name="[379]"></a>rfiuH264Decoding1Frame</STRONG> (ARM, 4000 bytes, Stack size 48 bytes, h264.o(i.rfiuH264Decoding1Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = rfiuH264Decoding1Frame &rArr; sysForceWDTtoReboot &rArr; spiReleaseFlashStatus &rArr; spiExit4ByteMode &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysForceWDTtoReboot
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCap1920x1080I
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Decode
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264DecodeLastFrame
</UL>

<P><STRONG><a name="[44d]"></a>rfiuH264Encode_I_Header</STRONG> (ARM, 112 bytes, Stack size 8 bytes, h264.o(i.rfiuH264Encode_I_Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = rfiuH264Encode_I_Header &rArr; H264Enc_SetResolution &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_SetResolution
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
</UL>

<P><STRONG><a name="[7bf]"></a>rfiuNoWifiCHsel</STRONG> (ARM, 328 bytes, Stack size 496 bytes, rfiu.o(i.rfiuNoWifiCHsel))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = rfiuNoWifiCHsel &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
</UL>

<P><STRONG><a name="[7c0]"></a>rfiuProcessCmdPkt</STRONG> (ARM, 1220 bytes, Stack size 32 bytes, rfiu.o(i.rfiuProcessCmdPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = rfiuProcessCmdPkt &rArr; rfiu_TXCMD_Dec &rArr; sysback_RF_SetEvt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_TXCMD_Dec
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCountRead
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
</UL>

<P><STRONG><a name="[7c2]"></a>rfiuPutFwUpdPkt2ACK</STRONG> (ARM, 544 bytes, Stack size 40 bytes, rfiu.o(i.rfiuPutFwUpdPkt2ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rfiuPutFwUpdPkt2ACK
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCountRead
</UL>
<BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuReplyACK_FWUPD
</UL>

<P><STRONG><a name="[7c3]"></a>rfiuPutPacketMap2ACK</STRONG> (ARM, 484 bytes, Stack size 40 bytes, rfiu.o(i.rfiuPutPacketMap2ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rfiuPutPacketMap2ACK
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCountRead
</UL>
<BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuRxReplyACKState
</UL>

<P><STRONG><a name="[7c4]"></a>rfiuPutTimeCheck2ACK</STRONG> (ARM, 232 bytes, Stack size 32 bytes, rfiu.o(i.rfiuPutTimeCheck2ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rfiuPutTimeCheck2ACK
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCountRead
</UL>
<BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuRxReplyACKState
</UL>

<P><STRONG><a name="[7c5]"></a>rfiuRXJdgDataSwich_3M</STRONG> (ARM, 288 bytes, Stack size 40 bytes, rfiu.o(i.rfiuRXJdgDataSwich_3M))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rfiuRXJdgDataSwich_3M &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
</UL>

<P><STRONG><a name="[7c6]"></a>rfiuReplyACK_FWUPD</STRONG> (ARM, 648 bytes, Stack size 72 bytes, rfiu.o(i.rfiuReplyACK_FWUPD))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = rfiuReplyACK_FWUPD &rArr; RfiuReset &rArr; sysForceWDTtoReboot &rArr; spiReleaseFlashStatus &rArr; spiExit4ByteMode &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuPutFwUpdPkt2ACK
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Tx
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfiuReset
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
</UL>

<P><STRONG><a name="[393]"></a>rfiuResetBatCamLiveMaxTime</STRONG> (ARM, 16 bytes, Stack size 0 bytes, wraprf.o(i.rfiuResetBatCamLiveMaxTime))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[7c7]"></a>rfiuRxListenDataState</STRONG> (ARM, 212 bytes, Stack size 24 bytes, rfiu.o(i.rfiuRxListenDataState))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = rfiuRxListenDataState &rArr; RfiuReset &rArr; sysForceWDTtoReboot &rArr; spiReleaseFlashStatus &rArr; spiExit4ByteMode &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Rx
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfiuReset
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
</UL>

<P><STRONG><a name="[7c8]"></a>rfiuRxReplyACKState</STRONG> (ARM, 872 bytes, Stack size 136 bytes, rfiu.o(i.rfiuRxReplyACKState))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = rfiuRxReplyACKState &rArr; RfiuReset &rArr; sysForceWDTtoReboot &rArr; spiReleaseFlashStatus &rArr; spiExit4ByteMode &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuPutTimeCheck2ACK
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuPutPacketMap2ACK
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Tx
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfiuReset
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
</UL>

<P><STRONG><a name="[52]"></a>rfiuSetGPO_TX</STRONG> (ARM, 4 bytes, Stack size 0 bytes, rfiu.o(i.rfiuSetGPO_TX))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>rfiuSetLightStat_RX</STRONG> (ARM, 28 bytes, Stack size 0 bytes, rfiu.o(i.rfiuSetLightStat_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = rfiuSetLightStat_RX &rArr; uiFlowSetRfLightStatus &rArr; uiFlowSetLightStatus &rArr; uiSetRfManualLightingRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetRfLightStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>rfiuSetMelodyNum_TX</STRONG> (ARM, 36 bytes, Stack size 0 bytes, rfiu.o(i.rfiuSetMelodyNum_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = rfiuSetMelodyNum_TX &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>rfiuSetMotorCtrl_TX</STRONG> (ARM, 40 bytes, Stack size 0 bytes, rfiu.o(i.rfiuSetMotorCtrl_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = rfiuSetMotorCtrl_TX &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>rfiuSetPWM_TX</STRONG> (ARM, 32 bytes, Stack size 0 bytes, rfiu.o(i.rfiuSetPWM_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = rfiuSetPWM_TX &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>rfiuSetVoxTrig_RX</STRONG> (ARM, 60 bytes, Stack size 0 bytes, rfiu.o(i.rfiuSetVoxTrig_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = rfiuSetVoxTrig_RX &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[7c9]"></a>rfiuTxFwUpdateFromNet</STRONG> (ARM, 504 bytes, Stack size 40 bytes, rfiu.o(i.rfiuTxFwUpdateFromNet))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = rfiuTxFwUpdateFromNet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[7ca]"></a>rfiuTxFwUpdateFromSD</STRONG> (ARM, 580 bytes, Stack size 40 bytes, rfiu.o(i.rfiuTxFwUpdateFromSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = rfiuTxFwUpdateFromSD &rArr; rfiuFwUpdLoadTxFW_SD &rArr; dcfClose &rArr; FS_LB_Cache_Clean &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuFwUpdLoadTxFW_SD
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[74f]"></a>rfiuWaitForInt_Rx</STRONG> (ARM, 832 bytes, Stack size 40 bytes, rfiu.o(i.rfiuWaitForInt_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = rfiuWaitForInt_Rx &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSSI_measurement_A7196
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_RxMode_Stop
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_CH_sel
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsRfiu_FCC_DirectTXRX
</UL>

<P><STRONG><a name="[74d]"></a>rfiuWaitForInt_Tx</STRONG> (ARM, 268 bytes, Stack size 32 bytes, rfiu.o(i.rfiuWaitForInt_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = rfiuWaitForInt_Tx &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_TxMode_Stop
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsRfiu_FCC_DirectTXRX
</UL>

<P><STRONG><a name="[3a0]"></a>rfiu_AudioRetONOFF_APP</STRONG> (ARM, 392 bytes, Stack size 32 bytes, wraprf.o(i.rfiu_AudioRetONOFF_APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = rfiu_AudioRetONOFF_APP &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kill_Task_Speaker
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[7cb]"></a>rfiu_AudioRetONOFF_IIS</STRONG> (ARM, 512 bytes, Stack size 32 bytes, wraprf.o(i.rfiu_AudioRetONOFF_IIS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = rfiu_AudioRetONOFF_IIS &rArr; MicVol_FadeOut &rArr; WM8940_MicVol_FadeOut &rArr; i2cWrite_WM8940 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicVol_FadeOut
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MicVol_FadeIn
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetTalkOnOff
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeChannel
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeAudio_QuadMode
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[7ba]"></a>rfiu_End</STRONG> (ARM, 1624 bytes, Stack size 40 bytes, rfiu.o(i.rfiu_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = rfiu_End &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSReset
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuCamOnOffCmd
</UL>

<P><STRONG><a name="[4d6]"></a>rfiu_InitCamOnOff</STRONG> (ARM, 156 bytes, Stack size 16 bytes, rfiu.o(i.rfiu_InitCamOnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = rfiu_InitCamOnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuCamOnOffCmd
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfiuInit
</UL>

<P><STRONG><a name="[7cc]"></a>rfiu_PAIR_Linit</STRONG> (ARM, 40 bytes, Stack size 8 bytes, rfiu.o(i.rfiu_PAIR_Linit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = rfiu_PAIR_Linit
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSet_Pair
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPairInMenu
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPair
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRFPairTest
</UL>

<P><STRONG><a name="[7cd]"></a>rfiu_PAIR_Stop</STRONG> (ARM, 40 bytes, Stack size 8 bytes, rfiu.o(i.rfiu_PAIR_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = rfiu_PAIR_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPairInMenu
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPair
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[7bb]"></a>rfiu_RXCMD_Enc</STRONG> (ARM, 4284 bytes, Stack size 152 bytes, rfiu.o(i.rfiu_RXCMD_Enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_UpdateTXOthersPara
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXsleepTime
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXVoxCfg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXTurbo_On
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXTurbo_Off
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXSchedule
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXReboot
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXPIRCfg
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXDoorBellOff
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetRXOpMode_All
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetRXOpMode_1
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SendTxMdSense
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_ResendTxMdConfig
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuCamSleepCmd
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfResolutionRxToTx
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfPIRRxToTx
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfMotionRxToTx
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfFlickerRxToTx
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfBrightnessRxToTx
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckP2PMode
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfManualLightingRxToTx
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PStatueToRF
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSynRfConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfTimeRxToTx
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TVout_Format
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRXCMDTest
</UL>

<P><STRONG><a name="[55]"></a>rfiu_ResendTxMdConfig</STRONG> (ARM, 208 bytes, Stack size 64 bytes, rfiu.o(i.rfiu_ResendTxMdConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = rfiu_ResendTxMdConfig &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[7ce]"></a>rfiu_RfSwAudio_DualMode</STRONG> (ARM, 124 bytes, Stack size 16 bytes, wraprf.o(i.rfiu_RfSwAudio_DualMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = rfiu_RfSwAudio_DualMode &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfSwAudio_DualMode
</UL>

<P><STRONG><a name="[12b]"></a>rfiu_RxMpeg4DecTask_UnitX</STRONG> (ARM, 7368 bytes, Stack size 752 bytes, wraprf.o(i.rfiu_RxMpeg4DecTask_UnitX))
<BR><BR>[Stack]<UL><LI>Max Depth = 4600 + Unknown Stack Size
<LI>Call Chain = rfiu_RxMpeg4DecTask_UnitX &rArr; osdDrawPlaybackArea &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustIISFreq
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCountRead
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_RF_SetEvt
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackSetEvt
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysForceWDTtoReboot
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Encode_I_Header
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Decode_I_Header
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Decode
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuCalVideoDisplayBufCount
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuCalBufRemainCount
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuCalAudioplayBufCount
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlaybackArea
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAOpen
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisStartRec
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisStartPlay
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisSetNextRecDMA
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5StopPlay
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5SetNextPlayDMA
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVColorbar_onoff
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackMode
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetTimerCounter
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ui.o(i.uiRfCreateDecTask)
<LI> sys.o(i.sysBack_RFI_RX_CH_Restart)
</UL>
<P><STRONG><a name="[120]"></a>rfiu_Rx_Task_UnitX</STRONG> (ARM, 10840 bytes, Stack size 424 bytes, rfiu.o(i.rfiu_Rx_Task_UnitX))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = rfiu_Rx_Task_UnitX &rArr; rfiuNoWifiCHsel &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteReg_B2
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WriteReg_B1
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ReadReg_B2
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ReadReg_B1
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_ID_Update
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_CH_sel
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRF
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuWaitForInt_Tx
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuWaitForInt_Rx
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuRxReplyACKState
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuRxListenDataState
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuReplyACK_FWUPD
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuRXJdgDataSwich_3M
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuProcessCmdPkt
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuNoWifiCHsel
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuGetACKType
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuGetACK2FwUpdDataMap
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuFwUpdSend_Done_State
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Tx
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuDataPktConfig_Rx
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfiuReset
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCountRead
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_RF_SetEvt
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackSetEvt
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetTimerCounter
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rfiu.o(i.rfiuCamOnOffCmd)
<LI> rfiu.o(i.rfiu_Start)
</UL>
<P><STRONG><a name="[56]"></a>rfiu_SendTxMdSense</STRONG> (ARM, 208 bytes, Stack size 64 bytes, rfiu.o(i.rfiu_SendTxMdSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = rfiu_SendTxMdSense &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>rfiu_SetRXOpMode_1</STRONG> (ARM, 224 bytes, Stack size 48 bytes, rfiu.o(i.rfiu_SetRXOpMode_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = rfiu_SetRXOpMode_1 &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeChannel
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_Syn_RF
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_P2P_Session
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[7d7]"></a>rfiu_SetRXOpMode_All</STRONG> (ARM, 224 bytes, Stack size 48 bytes, rfiu.o(i.rfiu_SetRXOpMode_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = rfiu_SetRXOpMode_All &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
</UL>

<P><STRONG><a name="[65]"></a>rfiu_SetTXDoorBellOff</STRONG> (ARM, 164 bytes, Stack size 32 bytes, rfiu.o(i.rfiu_SetTXDoorBellOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = rfiu_SetTXDoorBellOff &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>rfiu_SetTXPIRCfg</STRONG> (ARM, 164 bytes, Stack size 32 bytes, rfiu.o(i.rfiu_SetTXPIRCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = rfiu_SetTXPIRCfg &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckPIRSchedule
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>rfiu_SetTXReboot</STRONG> (ARM, 192 bytes, Stack size 32 bytes, rfiu.o(i.rfiu_SetTXReboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = rfiu_SetTXReboot &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[7d9]"></a>rfiu_SetTXSchedule</STRONG> (ARM, 264 bytes, Stack size 104 bytes, rfiu.o(i.rfiu_SetTXSchedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = rfiu_SetTXSchedule &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfLightTimerRxToTx
</UL>

<P><STRONG><a name="[58]"></a>rfiu_SetTXTurbo_Off</STRONG> (ARM, 156 bytes, Stack size 32 bytes, rfiu.o(i.rfiu_SetTXTurbo_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = rfiu_SetTXTurbo_Off &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>rfiu_SetTXTurbo_On</STRONG> (ARM, 156 bytes, Stack size 32 bytes, rfiu.o(i.rfiu_SetTXTurbo_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = rfiu_SetTXTurbo_On &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>rfiu_SetTXVoxCfg</STRONG> (ARM, 180 bytes, Stack size 32 bytes, rfiu.o(i.rfiu_SetTXVoxCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = rfiu_SetTXVoxCfg &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[394]"></a>rfiu_SetTXsleepTime</STRONG> (ARM, 164 bytes, Stack size 32 bytes, rfiu.o(i.rfiu_SetTXsleepTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = rfiu_SetTXsleepTime &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[740]"></a>rfiu_Start</STRONG> (ARM, 112 bytes, Stack size 8 bytes, rfiu.o(i.rfiu_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = rfiu_Start &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[7c1]"></a>rfiu_TXCMD_Dec</STRONG> (ARM, 184 bytes, Stack size 8 bytes, rfiu.o(i.rfiu_TXCMD_Dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = rfiu_TXCMD_Dec &rArr; sysback_RF_SetEvt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_RF_SetEvt
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuProcessCmdPkt
</UL>

<P><STRONG><a name="[7da]"></a>rfiu_TXCMD_Enc</STRONG> (ARM, 392 bytes, Stack size 48 bytes, rfiu.o(i.rfiu_TXCMD_Enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rfiu_TXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTXCMDTest
</UL>

<P><STRONG><a name="[5f]"></a>rfiu_UpdateTXOthersPara</STRONG> (ARM, 184 bytes, Stack size 32 bytes, rfiu.o(i.rfiu_UpdateTXOthersPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = rfiu_UpdateTXOthersPara &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfTimeStampTypeRxToTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[12c]"></a>rfiu_WrapRx_Task_UnitX</STRONG> (ARM, 2412 bytes, Stack size 96 bytes, wraprf.o(i.rfiu_WrapRx_Task_UnitX))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = rfiu_WrapRx_Task_UnitX &rArr; rfiuCamSleepCmd &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackPS_RF
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCountRead
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_RF_SetEvt
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetBTCWakeStatus
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuCamSleepCmd
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetTimerCounter
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskCreate
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.sysBack_RFI_RX_CH_Restart)
</UL>
<P><STRONG><a name="[12d]"></a>rfiu_WrapTx_Task_UnitX</STRONG> (ARM, 4 bytes, Stack size 0 bytes, wraprf.o(i.rfiu_WrapTx_Task_UnitX))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.sysBack_RFI_TX_CH_Create)
</UL>
<P><STRONG><a name="[66f]"></a>rpkt_finish_handler2</STRONG> (ARM, 364 bytes, Stack size 32 bytes, ftmac110.o(i.rpkt_finish_handler2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = rpkt_finish_handler2 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input2
</UL>

<P><STRONG><a name="[90e]"></a>rtcGetDayNum</STRONG> (ARM, 24 bytes, Stack size 0 bytes, rtc.o(i.rtcGetDayNum))
<BR><BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListCalendar
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
</UL>

<P><STRONG><a name="[975]"></a>rtcGetTmpCount</STRONG> (ARM, 56 bytes, Stack size 0 bytes, rtc.o(i.rtcGetTmpCount))
<BR><BR>[Called By]<UL><LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTimeTest
</UL>

<P><STRONG><a name="[fe]"></a>rtcIntHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rtc.o(i.rtcIntHandler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[7dc]"></a>rtcSetDefaultTime</STRONG> (ARM, 108 bytes, Stack size 16 bytes, rtc.o(i.rtcSetDefaultTime), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SD2068_RTC
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[974]"></a>rtcSetTmpCount</STRONG> (ARM, 48 bytes, Stack size 0 bytes, rtc.o(i.rtcSetTmpCount))
<BR><BR>[Called By]<UL><LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTimeTest
</UL>

<P><STRONG><a name="[8b1]"></a>saturation_read</STRONG> (ARM, 12 bytes, Stack size 0 bytes, i2c.o(i.saturation_read))
<BR><BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[8b2]"></a>saturation_write</STRONG> (ARM, 4 bytes, Stack size 0 bytes, i2c.o(i.saturation_write))
<BR><BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[7dd]"></a>sdcCardIdentificationMode2Dot0</STRONG> (ARM, 1476 bytes, Stack size 48 bytes, sdc.o(i.sdcCardIdentificationMode2Dot0))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = sdcCardIdentificationMode2Dot0 &rArr; sdcGetCsd2Dot0 &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcGetCsd2Dot0
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckCommandResponseComplete
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMountSeq
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMount
</UL>

<P><STRONG><a name="[7df]"></a>sdcChangeMediaStat</STRONG> (ARM, 76 bytes, Stack size 8 bytes, sdc.o(i.sdcChangeMediaStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = sdcChangeMediaStat &rArr; sdcSetStat &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageSel
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcSetStat
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
</UL>

<P><STRONG><a name="[7e1]"></a>sdcCheckCardBusy</STRONG> (ARM, 204 bytes, Stack size 16 bytes, sdc.o(i.sdcCheckCardBusy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[75a]"></a>sdcCheckCommandResponseComplete</STRONG> (ARM, 304 bytes, Stack size 16 bytes, sdc.o(i.sdcCheckCommandResponseComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCheckSDCD
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcGetCsd2Dot0
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcGetCardStatus
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDataTransferMode
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCardIdentificationMode2Dot0
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcWriteSingleBlock
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcWriteMultipleBlock
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcReadMultipleBlock
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcErase
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckTransferState
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcWriteSingleBlock
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcCheckTransferState
</UL>

<P><STRONG><a name="[75e]"></a>sdcCheckDmaReadComplete</STRONG> (ARM, 32 bytes, Stack size 8 bytes, sdc.o(i.sdcCheckDmaReadComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = sdcCheckDmaReadComplete &rArr; marsDMACheckReady &rArr; marsDMAWaitForInt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMACheckReady
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcReadSingleBlock
</UL>

<P><STRONG><a name="[762]"></a>sdcCheckDmaWriteComplete</STRONG> (ARM, 32 bytes, Stack size 8 bytes, sdc.o(i.sdcCheckDmaWriteComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = sdcCheckDmaWriteComplete &rArr; marsDMACheckReady &rArr; marsDMAWaitForInt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMACheckReady
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcWriteSingleBlock
</UL>

<P><STRONG><a name="[7e3]"></a>sdcCheckMultipleWriteError</STRONG> (ARM, 484 bytes, Stack size 16 bytes, sdc.o(i.sdcCheckMultipleWriteError))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sdcCheckMultipleWriteError &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcWriteMultipleBlock
</UL>

<P><STRONG><a name="[75f]"></a>sdcCheckReadError</STRONG> (ARM, 196 bytes, Stack size 8 bytes, sdc.o(i.sdcCheckReadError))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = sdcCheckReadError &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcReadSingleBlock
</UL>

<P><STRONG><a name="[7e4]"></a>sdcCheckTransferState</STRONG> (ARM, 324 bytes, Stack size 40 bytes, sdc.o(i.sdcCheckTransferState))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckCommandResponseComplete
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDataTransferMode
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcWriteSingleBlock
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcWriteMultipleBlock
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcReadSingleBlock
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcReadMultipleBlock
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevStatus
</UL>

<P><STRONG><a name="[763]"></a>sdcCheckWriteError</STRONG> (ARM, 356 bytes, Stack size 16 bytes, sdc.o(i.sdcCheckWriteError))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sdcCheckWriteError &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcWriteSingleBlock
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcWriteSingleBlock
</UL>

<P><STRONG><a name="[7e5]"></a>sdcDataTransferMode</STRONG> (ARM, 664 bytes, Stack size 48 bytes, sdc.o(i.sdcDataTransferMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckCommandResponseComplete
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckTransferState
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMountSeq
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMount
</UL>

<P><STRONG><a name="[7e6]"></a>sdcDetectCard</STRONG> (ARM, 68 bytes, Stack size 0 bytes, sdc.o(i.sdcDetectCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sdcDetectCard &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevWrite
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevStatus
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevRead
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevIoCtl
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevMulWrite
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevMulRead
</UL>

<P><STRONG><a name="[186]"></a>sdcDevIoCtl</STRONG> (ARM, 232 bytes, Stack size 24 bytes, sdcfs.o(i.sdcDevIoCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sdcDevIoCtl &rArr; sdcErase &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCF_GetDeviceIndex
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcErase
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDetectCard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(.constdata)
</UL>
<P><STRONG><a name="[183]"></a>sdcDevMulRead</STRONG> (ARM, 240 bytes, Stack size 16 bytes, sdcfs.o(i.sdcDevMulRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = sdcDevMulRead &rArr; sdcReadMultipleBlock &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcReadMultipleBlock
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcReadSingleBlock
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDetectCard
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>sdcDevMulWrite</STRONG> (ARM, 636 bytes, Stack size 40 bytes, sdcfs.o(i.sdcDevMulWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = sdcDevMulWrite &rArr; sdcWriteMultipleBlock &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcWriteSingleBlock
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcWriteMultipleBlock
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcWriteSingleBlock
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDetectCard
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(.constdata)
</UL>
<P><STRONG><a name="[182]"></a>sdcDevRead</STRONG> (ARM, 348 bytes, Stack size 16 bytes, sdcfs.o(i.sdcDevRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = sdcDevRead &rArr; mmcReadSingleBlock &rArr; sdcSetReadDataDma &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcReadSingleBlock
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcReadSingleBlock
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDetectCard
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>sdcDevStatus</STRONG> (ARM, 360 bytes, Stack size 8 bytes, sdcfs.o(i.sdcDevStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = sdcDevStatus &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCF_GetDeviceIndex
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMount
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckTransferState
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcCheckTransferState
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDetectCard
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(.constdata)
</UL>
<P><STRONG><a name="[184]"></a>sdcDevWrite</STRONG> (ARM, 204 bytes, Stack size 16 bytes, sdcfs.o(i.sdcDevWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = sdcDevWrite &rArr; mmcWriteSingleBlock &rArr; sdcSetWriteDataDma &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcWriteSingleBlock
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcWriteSingleBlock
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDetectCard
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(.constdata)
</UL>
<P><STRONG><a name="[7e7]"></a>sdcErase</STRONG> (ARM, 492 bytes, Stack size 24 bytes, sdc.o(i.sdcErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = sdcErase &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetStorageStatus
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageSel
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageInserted
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckCommandResponseComplete
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevIoCtl
</UL>

<P><STRONG><a name="[331]"></a>sdcErrorResultFilter</STRONG> (ARM, 36 bytes, Stack size 0 bytes, sdcfs.o(i.sdcErrorResultFilter))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_WRretry
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_RDretry
</UL>

<P><STRONG><a name="[7ec]"></a>sdcGetCardStatus</STRONG> (ARM, 176 bytes, Stack size 24 bytes, sdc.o(i.sdcGetCardStatus), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckCommandResponseComplete
</UL>

<P><STRONG><a name="[7de]"></a>sdcGetCsd2Dot0</STRONG> (ARM, 816 bytes, Stack size 40 bytes, sdc.o(i.sdcGetCsd2Dot0))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sdcGetCsd2Dot0 &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckCommandResponseComplete
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCardIdentificationMode2Dot0
</UL>

<P><STRONG><a name="[7ed]"></a>sdcGetIntEvt</STRONG> (ARM, 152 bytes, Stack size 24 bytes, sdc.o(i.sdcGetIntEvt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[75b]"></a>sdcGetResponseR1</STRONG> (ARM, 36 bytes, Stack size 0 bytes, sdc.o(i.sdcGetResponseR1))
<BR><BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcWriteSingleBlock
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcReadSingleBlock
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcCheckTransferState
</UL>

<P><STRONG><a name="[7ee]"></a>sdcInit</STRONG> (ARM, 368 bytes, Stack size 16 bytes, sdc.o(i.sdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = sdcInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCRst
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcTaskInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMountSeq
</UL>

<P><STRONG><a name="[fa]"></a>sdcIntHandler</STRONG> (ARM, 400 bytes, Stack size 24 bytes, sdc.o(i.sdcIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = sdcIntHandler &rArr; sdcSetIntEvt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcSetIntEvt
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[334]"></a>sdcMount</STRONG> (ARM, 424 bytes, Stack size 24 bytes, sdc.o(i.sdcMount))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCRst
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDataTransferMode
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCardIdentificationMode2Dot0
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevStatus
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_write
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_WRretry
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_RDretry
</UL>

<P><STRONG><a name="[79]"></a>sdcMountSeq</STRONG> (ARM, 604 bytes, Stack size 40 bytes, sdc.o(i.sdcMountSeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = sdcMountSeq &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSentMountSeq
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCRst
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcInit
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDataTransferMode
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCardIdentificationMode2Dot0
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdc.o(.data)
</UL>
<P><STRONG><a name="[7f2]"></a>sdcPowerOnRest</STRONG> (ARM, 184 bytes, Stack size 16 bytes, sdc.o(i.sdcPowerOnRest), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[7e8]"></a>sdcReadMultipleBlock</STRONG> (ARM, 540 bytes, Stack size 48 bytes, sdc.o(i.sdcReadMultipleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = sdcReadMultipleBlock &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAReq
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMACheckReady
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckCommandResponseComplete
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckTransferState
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevMulRead
</UL>

<P><STRONG><a name="[7eb]"></a>sdcReadSingleBlock</STRONG> (ARM, 376 bytes, Stack size 32 bytes, sdc.o(i.sdcReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = sdcReadSingleBlock &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAReq
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMACheckReady
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckTransferState
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevRead
</UL>

<P><STRONG><a name="[759]"></a>sdcSetCommand</STRONG> (ARM, 40 bytes, Stack size 0 bytes, sdc.o(i.sdcSetCommand))
<BR><BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcWriteSingleBlock
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcReadSingleBlock
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcCheckTransferState
</UL>

<P><STRONG><a name="[7f0]"></a>sdcSetIntEvt</STRONG> (ARM, 192 bytes, Stack size 24 bytes, sdc.o(i.sdcSetIntEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sdcSetIntEvt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcTaskInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcIntHandler
</UL>

<P><STRONG><a name="[75d]"></a>sdcSetReadDataDma</STRONG> (ARM, 168 bytes, Stack size 24 bytes, sdc.o(i.sdcSetReadDataDma))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = sdcSetReadDataDma &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAReq
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcReadSingleBlock
</UL>

<P><STRONG><a name="[7e0]"></a>sdcSetStat</STRONG> (ARM, 156 bytes, Stack size 24 bytes, sdcusb.o(i.sdcSetStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sdcSetStat &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcChangeMediaStat
</UL>

<P><STRONG><a name="[761]"></a>sdcSetWriteDataDma</STRONG> (ARM, 168 bytes, Stack size 24 bytes, sdc.o(i.sdcSetWriteDataDma))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = sdcSetWriteDataDma &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAReq
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcWriteSingleBlock
</UL>

<P><STRONG><a name="[124]"></a>sdcTask</STRONG> (ARM, 200 bytes, Stack size 32 bytes, sdc.o(i.sdcTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = sdcTask &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdc.o(i.sdcTaskInit)
</UL>
<P><STRONG><a name="[741]"></a>sdcTaskInit</STRONG> (ARM, 152 bytes, Stack size 8 bytes, sdc.o(i.sdcTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = sdcTaskInit &rArr; sdcSetIntEvt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcSetIntEvt
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[819]"></a>sdcUnInit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sdc.o(i.sdcUnInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_OFF
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_Device_Mount
</UL>

<P><STRONG><a name="[5e9]"></a>sdcUnmount</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sdc.o(i.sdcUnmount))
<BR><BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfUninit
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupUninit
</UL>

<P><STRONG><a name="[7a]"></a>sdcUnmountSeq</STRONG> (ARM, 140 bytes, Stack size 8 bytes, sdc.o(i.sdcUnmountSeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sdcUnmountSeq &rArr; sysSentMountSeq &rArr; sysGetStoragePriority &rArr; sysGetStorageInserted &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSentMountSeq
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdc.o(.data)
</UL>
<P><STRONG><a name="[7e9]"></a>sdcWriteMultipleBlock</STRONG> (ARM, 980 bytes, Stack size 56 bytes, sdc.o(i.sdcWriteMultipleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = sdcWriteMultipleBlock &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAReq
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMACheckReady
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckMultipleWriteError
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckCommandResponseComplete
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckTransferState
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevMulWrite
</UL>

<P><STRONG><a name="[7ea]"></a>sdcWriteSingleBlock</STRONG> (ARM, 444 bytes, Stack size 40 bytes, sdc.o(i.sdcWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = sdcWriteSingleBlock &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAReq
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMACheckReady
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errHandle
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckWriteError
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckCommandResponseComplete
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckTransferState
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevWrite
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcDevMulWrite
</UL>

<P><STRONG><a name="[406]"></a>sendIOTC_Query_Device</STRONG> (ARM, 256 bytes, Stack size 1480 bytes, iotcapis.o(i.sendIOTC_Query_Device))
<BR><BR>[Stack]<UL><LI>Max Depth = 3296 + Unknown Stack Size
<LI>Call Chain = sendIOTC_Query_Device &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Query_VPGServerList
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dailyUpdateSendQueryTask
</UL>

<P><STRONG><a name="[597]"></a>sendchar</STRONG> (ARM, 148 bytes, Stack size 8 bytes, uart.o(i.sendchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sendchar
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>

<P><STRONG><a name="[566]"></a>setIOTC_Feature_Bitmap</STRONG> (ARM, 516 bytes, Stack size 40 bytes, iotcfeaturecontroller.o(i.setIOTC_Feature_Bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = setIOTC_Feature_Bitmap &rArr; monopool_alloc &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[73d]"></a>siuInit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, siu_none.o(i.siuInit))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[102]"></a>siuIntHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, siu_none.o(i.siuIntHandler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[473]"></a>siuStop</STRONG> (ARM, 4 bytes, Stack size 0 bytes, siu_none.o(i.siuStop))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysVOICE_REC
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
</UL>

<P><STRONG><a name="[7f3]"></a>spi4ByteRead</STRONG> (ARM, 260 bytes, Stack size 48 bytes, spi_wbd_eon.o(i.spi4ByteRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = spi4ByteRead &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAReq
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMACheckReady
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSemProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
</UL>

<P><STRONG><a name="[7f4]"></a>spi4ByteSectorErase</STRONG> (ARM, 284 bytes, Stack size 32 bytes, spi_wbd_eon.o(i.spi4ByteSectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = spi4ByteSectorErase &rArr; spiWREN &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWREN
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSemProcess
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRDSR
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSectorErase
</UL>

<P><STRONG><a name="[7f7]"></a>spi4ByteWrite</STRONG> (ARM, 356 bytes, Stack size 48 bytes, spi_wbd_eon.o(i.spi4ByteWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = spi4ByteWrite &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAReq
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMACheckReady
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWREN
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSemProcess
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRDSR
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
</UL>

<P><STRONG><a name="[7f8]"></a>spiAddressLocate</STRONG> (ARM, 380 bytes, Stack size 8 bytes, spiapi.o(i.spiAddressLocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = spiAddressLocate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRF
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spibootCodeUpdate
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteUIBackup
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteUI
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteNet
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCodeUpdate
</UL>

<P><STRONG><a name="[7f9]"></a>spiArrangeSpace</STRONG> (ARM, 1556 bytes, Stack size 16 bytes, spiapi.o(i.spiArrangeSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = spiArrangeSpace &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStart
</UL>

<P><STRONG><a name="[6df]"></a>spiBlkSemProcess</STRONG> (ARM, 72 bytes, Stack size 8 bytes, spi_wbd_eon.o(i.spiBlkSemProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = spiBlkSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareUpdateFlow
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetPrepare
</UL>

<P><STRONG><a name="[6ec]"></a>spiCmpBootWriteData</STRONG> (ARM, 212 bytes, Stack size 24 bytes, spiapi.o(i.spiCmpBootWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = spiCmpBootWriteData &rArr; spiRead &rArr; spi4ByteRead &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDeadLockMonitor_Reset
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdatebootload
</UL>

<P><STRONG><a name="[6e9]"></a>spiCmpWriteData</STRONG> (ARM, 212 bytes, Stack size 24 bytes, spiapi.o(i.spiCmpWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = spiCmpWriteData &rArr; spiRead &rArr; spi4ByteRead &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDeadLockMonitor_Reset
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdate
</UL>

<P><STRONG><a name="[6e8]"></a>spiCodeUpdate</STRONG> (ARM, 764 bytes, Stack size 40 bytes, spiapi.o(i.spiCodeUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = spiCodeUpdate &rArr; spiWrite &rArr; spi4ByteWrite &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSectorErase
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiAddressLocate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdate
</UL>

<P><STRONG><a name="[7fd]"></a>spiEWSR</STRONG> (ARM, 112 bytes, Stack size 8 bytes, spi_wbd_eon.o(i.spiEWSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = spiEWSR &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSemProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSectorErase
</UL>

<P><STRONG><a name="[7fe]"></a>spiExit4ByteMode</STRONG> (ARM, 124 bytes, Stack size 16 bytes, spi_wbd_eon.o(i.spiExit4ByteMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = spiExit4ByteMode &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSemProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReleaseFlashStatus
</UL>

<P><STRONG><a name="[7ff]"></a>spiGet_UI_FB_Index</STRONG> (ARM, 236 bytes, Stack size 48 bytes, spiapi.o(i.spiGet_UI_FB_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = spiGet_UI_FB_Index &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetStartMovie
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuInit
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphGetImageID
</UL>

<P><STRONG><a name="[800]"></a>spiIdentification</STRONG> (ARM, 1812 bytes, Stack size 40 bytes, spi_wbd_eon.o(i.spiIdentification))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = spiIdentification &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSemProcess
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStart
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMount
</UL>

<P><STRONG><a name="[738]"></a>spiInit</STRONG> (ARM, 140 bytes, Stack size 8 bytes, spi_wbd_eon.o(i.spiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = spiInit &rArr; OSSemCreate &rArr; OS_EventWaitListInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[ff]"></a>spiIntHandler</STRONG> (ARM, 132 bytes, Stack size 16 bytes, spi_wbd_eon.o(i.spiIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = spiIntHandler &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[6e7]"></a>spiMount</STRONG> (ARM, 4 bytes, Stack size 0 bytes, spiapi.o(i.spiMount))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = spiMount &rArr; spiIdentification &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIdentification
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdatebootload
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdate
</UL>

<P><STRONG><a name="[7f6]"></a>spiRDSR</STRONG> (ARM, 108 bytes, Stack size 8 bytes, spi_wbd_eon.o(i.spiRDSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = spiRDSR &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSemProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSectorErase
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteWrite
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteSectorErase
</UL>

<P><STRONG><a name="[7fa]"></a>spiRead</STRONG> (ARM, 376 bytes, Stack size 40 bytes, spi_wbd_eon.o(i.spiRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = spiRead &rArr; spi4ByteRead &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAReq
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMACheckReady
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSemProcess
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteRead
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiUI_OpenFB_ByIndex
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadVersion
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadUIBackup
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadUI
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadRF_ID
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadNet
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadFBSetting
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadData
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCmpWriteData
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCmpBootWriteData
</UL>

<P><STRONG><a name="[801]"></a>spiReadData</STRONG> (ARM, 216 bytes, Stack size 24 bytes, spiapi.o(i.spiReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = spiReadData &rArr; spiRead &rArr; spi4ByteRead &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSPI_Enable
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSPI_Disable
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Enable
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Disable
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStart
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetUID_To_Flash
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetMAC_To_Flash
</UL>

<P><STRONG><a name="[802]"></a>spiReadFBSetting</STRONG> (ARM, 392 bytes, Stack size 32 bytes, spiapi.o(i.spiReadFBSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = spiReadFBSetting &rArr; spiRead &rArr; spi4ByteRead &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
</UL>

<P><STRONG><a name="[803]"></a>spiReadNet</STRONG> (ARM, 208 bytes, Stack size 24 bytes, spiapi.o(i.spiReadNet))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = spiReadNet &rArr; spiRead &rArr; spi4ByteRead &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiReadNetworkIDFromFlash
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStart
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
</UL>

<P><STRONG><a name="[805]"></a>spiReadRF_ID</STRONG> (ARM, 208 bytes, Stack size 24 bytes, spiapi.o(i.spiReadRF_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = spiReadRF_ID &rArr; spiRead &rArr; spi4ByteRead &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiReadRFIDFromFlash
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStart
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
</UL>

<P><STRONG><a name="[4cf]"></a>spiReadUI</STRONG> (ARM, 404 bytes, Stack size 32 bytes, spiapi.o(i.spiReadUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = spiReadUI &rArr; spiRead &rArr; spi4ByteRead &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetDefaultSetting
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiReadSettingFromFlash
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGetSaveChecksum
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UI_Setting
</UL>

<P><STRONG><a name="[808]"></a>spiReadUIBackup</STRONG> (ARM, 276 bytes, Stack size 24 bytes, spiapi.o(i.spiReadUIBackup), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetDefaultSetting
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiReadSettingFromFlash
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGetSaveChecksum
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[809]"></a>spiReadVersion</STRONG> (ARM, 208 bytes, Stack size 24 bytes, spiapi.o(i.spiReadVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = spiReadVersion &rArr; spiRead &rArr; spi4ByteRead &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiReadVersionFromFlash
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStart
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
</UL>

<P><STRONG><a name="[6e0]"></a>spiReleSemProcess</STRONG> (ARM, 12 bytes, Stack size 0 bytes, spi_wbd_eon.o(i.spiReleSemProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = spiReleSemProcess &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareUpdateFlow
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetPrepare
</UL>

<P><STRONG><a name="[80b]"></a>spiReleaseFlashStatus</STRONG> (ARM, 20 bytes, Stack size 0 bytes, spiapi.o(i.spiReleaseFlashStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = spiReleaseFlashStatus &rArr; spiExit4ByteMode &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiExit4ByteMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysForceWDTtoReboot
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDeadLockMonitor
</UL>

<P><STRONG><a name="[7fb]"></a>spiSectorErase</STRONG> (ARM, 360 bytes, Stack size 24 bytes, spi_wbd_eon.o(i.spiSectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = spiSectorErase &rArr; spi4ByteSectorErase &rArr; spiWREN &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWRSR
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWREN
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSemProcess
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRDSR
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEWSR
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteSectorErase
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRF
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spibootCodeUpdate
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiallCodeUpdate
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteUIBackup
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteUI
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteNet
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCodeUpdate
</UL>

<P><STRONG><a name="[6e3]"></a>spiSemProcess</STRONG> (ARM, 876 bytes, Stack size 16 bytes, spi_wbd_eon.o(i.spiSemProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysForceWDTtoReboot
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSectorErase
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIdentification
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiExit4ByteMode
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetUpdateFlow
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWRSR
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWREN
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRDSR
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEWSR
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteWrite
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteSectorErase
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteRead
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDeadLockMonitor
</UL>

<P><STRONG><a name="[4ce]"></a>spiStart</STRONG> (ARM, 120 bytes, Stack size 16 bytes, spiapi.o(i.spiStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = spiStart &rArr; spiIdentification &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIdentification
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiArrangeSpace
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiUI_OpenFB_ByIndex
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadVersion
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadRF_ID
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadNet
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadData
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UI_Setting
</UL>

<P><STRONG><a name="[80d]"></a>spiUI_OpenFB_ByIndex</STRONG> (ARM, 100 bytes, Stack size 16 bytes, spiapi.o(i.spiUI_OpenFB_ByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = spiUI_OpenFB_ByIndex &rArr; spiRead &rArr; spi4ByteRead &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRead
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStart
</UL>
<BR>[Called By]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJpgGraph
</UL>

<P><STRONG><a name="[7f5]"></a>spiWREN</STRONG> (ARM, 112 bytes, Stack size 8 bytes, spi_wbd_eon.o(i.spiWREN))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = spiWREN &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSemProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSectorErase
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteWrite
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteSectorErase
</UL>

<P><STRONG><a name="[80c]"></a>spiWRSR</STRONG> (ARM, 112 bytes, Stack size 8 bytes, spi_wbd_eon.o(i.spiWRSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = spiWRSR &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSemProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSectorErase
</UL>

<P><STRONG><a name="[7fc]"></a>spiWrite</STRONG> (ARM, 436 bytes, Stack size 48 bytes, spi_wbd_eon.o(i.spiWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = spiWrite &rArr; spi4ByteWrite &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAReq
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMACheckReady
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWRSR
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWREN
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSemProcess
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRDSR
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiEWSR
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi4ByteWrite
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRF
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spibootCodeUpdate
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiallCodeUpdate
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteUIBackup
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteUI
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteNet
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCodeUpdate
</UL>

<P><STRONG><a name="[80e]"></a>spiWriteNet</STRONG> (ARM, 340 bytes, Stack size 24 bytes, spiapi.o(i.spiWriteNet))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = spiWriteNet &rArr; spiWrite &rArr; spi4ByteWrite &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiWriteNetworkIDFromFlash
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSPI_Enable
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSPI_Disable
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Enable
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Disable
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSectorErase
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiAddressLocate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_P2PID
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_MACAddr
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetUID_To_Flash
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetMAC_To_Flash
</UL>

<P><STRONG><a name="[4f]"></a>spiWriteRF</STRONG> (ARM, 508 bytes, Stack size 32 bytes, spiapi.o(i.spiWriteRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = spiWriteRF &rArr; spiWrite &rArr; spi4ByteWrite &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiWriteRFIDFromFlash
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSPI_Enable
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSPI_Disable
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Enable
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Disable
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSectorErase
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiAddressLocate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_RFID_CODE
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_RFID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[4e0]"></a>spiWriteUI</STRONG> (ARM, 324 bytes, Stack size 24 bytes, spiapi.o(i.spiWriteUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = spiWriteUI &rArr; spiWrite &rArr; spi4ByteWrite &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiWriteSettingToFlash
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSectorErase
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiAddressLocate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
</UL>

<P><STRONG><a name="[4e1]"></a>spiWriteUIBackup</STRONG> (ARM, 384 bytes, Stack size 24 bytes, spiapi.o(i.spiWriteUIBackup))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = spiWriteUIBackup &rArr; spiWrite &rArr; spi4ByteWrite &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiWriteSettingToFlash
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSectorErase
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiAddressLocate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
</UL>

<P><STRONG><a name="[6e2]"></a>spiallCodeUpdate</STRONG> (ARM, 520 bytes, Stack size 40 bytes, spiapi.o(i.spiallCodeUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = spiallCodeUpdate &rArr; spiWrite &rArr; spi4ByteWrite &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSectorErase
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload_Net
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetUpdateFlow
</UL>

<P><STRONG><a name="[6eb]"></a>spibootCodeUpdate</STRONG> (ARM, 656 bytes, Stack size 40 bytes, spiapi.o(i.spibootCodeUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = spibootCodeUpdate &rArr; spiWrite &rArr; spi4ByteWrite &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWrite
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSectorErase
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiAddressLocate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdatebootload
</UL>

<P><STRONG><a name="[7b2]"></a>sqrt</STRONG> (ARM, 108 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[700]"></a>stats_init</STRONG> (ARM, 24 bytes, Stack size 0 bytes, stats.o(i.stats_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[1ab]"></a>stmemInit</STRONG> (ARM, 164 bytes, Stack size 20 bytes, initshadow.o(i.stmemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stmemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[106]"></a>subTVIntHandler</STRONG> (ARM, 952 bytes, Stack size 32 bytes, idu.o(i.subTVIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = subTVIntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[813]"></a>subTV_Preview</STRONG> (ARM, 284 bytes, Stack size 16 bytes, idu.o(i.subTV_Preview))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = subTV_Preview &rArr; subTV_init
</UL>
<BR>[Calls]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTV_init
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
</UL>

<P><STRONG><a name="[814]"></a>subTV_init</STRONG> (ARM, 572 bytes, Stack size 40 bytes, idu.o(i.subTV_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = subTV_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTurnOnTVDAC
</UL>
<BR>[Called By]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTV_Preview
</UL>

<P><STRONG><a name="[815]"></a>submit_bulk_msg</STRONG> (ARM, 36 bytes, Stack size 8 bytes, ehci-hcd.o(i.submit_bulk_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = submit_bulk_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_submit_async
</UL>
<BR>[Called By]<UL><LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bulk_msg
</UL>

<P><STRONG><a name="[816]"></a>submit_control_msg</STRONG> (ARM, 76 bytes, Stack size 24 bytes, ehci-hcd.o(i.submit_control_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = submit_control_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_submit_root
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_submit_async
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_control_msg
</UL>

<P><STRONG><a name="[48]"></a>sysBackLowGetDiskFree</STRONG> (ARM, 48 bytes, Stack size 16 bytes, sys.o(i.sysBackLowGetDiskFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = sysBackLowGetDiskFree &rArr; dcfDriveInfo &rArr; FS_IoCtl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDriveInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>sysBackLow_Device_Mount</STRONG> (ARM, 1156 bytes, Stack size 48 bytes, sys.o(i.sysBackLow_Device_Mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 4720 + Unknown Stack Size
<LI>Call Chain = sysBackLow_Device_Mount &rArr; sysUSBCD_IN &rArr; dcfInit &rArr; dcfDirInit &rArr; uiCheckTXUpgradeFileName &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSdCardMode
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcUnInit
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfUninit
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCF_GetDeviceIndex
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_IN
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetStorageStatus
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysKeepSetStorageSel
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStoragePriority
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageInserted
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageIndex
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>sysBackLow_Device_UnMount</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysBackLow_Device_UnMount))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>sysBackLow_Syn_RF</STRONG> (ARM, 104 bytes, Stack size 16 bytes, sys.o(i.sysBackLow_Syn_RF))
<BR><BR>[Stack]<UL><LI>Max Depth = 4056 + Unknown Stack Size
<LI>Call Chain = sysBackLow_Syn_RF &rArr; uiSynRfConfig &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetRXOpMode_1
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSynRfConfig
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>sysBackLow_UI_KEY_SDCD</STRONG> (ARM, 224 bytes, Stack size 24 bytes, sys.o(i.sysBackLow_UI_KEY_SDCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728 + Unknown Stack Size
<LI>Call Chain = sysBackLow_UI_KEY_SDCD &rArr; uiCheckSDCD &rArr; sysSDCD_IN &rArr; dcfInit &rArr; dcfDirInit &rArr; uiCheckTXUpgradeFileName &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSdCardMode
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCardReady
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckSDCD
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>sysBackLow_UI_KEY_USB</STRONG> (ARM, 236 bytes, Stack size 24 bytes, sys.o(i.sysBackLow_UI_KEY_USB))
<BR><BR>[Stack]<UL><LI>Max Depth = 4728 + Unknown Stack Size
<LI>Call Chain = sysBackLow_UI_KEY_USB &rArr; uiCheckUSBCD &rArr; sysUSBCD_IN &rArr; dcfInit &rArr; dcfDirInit &rArr; uiCheckTXUpgradeFileName &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSdCardMode
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCardReady
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckUSBCD
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>sysBack_Check_TVinFormat</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysBack_Check_TVinFormat))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>sysBack_Check_UI</STRONG> (ARM, 68 bytes, Stack size 8 bytes, sys.o(i.sysBack_Check_UI))
<BR><BR>[Stack]<UL><LI>Max Depth = 4088 + Unknown Stack Size
<LI>Call Chain = sysBack_Check_UI &rArr; uiFlowRunPerSec &rArr; uiOsdVolumeControl &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSentKeyToUi
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCheckBTCBatteryLevel
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBatteryCam_stopIfDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>sysBack_Check_VideoinSource</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sys.o(i.sysBack_Check_VideoinSource))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>sysBack_Draw_Battery</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sys.o(i.sysBack_Draw_Battery))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysBack_Draw_Battery
</UL>
<BR>[Calls]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawBattery
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>sysBack_Draw_BitRate</STRONG> (ARM, 16 bytes, Stack size 8 bytes, sys.o(i.sysBack_Draw_BitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = sysBack_Draw_BitRate &rArr; uiOsdDrawBitRate &rArr; uiOsdDrawAtenna &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawBitRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>sysBack_Draw_FrameRate</STRONG> (ARM, 16 bytes, Stack size 8 bytes, sys.o(i.sysBack_Draw_FrameRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = sysBack_Draw_FrameRate &rArr; uiOsdDrawFrameRate &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawFrameRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>sysBack_Draw_NET_Icon</STRONG> (ARM, 16 bytes, Stack size 8 bytes, sys.o(i.sysBack_Draw_NET_Icon))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = sysBack_Draw_NET_Icon &rArr; phyNETRunPerSec &rArr; uiOsdDrawNetworkLink &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyNETRunPerSec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>sysBack_Draw_OSDString</STRONG> (ARM, 84 bytes, Stack size 16 bytes, sys.o(i.sysBack_Draw_OSDString))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = sysBack_Draw_OSDString &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDMultiLanguageStrCenter
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>sysBack_Draw_SD_Icon</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sys.o(i.sysBack_Draw_SD_Icon))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = sysBack_Draw_SD_Icon &rArr; osdDrawSDIcon &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSDIcon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>sysBack_RFI_RX_CH_Restart</STRONG> (ARM, 1252 bytes, Stack size 40 bytes, sys.o(i.sysBack_RFI_RX_CH_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = sysBack_RFI_RX_CH_Restart &rArr; RfRxVideoPackerSubTaskDestroy &rArr; MultiChannelAsfCaptureVideoStop &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAClose
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskDestroy
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>sysBack_RFI_TX_CH_Create</STRONG> (ARM, 148 bytes, Stack size 8 bytes, sys.o(i.sysBack_RFI_TX_CH_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sysBack_RFI_TX_CH_Create &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>sysBack_RFI_TX_CH_Del</STRONG> (ARM, 64 bytes, Stack size 8 bytes, sys.o(i.sysBack_RFI_TX_CH_Del))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = sysBack_RFI_TX_CH_Del &rArr; OSTaskDel &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>sysBack_RFI_TX_Change_Reso</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysBack_RFI_TX_Change_Reso))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>sysBack_RFI_TX_SnapShot</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysBack_RFI_TX_SnapShot))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>sysBack_ScheduleMode</STRONG> (ARM, 160 bytes, Stack size 24 bytes, sys.o(i.sysBack_ScheduleMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = sysBack_ScheduleMode &rArr; RTC_Get_Time &rArr; RTC_Get_GMT_Time &rArr; Set_SD2068_RTC &rArr; i2cWrite_SD2068 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Record_ScheduleMode
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>sysBack_Set_Sensor_Color</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysBack_Set_Sensor_Color))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>sysBackupFormat</STRONG> (ARM, 184 bytes, Stack size 16 bytes, sys.o(i.sysBackupFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = sysBackupFormat &rArr; dcfBackupCacheClean &rArr; FS_LB_Cache_Clean &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupFormat
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupDriveInfo
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupCacheClean
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[894]"></a>sysBatteryCam_isSleeping</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sys.o(i.sysBatteryCam_isSleeping))
<BR><BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckP2PMode
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckMotion
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBatterySchdule
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawResolution
</UL>

<P><STRONG><a name="[820]"></a>sysBatteryCam_stopIfDone</STRONG> (ARM, 276 bytes, Stack size 40 bytes, sys.o(i.sysBatteryCam_stopIfDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = sysBatteryCam_stopIfDone &rArr; uiOsdDrawCameraBatteryLevel &rArr; H264_Decode_One_I_frame &rArr; H264DecodeLastFrame &rArr; Idu_ClearBuf &rArr; memset_hw_Word &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuCamSleepCmd
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCameraBatteryLevel
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_Check_UI
</UL>

<P><STRONG><a name="[895]"></a>sysBatteryCam_wake</STRONG> (ARM, 68 bytes, Stack size 0 bytes, sys.o(i.sysBatteryCam_wake))
<BR><BR>[Called By]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBatterySchdule
</UL>

<P><STRONG><a name="[59]"></a>sysCaptureImage_OnRFRx</STRONG> (ARM, 572 bytes, Stack size 48 bytes, sys.o(i.sysCaptureImage_OnRFRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = sysCaptureImage_OnRFRx &rArr; exifWriteFile &rArr; dcfCreateNextFile &rArr; dcfCreateNextDir &rArr; dcfCheckDirExist &rArr; FS_OpenDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCapturePreviewImg
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifWriteFile
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifSetImageResolution
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifSetDateTime
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifSetCopyRightVersion
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifSetCompressedBitsPerPixel
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitJpegEncComplete
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[12e]"></a>sysCaptureVideoSubTask</STRONG> (ARM, 168 bytes, Stack size 8 bytes, sys_project.o(i.sysCaptureVideoSubTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = sysCaptureVideoSubTask &rArr; MultiChannelAsfCaptureVideo &rArr; MultiChannelAsfWriteVidePayload &rArr; MultiChannelAsfWriteDataPacketPost &rArr; dcfOverWriteDel &rArr; dcfOWDel &rArr; FS_Remove &rArr; FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetEvt
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_project.o(i.sysCaptureVideoSubTaskCreate)
</UL>
<P><STRONG><a name="[47f]"></a>sysCaptureVideoSubTaskCreate</STRONG> (ARM, 1152 bytes, Stack size 40 bytes, sys_project.o(i.sysCaptureVideoSubTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = sysCaptureVideoSubTaskCreate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoOneCh
</UL>

<P><STRONG><a name="[481]"></a>sysCaptureVideoSubTaskDestroy</STRONG> (ARM, 1220 bytes, Stack size 24 bytes, sys_project.o(i.sysCaptureVideoSubTaskDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = sysCaptureVideoSubTaskDestroy &rArr; MultiChannelAsfCaptureVideoStop &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideoStop
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoStopOneCh
</UL>

<P><STRONG><a name="[821]"></a>sysCheckBTCBatteryLevel</STRONG> (ARM, 576 bytes, Stack size 48 bytes, sys.o(i.sysCheckBTCBatteryLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = sysCheckBTCBatteryLevel &rArr; uiOsdDrawCameraBatteryLevel &rArr; H264_Decode_One_I_frame &rArr; H264DecodeLastFrame &rArr; Idu_ClearBuf &rArr; memset_hw_Word &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCameraBatteryLevel
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_Check_UI
</UL>

<P><STRONG><a name="[682]"></a>sysCheckNextEvtIsPrevOrNext</STRONG> (ARM, 52 bytes, Stack size 0 bytes, sys.o(i.sysCheckNextEvtIsPrevOrNext))
<BR><BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifReadFile
</UL>

<P><STRONG><a name="[7e2]"></a>sysCheckSDCD</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sys.o(i.sysCheckSDCD))
<BR><BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckSDCD
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcCheckCommandResponseComplete
</UL>

<P><STRONG><a name="[8a0]"></a>sysCheckUSBCD</STRONG> (ARM, 28 bytes, Stack size 0 bytes, sys.o(i.sysCheckUSBCD))
<BR><BR>[Called By]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckUSBCD
</UL>

<P><STRONG><a name="[4f8]"></a>sysDeadLockMonitor</STRONG> (ARM, 248 bytes, Stack size 16 bytes, sys.o(i.sysDeadLockMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = sysDeadLockMonitor &rArr; spiReleaseFlashStatus &rArr; spiExit4ByteMode &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReleaseFlashStatus
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSemProcess
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimerTask
</UL>

<P><STRONG><a name="[352]"></a>sysDeadLockMonitor_OFF</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys.o(i.sysDeadLockMonitor_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFile
</UL>

<P><STRONG><a name="[831]"></a>sysDeadLockMonitor_ON</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sys.o(i.sysDeadLockMonitor_ON))
<BR><BR>[Called By]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
</UL>

<P><STRONG><a name="[519]"></a>sysDeadLockMonitor_Reset</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys.o(i.sysDeadLockMonitor_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCmpWriteData
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiCmpBootWriteData
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanDiskAll
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[2a]"></a>sysDevInsertedUpgradeEvt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, sys.o(i.sysDevInsertedUpgradeEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4176 + Unknown Stack Size
<LI>Call Chain = sysDevInsertedUpgradeEvt &rArr; uiFlowEnterMenuMode &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearPKBuf
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareUpdateFlow
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowEnterMenuMode
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawISPStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>sysDrawTimeOnVideoClip</STRONG> (ARM, 16 bytes, Stack size 8 bytes, sys.o(i.sysDrawTimeOnVideoClip))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysDrawTimeOnVideoClip
</UL>
<BR>[Calls]<UL><LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiDrawTimeOnVideoClip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>sysFlashLight</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sys.o(i.sysFlashLight))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[4d8]"></a>sysForceWDTtoReboot</STRONG> (ARM, 36 bytes, Stack size 8 bytes, sys.o(i.sysForceWDTtoReboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = sysForceWDTtoReboot &rArr; spiReleaseFlashStatus &rArr; spiExit4ByteMode &rArr; spiSemProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReleaseFlashStatus
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSemProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfiuReset
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLifeTimePerSec
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIP
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawUpgradeFW
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_duplex_speed
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTimerWrong
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Decoding1Frame
</UL>

<P><STRONG><a name="[88a]"></a>sysGetBTCTimer</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sys.o(i.sysGetBTCTimer))
<BR><BR>[Called By]<UL><LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCTimer
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCSetting
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCAlarm
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRFStatus
</UL>

<P><STRONG><a name="[7db]"></a>sysGetBTCWakeStatus</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sys.o(i.sysGetBTCWakeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_WrapRx_Task_UnitX
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCTimer
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCSetting
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRFStatus
</UL>

<P><STRONG><a name="[391]"></a>sysGetBTCWakeTime</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sys.o(i.sysGetBTCWakeTime))
<BR><BR>[Called By]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBatterySchdule
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCTimer
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCSetting
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRFStatus
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[30]"></a>sysGetDiskFree</STRONG> (ARM, 48 bytes, Stack size 16 bytes, sys.o(i.sysGetDiskFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = sysGetDiskFree &rArr; dcfDriveInfo &rArr; FS_IoCtl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDriveInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_mass_scan_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[399]"></a>sysGetFrequency</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sys_api.o(i.sysGetFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[39e]"></a>sysGetRecordMode</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sys_api.o(i.sysGetRecordMode))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[818]"></a>sysGetStorageIndex</STRONG> (ARM, 104 bytes, Stack size 24 bytes, sys.o(i.sysGetStorageIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sysGetStorageIndex &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_OFF
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_IN
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_OFF
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_Device_Mount
</UL>

<P><STRONG><a name="[333]"></a>sysGetStorageInserted</STRONG> (ARM, 144 bytes, Stack size 8 bytes, sys.o(i.sysGetStorageInserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sysGetStorageInserted &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDelDir
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDelAll
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_IN
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStoragePriority
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_Device_Mount
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRunFormat
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcErase
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_WRretry
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_RDretry
</UL>

<P><STRONG><a name="[817]"></a>sysGetStoragePriority</STRONG> (ARM, 252 bytes, Stack size 40 bytes, sys.o(i.sysGetStoragePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = sysGetStoragePriority &rArr; sysGetStorageInserted &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageInserted
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSentMountSeq
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_Device_Mount
</UL>

<P><STRONG><a name="[332]"></a>sysGetStorageSel</STRONG> (ARM, 88 bytes, Stack size 8 bytes, sys.o(i.sysGetStorageSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sysGetStorageSel &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_protet
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawSDCardFail
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMemFull
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckSDCD
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcChangeMediaStat
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSDIcon
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlayIcon
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFillEmpty
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInsertSD
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_HDDRemove
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcErase
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_write
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_WRretry
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_SD_RDretry
</UL>

<P><STRONG><a name="[3a1]"></a>sysGetStorageStatus</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys.o(i.sysGetStorageStatus))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoOneCh
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerSubTaskCreate
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfWrite
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCreateFile
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlayback_Delete_File
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackListMode
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckRecState
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckRecPIR
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCRec
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiKeyParse
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoByChannel
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSdCardMode
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfUninit
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCardInfo
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawRecPerSec
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawProtect
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_recorded_filelist
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_P2P_Session
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[3b7]"></a>sysGet_AlarmEnable</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sys_api.o(i.sysGet_AlarmEnable))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[3bc]"></a>sysGet_AlarmVal</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sys_api.o(i.sysGet_AlarmVal))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[3b4]"></a>sysGet_Brightness</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_api.o(i.sysGet_Brightness))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[39c]"></a>sysGet_MotionEnable</STRONG> (ARM, 36 bytes, Stack size 0 bytes, sys_api.o(i.sysGet_MotionEnable))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[3ad]"></a>sysGet_Overwrite</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sys_api.o(i.sysGet_Overwrite))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[3b1]"></a>sysGet_RecMode</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_api.o(i.sysGet_RecMode))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[3b5]"></a>sysGet_Resoultion</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_api.o(i.sysGet_Resoultion))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[3ab]"></a>sysGet_Schedule</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys_api.o(i.sysGet_Schedule))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[3af]"></a>sysGet_Seccion</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sys_api.o(i.sysGet_Seccion))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[3b9]"></a>sysGet_TVOut</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sys_api.o(i.sysGet_TVOut))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[42d]"></a>sysIDU_enable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sys.o(i.sysIDU_enable))
<BR><BR>[Called By]<UL><LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuTreeInit
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_IDUInit
</UL>

<P><STRONG><a name="[6b7]"></a>sysIIS_enable</STRONG> (ARM, 40 bytes, Stack size 0 bytes, sys.o(i.sysIIS_enable))
<BR><BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisInit
</UL>

<P><STRONG><a name="[544]"></a>sysISU_enable</STRONG> (ARM, 28 bytes, Stack size 0 bytes, sys.o(i.sysISU_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetStartMovie
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VideoTask
</UL>

<P><STRONG><a name="[731]"></a>sysInit</STRONG> (ARM, 444 bytes, Stack size 24 bytes, sys.o(i.sysInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = sysInit &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSysInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[681]"></a>sysJPEG_disable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sys.o(i.sysJPEG_disable))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetStartMovie
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifReadFile
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphGetMenuData
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimeZoneGraph
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimeGraph
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawString
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledTime
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledTable
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSettingGraph
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawResolutionGraph
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawRECModeGraph
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListRecType
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListCam
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListCalendar
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMotionSensitivityGraph
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawLoadingGraph
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraOnOffGraph
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawBrightnessGraph
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduled
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawDateTime
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraAlarmOnOff
</UL>

<P><STRONG><a name="[680]"></a>sysJPEG_enable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sys.o(i.sysJPEG_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetStartMovie
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifReadFile
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphGetMenuData
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimeZoneGraph
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimeGraph
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawString
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledTime
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledTable
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSettingGraph
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawResolutionGraph
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawRECModeGraph
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListRecType
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListCam
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListCalendar
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMotionSensitivityGraph
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawLoadingGraph
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraOnOffGraph
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawBrightnessGraph
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIP
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduled
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawDateTime
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraAlarmOnOff
</UL>

<P><STRONG><a name="[428]"></a>sysJpegRst</STRONG> (ARM, 48 bytes, Stack size 0 bytes, sys.o(i.sysJpegRst))
<BR><BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegDecompressionYUV420
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegDecompression
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitJpegEncComplete
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIntHandler
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegInit
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Enc
</UL>

<P><STRONG><a name="[743]"></a>sysKeepSetStorageSel</STRONG> (ARM, 192 bytes, Stack size 40 bytes, sys.o(i.sysKeepSetStorageSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = sysKeepSetStorageSel &rArr; sysSetStorageStatus &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetStorageStatus
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_Device_Mount
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[19]"></a>sysLcdRot</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysLcdRot))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[829]"></a>sysLockMountSeq</STRONG> (ARM, 72 bytes, Stack size 8 bytes, sys.o(i.sysLockMountSeq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[371]"></a>sysMPEG_disable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sys.o(i.sysMPEG_disable))
<BR><BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Decode
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264DecodeLastFrame
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_DecompressOneFrame
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_CompressOneFrame
</UL>

<P><STRONG><a name="[370]"></a>sysMPEG_enable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sys.o(i.sysMPEG_enable))
<BR><BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Decode
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264DecodeLastFrame
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Dec_DecompressOneFrame
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelH264Enc_CompressOneFrame
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264Enc_CompressOneFrame
</UL>

<P><STRONG><a name="[18]"></a>sysMacro</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysMacro))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>sysP2PReadFile</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sys.o(i.sysP2PReadFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = sysP2PReadFile &rArr; sys_P2P_Readfile &rArr; asfSplitFile &rArr; dcfClose &rArr; FS_LB_Cache_Clean &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_P2P_Readfile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>sysPlaybackCalendar</STRONG> (ARM, 72 bytes, Stack size 16 bytes, sys.o(i.sysPlaybackCalendar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = sysPlaybackCalendar &rArr; dcfPlaybackCalendarInit &rArr; dcfScanDiskAll &rArr; dcfPlayDirSearch &rArr; FS_SearchWholeDir &rArr; FS__fat_SearchWholedir &rArr; FS__fat_dir_realsec &rArr;  FS__fat_find_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackCalendarInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>sysPlaybackDelete</STRONG> (ARM, 484 bytes, Stack size 40 bytes, sys.o(i.sysPlaybackDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 3888 + Unknown Stack Size
<LI>Call Chain = sysPlaybackDelete &rArr; osdDrawPlaybackArea &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDel
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlaybackArea
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlayIcon
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFillWait
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFillEmpty
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFileNum
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduSetVidBufAddr
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetCurDirFileCount
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearBuf
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>sysPlaybackDeleteAll</STRONG> (ARM, 632 bytes, Stack size 40 bytes, sys.o(i.sysPlaybackDeleteAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = sysPlaybackDeleteAll &rArr; dcfPlaybackDelAll &rArr; dcfOWDel &rArr; FS_Remove &rArr; FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFillWait
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFillEmpty
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDelAll
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetCurDirFileCount
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearBuf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>sysPlaybackDeleteDir</STRONG> (ARM, 620 bytes, Stack size 32 bytes, sys.o(i.sysPlaybackDeleteDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = sysPlaybackDeleteDir &rArr; dcfPlaybackDelDir &rArr; dcfOWDel &rArr; FS_Remove &rArr; FSFATFileDelete &rArr;  FSFATFileDelete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDelDir
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFillWait
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFillEmpty
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetCurDirFileCount
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearBuf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>sysPlaybackFormat</STRONG> (ARM, 256 bytes, Stack size 24 bytes, sys.o(i.sysPlaybackFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 4640 + Unknown Stack Size
<LI>Call Chain = sysPlaybackFormat &rArr; dcfPlaybackFormat &rArr; dcfDirInit &rArr; uiCheckTXUpgradeFileName &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectDeviceStatus
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFormat
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDriveInfo
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCacheClean
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>sysPlaybackIsp</STRONG> (ARM, 80 bytes, Stack size 8 bytes, sys.o(i.sysPlaybackIsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 3856 + Unknown Stack Size
<LI>Call Chain = sysPlaybackIsp &rArr; ispUpdate &rArr; osdDrawISPNow &rArr; osdDrawPreviewIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>sysPlaybackMoveBackward</STRONG> (ARM, 192 bytes, Stack size 16 bytes, sys.o(i.sysPlaybackMoveBackward))
<BR><BR>[Stack]<UL><LI>Max Depth = 3864 + Unknown Stack Size
<LI>Call Chain = sysPlaybackMoveBackward &rArr; osdDrawPlaybackArea &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFilePrev
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlaybackArea
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlayIcon
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFillEmpty
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFileNum
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduSetVidBufAddr
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetCurDirFileCount
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearBuf
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>sysPlaybackMoveForward</STRONG> (ARM, 192 bytes, Stack size 16 bytes, sys.o(i.sysPlaybackMoveForward))
<BR><BR>[Stack]<UL><LI>Max Depth = 3864 + Unknown Stack Size
<LI>Call Chain = sysPlaybackMoveForward &rArr; osdDrawPlaybackArea &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFileNext
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlaybackArea
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlayIcon
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFillEmpty
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFileNum
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduSetVidBufAddr
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetCurDirFileCount
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearBuf
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>sysPlaybackPan</STRONG> (ARM, 68 bytes, Stack size 8 bytes, sys.o(i.sysPlaybackPan))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sysPlaybackPan &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>sysPlaybackZoom</STRONG> (ARM, 92 bytes, Stack size 8 bytes, sys.o(i.sysPlaybackZoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sysPlaybackZoom &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>sysPowerOff</STRONG> (ARM, 92 bytes, Stack size 8 bytes, sys.o(i.sysPowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sysPowerOff &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckVideoRec
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectPowerOff
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[270]"></a>sysPowerOffDirect</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysPowerOffDirect))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A7196_WOR_enable_B1
</UL>

<P><STRONG><a name="[16]"></a>sysPowerOn</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sys.o(i.sysPowerOn))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>sysPreviewInit</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysPreviewInit))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>sysPreviewReset</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysPreviewReset))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>sysPreviewZoomInOut</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysPreviewZoomInOut))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[613]"></a>sysProjectDeviceStatus</STRONG> (ARM, 52 bytes, Stack size 8 bytes, sys_project.o(i.sysProjectDeviceStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = sysProjectDeviceStatus &rArr; osdDrawMemFull &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMemFull
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlayDel
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOWDel
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackFormat
</UL>

<P><STRONG><a name="[852]"></a>sysProjectExifWrite</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sys_project.o(i.sysProjectExifWrite))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackEXIFWrite
</UL>

<P><STRONG><a name="[82e]"></a>sysProjectPowerOff</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sys_project.o(i.sysProjectPowerOff))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPowerOff
</UL>

<P><STRONG><a name="[82f]"></a>sysProjectSDCD_IN</STRONG> (ARM, 660 bytes, Stack size 16 bytes, sys_project.o(i.sysProjectSDCD_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 4192 + Unknown Stack Size
<LI>Call Chain = sysProjectSDCD_IN &rArr; uiFlowEnterMenuMode &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearPKBuf
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOpen
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysForceWDTtoReboot
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Enable
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdatebootload
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdate
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDReset
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuEnterPreview
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMemFull
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowEnterMenuMode
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawISPStatus
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetDiskFree
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDeadLockMonitor_ON
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDeadLockMonitor_OFF
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_IN
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
</UL>

<P><STRONG><a name="[828]"></a>sysProjectSysInit</STRONG> (ARM, 36 bytes, Stack size 0 bytes, sys_project.o(i.sysProjectSysInit))
<BR><BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInit
</UL>

<P><STRONG><a name="[84c]"></a>sysProjectWhiteLight</STRONG> (ARM, 140 bytes, Stack size 4 bytes, sys_project.o(i.sysProjectWhiteLight))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sysProjectWhiteLight
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysWhiteLight
</UL>

<P><STRONG><a name="[82c]"></a>sysReadFile</STRONG> (ARM, 2304 bytes, Stack size 56 bytes, sys.o(i.sysReadFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = sysReadFile &rArr; asfReadFile &rArr; dcfClose &rArr; FS_LB_Cache_Clean &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInterruptEnable
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisSuspendTask
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5Reset
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfReadFile
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavreadfile
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdGetIconInfo
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGetMenuMode
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlayIcon
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMessage
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisStopPlay
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVOSDEnable
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduSetVBuff
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduOSDEnable
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduOSDDisable
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifReadFile
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IIS_WM8940_play
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idu_ClearBuf
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduDispWinSel
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS_WM8940_reset
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUIReadFile
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackMoveForward
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackMoveBackward
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDelete
</UL>

<P><STRONG><a name="[92f]"></a>sysResetBTCCheckLev</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sys.o(i.sysResetBTCCheckLev))
<BR><BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_DateTime
</UL>

<P><STRONG><a name="[1b]"></a>sysSDCD_IN</STRONG> (ARM, 1392 bytes, Stack size 40 bytes, sys.o(i.sysSDCD_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 4672 + Unknown Stack Size
<LI>Call Chain = sysSDCD_IN &rArr; dcfInit &rArr; dcfDirInit &rArr; uiCheckTXUpgradeFileName &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawSDCardFail
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetGoToFormat
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcUnInit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcErrorResultFilter
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcChangeMediaStat
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfUninit
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfInit
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFileTypeCount_Clean
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupUninit
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupInit
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfBackupDriveInfo
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCF_GetDeviceIndex
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetStorageStatus
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageInserted
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageIndex
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckSDCD
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_Device_Mount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>sysSDCD_OFF</STRONG> (ARM, 244 bytes, Stack size 32 bytes, sys.o(i.sysSDCD_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 3848 + Unknown Stack Size
<LI>Call Chain = sysSDCD_OFF &rArr; osdDrawPreviewIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcUnInit
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfUninit
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCF_GetDeviceIndex
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageIndex
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckSDCD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[7ef]"></a>sysSDCRst</STRONG> (ARM, 48 bytes, Stack size 0 bytes, sys.o(i.sysSDCRst))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMountSeq
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcInit
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMount
</UL>

<P><STRONG><a name="[4de]"></a>sysSD_Disable</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysSD_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRF
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteNet
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadData
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdatebootload
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdate
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
</UL>

<P><STRONG><a name="[4e3]"></a>sysSD_Enable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sys.o(i.sysSD_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRF
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteNet
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadData
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdatebootload
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload_Net
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdate
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareUpdateFlow
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetUpdateFlow
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
</UL>

<P><STRONG><a name="[4e2]"></a>sysSPI_Disable</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysSPI_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRF
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteNet
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadData
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetStartMovie
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
</UL>

<P><STRONG><a name="[4df]"></a>sysSPI_Enable</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysSPI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRF
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteNet
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadData
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdatebootload
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload_Net
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdate
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetUpdateFlow
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetStartMovie
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIP
</UL>

<P><STRONG><a name="[34]"></a>sysSensorFlip</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysSensorFlip))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[7f1]"></a>sysSentMountSeq</STRONG> (ARM, 188 bytes, Stack size 16 bytes, sys.o(i.sysSentMountSeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sysSentMountSeq &rArr; sysGetStoragePriority &rArr; sysGetStorageInserted &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetEvt
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSentKeyToUi
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStoragePriority
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_unmount_seq
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_mount_seq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcUnmountSeq
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcMountSeq
</UL>

<P><STRONG><a name="[83d]"></a>sysSentUiKeyTilOK</STRONG> (ARM, 36 bytes, Stack size 8 bytes, sys.o(i.sysSentUiKeyTilOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = sysSentUiKeyTilOK &rArr; uiSentKeyToUi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSentKeyToUi
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_scan
</UL>

<P><STRONG><a name="[392]"></a>sysSetBTCTimer</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sys.o(i.sysSetBTCTimer))
<BR><BR>[Called By]<UL><LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCTimer
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCSetting
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRFStatus
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[38e]"></a>sysSetBTCWakeStatus</STRONG> (ARM, 28 bytes, Stack size 0 bytes, sys.o(i.sysSetBTCWakeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[3a4]"></a>sysSetEvt</STRONG> (ARM, 184 bytes, Stack size 8 bytes, sys.o(i.sysSetEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sysSetEvt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCreateFile
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCloseFile
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCaptureVideoSubTask
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiReadVideoFile
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckUSBCD
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckSDCD
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDelAll
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUsbRemoved
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSentMountSeq
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Format
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCalendarFileLoad
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[6de]"></a>sysSetFWUpgradeStatus</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys.o(i.sysSetFWUpgradeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareUpdateFlow
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetUpdateFlow
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetPrepare
</UL>

<P><STRONG><a name="[39a]"></a>sysSetFrequency</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sys_api.o(i.sysSetFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[83e]"></a>sysSetOutputMode</STRONG> (ARM, 404 bytes, Stack size 16 bytes, sys.o(i.sysSetOutputMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 3888 + Unknown Stack Size
<LI>Call Chain = sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOutputRedirection
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduRst
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TV_init
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetisuPanel
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idu_ClearBuf
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIS_SwitchPanel2HDMI
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDU_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TVout_Format
</UL>

<P><STRONG><a name="[39f]"></a>sysSetRecordMode</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sys_api.o(i.sysSetRecordMode))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[61e]"></a>sysSetStorageStatus</STRONG> (ARM, 120 bytes, Stack size 8 bytes, sys.o(i.sysSetStorageStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sysSetStorageStatus &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFormat
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_IN
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysKeepSetStorageSel
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_Device_Mount
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcErase
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[28]"></a>sysSetUiKey</STRONG> (ARM, 32 bytes, Stack size 8 bytes, sys.o(i.sysSetUiKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = sysSetUiKey &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[3b6]"></a>sysSet_AlarmEnable</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sys_api.o(i.sysSet_AlarmEnable))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[3bb]"></a>sysSet_AlarmVal</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sys_api.o(i.sysSet_AlarmVal))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[3b3]"></a>sysSet_Brightness</STRONG> (ARM, 28 bytes, Stack size 0 bytes, sys_api.o(i.sysSet_Brightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = sysSet_Brightness &rArr; uiSetRfBrightnessRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfBrightnessRxToTx
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[96d]"></a>sysSet_DefaultValue</STRONG> (ARM, 288 bytes, Stack size 0 bytes, sys_api.o(i.sysSet_DefaultValue))
<BR><BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetDefaultSetting
</UL>

<P><STRONG><a name="[39d]"></a>sysSet_MotionEnable</STRONG> (ARM, 52 bytes, Stack size 8 bytes, sys_api.o(i.sysSet_MotionEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = sysSet_MotionEnable &rArr; uiSetRfMotionRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfMotionRxToTx
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[3ae]"></a>sysSet_Overwrite</STRONG> (ARM, 140 bytes, Stack size 12 bytes, sys_api.o(i.sysSet_Overwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysSet_Overwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[3b0]"></a>sysSet_Pair</STRONG> (ARM, 16 bytes, Stack size 8 bytes, sys_api.o(i.sysSet_Pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sysSet_Pair &rArr; rfiu_PAIR_Linit
</UL>
<BR>[Calls]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_PAIR_Linit
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[3b2]"></a>sysSet_RecMode</STRONG> (ARM, 44 bytes, Stack size 0 bytes, sys_api.o(i.sysSet_RecMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = sysSet_RecMode &rArr; uiSetRfMotionRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfMotionRxToTx
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[3ac]"></a>sysSet_Schedule</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sys_api.o(i.sysSet_Schedule))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[3b8]"></a>sysSet_TVOut</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sys_api.o(i.sysSet_TVOut))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[33]"></a>sysShowTimeOnOSD_VideoClip</STRONG> (ARM, 16 bytes, Stack size 8 bytes, sys.o(i.sysShowTimeOnOSD_VideoClip))
<BR><BR>[Stack]<UL><LI>Max Depth = 4152 + Unknown Stack Size
<LI>Call Chain = sysShowTimeOnOSD_VideoClip &rArr; osdDrawVideoTime &rArr; uiOsdVolumeControl &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawVideoTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>sysSnapshot_OnPreview</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysSnapshot_OnPreview))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[845]"></a>sysStartBatteryCam</STRONG> (ARM, 108 bytes, Stack size 16 bytes, sys.o(i.sysStartBatteryCam))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = sysStartBatteryCam &rArr; uiOsdDrawCameraBatteryLevel &rArr; H264_Decode_One_I_frame &rArr; H264DecodeLastFrame &rArr; Idu_ClearBuf &rArr; memset_hw_Word &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCameraBatteryLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckP2PMode
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawResolution
</UL>

<P><STRONG><a name="[36]"></a>sysTVInChannelChange_CaptureVideo</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysTVInChannelChange_CaptureVideo))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>sysTVInChannelChange_Preview</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysTVInChannelChange_Preview))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>sysTVPlaybackDelete</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sys.o(i.sysTVPlaybackDelete))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[12f]"></a>sysTask</STRONG> (ARM, 216 bytes, Stack size 8 bytes, sys.o(i.sysTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sysTask &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.sysInit)
</UL>
<P><STRONG><a name="[3c3]"></a>sysTurnOnTVDAC</STRONG> (ARM, 52 bytes, Stack size 0 bytes, sys.o(i.sysTurnOnTVDAC))
<BR><BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TV_init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDU_Init
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTV_init
</UL>

<P><STRONG><a name="[22]"></a>sysUIReadFile</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sys.o(i.sysUIReadFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = sysUIReadFile &rArr; sysReadFile &rArr; asfReadFile &rArr; dcfClose &rArr; FS_LB_Cache_Clean &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>sysUSBCD_IN</STRONG> (ARM, 928 bytes, Stack size 40 bytes, sys.o(i.sysUSBCD_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 4672 + Unknown Stack Size
<LI>Call Chain = sysUSBCD_IN &rArr; dcfInit &rArr; dcfDirInit &rArr; uiCheckTXUpgradeFileName &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_mass_scan_free_extend
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetGoToFormat
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfUninit
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfInit
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFileTypeCount_Clean
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCF_GetDeviceIndex
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetStorageStatus
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageInserted
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageIndex
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckUSBCD
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_Device_Mount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>sysUSBCD_OFF</STRONG> (ARM, 224 bytes, Stack size 24 bytes, sys.o(i.sysUSBCD_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = sysUSBCD_OFF &rArr; dcfUninit &rArr; dcfCacheClean &rArr; FS_LB_Cache_Clean &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfUninit
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCF_GetDeviceIndex
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageIndex
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckUSBCD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[97b]"></a>sysUSB_enable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sys.o(i.sysUSB_enable))
<BR><BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbHostInit
</UL>

<P><STRONG><a name="[847]"></a>sysUnlockMountSeq</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sys.o(i.sysUnlockMountSeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = sysUnlockMountSeq &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiKeyParse
</UL>

<P><STRONG><a name="[29]"></a>sysUpgradeFW</STRONG> (ARM, 256 bytes, Stack size 16 bytes, sys.o(i.sysUpgradeFW))
<BR><BR>[Stack]<UL><LI>Max Depth = 4080 + Unknown Stack Size
<LI>Call Chain = sysUpgradeFW &rArr; ispUpdateAllload &rArr; osdDrawISPNow &rArr; osdDrawPreviewIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdatebootload
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>sysUsbRemoved</STRONG> (ARM, 104 bytes, Stack size 16 bytes, sys.o(i.sysUsbRemoved))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sysUsbRemoved &rArr; sysSetEvt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetEvt
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbUninst
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>sysVOICE_REC</STRONG> (ARM, 184 bytes, Stack size 8 bytes, sys.o(i.sysVOICE_REC))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = sysVOICE_REC &rArr; wavRecVoice &rArr; wavRecVoiceFile &rArr; dcfCreateNextFile &rArr; dcfCreateNextDir &rArr; dcfCheckDirExist &rArr; FS_OpenDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerInterruptEnable
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoice
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;siuStop
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isuStop
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipuStop
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisCaptureVideoInit
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IIS_WM8940_rec
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>sysVideoCaptureRoot</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysVideoCaptureRoot))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>sysVideoCaptureStop</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysVideoCaptureStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sysVideoCaptureStop &rArr; MultiChannelSysCaptureVideoStopOneCh &rArr; RfRxVideoPackerSubTaskDestroy &rArr; MultiChannelAsfCaptureVideoStop &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoStopOneCh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>sysVideoZoomInOut</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys.o(i.sysVideoZoomInOut))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[548]"></a>sysWDT_disable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sys.o(i.sysWDT_disable))
<BR><BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_off
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_init
</UL>

<P><STRONG><a name="[549]"></a>sysWDT_enable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sys.o(i.sysWDT_enable))
<BR><BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_init
</UL>

<P><STRONG><a name="[1f]"></a>sysWhiteLight</STRONG> (ARM, 24 bytes, Stack size 8 bytes, sys.o(i.sysWhiteLight))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysWhiteLight &rArr; sysProjectWhiteLight
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectWhiteLight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>sys_Device_Mount</STRONG> (ARM, 208 bytes, Stack size 32 bytes, sys.o(i.sys_Device_Mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = sys_Device_Mount &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelCheckRecordChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[82a]"></a>sys_P2P_Readfile</STRONG> (ARM, 284 bytes, Stack size 24 bytes, sys.o(i.sys_P2P_Readfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = sys_P2P_Readfile &rArr; asfSplitFile &rArr; dcfClose &rArr; FS_LB_Cache_Clean &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSplitFile
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysP2PReadFile
</UL>

<P><STRONG><a name="[765]"></a>sys_arch_mbox_fetch</STRONG> (ARM, 168 bytes, Stack size 24 bytes, sys_arch.o(i.sys_arch_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = sys_arch_mbox_fetch &rArr; OS_MsgQDequeue &rArr; OSQPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQDequeue
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[768]"></a>sys_arch_mbox_tryfetch</STRONG> (ARM, 40 bytes, Stack size 8 bytes, sys_arch.o(i.sys_arch_mbox_tryfetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; OS_MsgQDequeue &rArr; OSQPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQDequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[70e]"></a>sys_arch_sem_wait</STRONG> (ARM, 160 bytes, Stack size 24 bytes, sys_arch.o(i.sys_arch_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = sys_arch_sem_wait &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[733]"></a>sys_backLowTask_init</STRONG> (ARM, 72 bytes, Stack size 8 bytes, sys.o(i.sys_backLowTask_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sys_backLowTask_init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[735]"></a>sys_back_Network_Task_init</STRONG> (ARM, 120 bytes, Stack size 8 bytes, sys.o(i.sys_back_Network_Task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sys_back_Network_Task_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[734]"></a>sys_back_RF_Task_init</STRONG> (ARM, 60 bytes, Stack size 8 bytes, sys.o(i.sys_back_RF_Task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sys_back_RF_Task_init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[732]"></a>sys_background_init</STRONG> (ARM, 136 bytes, Stack size 8 bytes, sys.o(i.sys_background_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sys_background_init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[701]"></a>sys_init</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys_arch.o(i.sys_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[5a3]"></a>sys_mbox_free</STRONG> (ARM, 60 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mbox_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = sys_mbox_free &rArr; OS_MsgQDelete &rArr; __OS_MemFree &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQWaitingSize
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[717]"></a>sys_mbox_new</STRONG> (ARM, 64 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = sys_mbox_new &rArr; OS_MsgQCreate &rArr; OS_MemAlloc &rArr; memset_hw &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</UL>

<P><STRONG><a name="[84e]"></a>sys_mbox_post</STRONG> (ARM, 48 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = sys_mbox_post &rArr; OS_MsgQEnqueue &rArr; OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickDelay
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[5a2]"></a>sys_mbox_trypost</STRONG> (ARM, 28 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mbox_trypost))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = sys_mbox_trypost &rArr; OS_MsgQEnqueueTry &rArr; OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQEnqueueTry
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>

<P><STRONG><a name="[6fe]"></a>sys_mutex_lock</STRONG> (ARM, 24 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = sys_mutex_lock &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
</UL>

<P><STRONG><a name="[755]"></a>sys_mutex_new</STRONG> (ARM, 36 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mutex_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = sys_mutex_new &rArr; OSSemCreate &rArr; OS_EventWaitListInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[6ff]"></a>sys_mutex_unlock</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = sys_mutex_unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
</UL>

<P><STRONG><a name="[712]"></a>sys_now</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sys_arch.o(i.sys_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sys_now &rArr; OS_GetSysTick &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
</UL>

<P><STRONG><a name="[722]"></a>sys_sem_free</STRONG> (ARM, 36 bytes, Stack size 16 bytes, sys_arch.o(i.sys_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = sys_sem_free &rArr; OSSemDel &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[721]"></a>sys_sem_new</STRONG> (ARM, 36 bytes, Stack size 8 bytes, sys_arch.o(i.sys_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = sys_sem_new &rArr; OSSemCreate &rArr; OS_EventWaitListInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[660]"></a>sys_sem_signal</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = sys_sem_signal &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_dns_found
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[84f]"></a>sys_thread_new</STRONG> (ARM, 72 bytes, Stack size 24 bytes, sys_arch.o(i.sys_thread_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = sys_thread_new &rArr; OS_TaskCreate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[5d9]"></a>sys_timeout_debug</STRONG> (ARM, 396 bytes, Stack size 32 bytes, timeouts.o(i.sys_timeout_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = sys_timeout_debug &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclic_timer
</UL>

<P><STRONG><a name="[708]"></a>sys_timeouts_init</STRONG> (ARM, 92 bytes, Stack size 16 bytes, timeouts.o(i.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout_debug &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[850]"></a>sys_timeouts_mbox_fetch</STRONG> (ARM, 232 bytes, Stack size 32 bytes, timeouts.o(i.sys_timeouts_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[851]"></a>sys_untimeout</STRONG> (ARM, 132 bytes, Stack size 8 bytes, timeouts.o(i.sys_untimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = sys_untimeout &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[32]"></a>sysbackEXIFWrite</STRONG> (ARM, 176 bytes, Stack size 16 bytes, sys.o(i.sysbackEXIFWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 3832 + Unknown Stack Size
<LI>Call Chain = sysbackEXIFWrite &rArr; osdDrawPreviewIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectExifWrite
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifWriteFile
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[31a]"></a>sysbackLowSetEvt</STRONG> (ARM, 200 bytes, Stack size 32 bytes, sys.o(i.sysbackLowSetEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = sysbackLowSetEvt &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_DeleteFileOrDir
</UL>

<P><STRONG><a name="[7d4]"></a>sysbackSetEvt</STRONG> (ARM, 160 bytes, Stack size 8 bytes, sys.o(i.sysbackSetEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sysbackSetEvt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Format
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_500ms_IntHandler
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1s_IntHandler
</UL>

<P><STRONG><a name="[134]"></a>sysbackTask</STRONG> (ARM, 196 bytes, Stack size 8 bytes, sys.o(i.sysbackTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sysbackTask &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.sys_background_init)
</UL>
<P><STRONG><a name="[131]"></a>sysback_Low_Task</STRONG> (ARM, 296 bytes, Stack size 8 bytes, sys.o(i.sysback_Low_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sysback_Low_Task &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.sys_backLowTask_init)
</UL>
<P><STRONG><a name="[532]"></a>sysback_Net_SetEvt</STRONG> (ARM, 168 bytes, Stack size 8 bytes, sys.o(i.sysback_Net_SetEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sysback_Net_SetEvt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetPrepare
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckMotion
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_UpgradeNet
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_DateTime
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmdParse
</UL>

<P><STRONG><a name="[132]"></a>sysback_Net_Task</STRONG> (ARM, 268 bytes, Stack size 8 bytes, sys.o(i.sysback_Net_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sysback_Net_Task &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.sys_back_Network_Task_init)
</UL>
<P><STRONG><a name="[4ef]"></a>sysback_RF_SetEvt</STRONG> (ARM, 156 bytes, Stack size 8 bytes, sys.o(i.sysback_RF_SetEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sysback_RF_SetEvt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_WrapRx_Task_UnitX
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncPSHeader_RF
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_TXCMD_Dec
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuH264Decode
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[133]"></a>sysback_RF_Task</STRONG> (ARM, 196 bytes, Stack size 8 bytes, sys.o(i.sysback_RF_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sysback_RF_Task &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.sys_back_RF_Task_init)
</UL>
<P><STRONG><a name="[853]"></a>tcp_abandon</STRONG> (ARM, 644 bytes, Stack size 56 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_null
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[713]"></a>tcp_abort</STRONG> (ARM, 8 bytes, Stack size 0 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[70f]"></a>tcp_accept</STRONG> (ARM, 24 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</UL>

<P><STRONG><a name="[856]"></a>tcp_alloc</STRONG> (ARM, 768 bytes, Stack size 24 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[59d]"></a>tcp_arg</STRONG> (ARM, 12 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[70b]"></a>tcp_bind</STRONG> (ARM, 516 bytes, Stack size 32 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout_debug &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[710]"></a>tcp_close</STRONG> (ARM, 32 bytes, Stack size 0 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</UL>

<P><STRONG><a name="[714]"></a>tcp_connect</STRONG> (ARM, 808 bytes, Stack size 40 bytes, tcp.o(i.tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[85f]"></a>tcp_debug_print</STRONG> (ARM, 16 bytes, Stack size 0 bytes, tcp.o(i.tcp_debug_print))
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[860]"></a>tcp_eff_send_mss_impl</STRONG> (ARM, 64 bytes, Stack size 8 bytes, tcp.o(i.tcp_eff_send_mss_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_eff_send_mss_impl &rArr; ip4_route
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[85c]"></a>tcp_enqueue_flags</STRONG> (ARM, 724 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[5a1]"></a>tcp_err</STRONG> (ARM, 152 bytes, Stack size 8 bytes, tcp.o(i.tcp_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tcp_err &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[861]"></a>tcp_fasttmr</STRONG> (ARM, 488 bytes, Stack size 40 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tcp_fasttmr &rArr; tcp_recved &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[706]"></a>tcp_init</STRONG> (ARM, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6d6]"></a>tcp_input</STRONG> (ARM, 3460 bytes, Stack size 80 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcbs_sane
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_print
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[868]"></a>tcp_keepalive</STRONG> (ARM, 200 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = tcp_keepalive &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[716]"></a>tcp_listen_with_backlog_and_err</STRONG> (ARM, 412 bytes, Stack size 24 bytes, tcp.o(i.tcp_listen_with_backlog_and_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = tcp_listen_with_backlog_and_err &rArr; tcp_timer_needed &rArr; sys_timeout_debug &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</UL>

<P><STRONG><a name="[76e]"></a>tcp_netif_ip_addr_changed</STRONG> (ARM, 248 bytes, Stack size 24 bytes, tcp.o(i.tcp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[718]"></a>tcp_new_ip_type</STRONG> (ARM, 8 bytes, Stack size 0 bytes, tcp.o(i.tcp_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</UL>

<P><STRONG><a name="[864]"></a>tcp_next_iss</STRONG> (ARM, 24 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[71d]"></a>tcp_output</STRONG> (ARM, 2180 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo_partial
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[85a]"></a>tcp_pcb_purge</STRONG> (ARM, 272 bytes, Stack size 24 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_purge &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[854]"></a>tcp_pcb_remove</STRONG> (ARM, 480 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcbs_sane
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[867]"></a>tcp_pcbs_sane</STRONG> (ARM, 456 bytes, Stack size 8 bytes, tcp.o(i.tcp_pcbs_sane))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tcp_pcbs_sane &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[5a0]"></a>tcp_poll</STRONG> (ARM, 144 bytes, Stack size 8 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tcp_poll &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[862]"></a>tcp_process_refused_data</STRONG> (ARM, 232 bytes, Stack size 16 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = tcp_process_refused_data &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[59e]"></a>tcp_recv</STRONG> (ARM, 156 bytes, Stack size 8 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tcp_recv &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[135]"></a>tcp_recv_null</STRONG> (ARM, 88 bytes, Stack size 8 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tcp_recv_null &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[719]"></a>tcp_recved</STRONG> (ARM, 376 bytes, Stack size 16 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
</UL>

<P><STRONG><a name="[86c]"></a>tcp_rexmit</STRONG> (ARM, 200 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[86d]"></a>tcp_rexmit_fast</STRONG> (ARM, 292 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_rexmit_fast
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[86a]"></a>tcp_rexmit_rto</STRONG> (ARM, 92 bytes, Stack size 0 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[855]"></a>tcp_rst</STRONG> (ARM, 512 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = tcp_rst &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[86f]"></a>tcp_seg_copy</STRONG> (ARM, 84 bytes, Stack size 16 bytes, tcp.o(i.tcp_seg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[85e]"></a>tcp_seg_free</STRONG> (ARM, 56 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[7ac]"></a>tcp_segs_free</STRONG> (ARM, 72 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = tcp_segs_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[863]"></a>tcp_send_empty_ack</STRONG> (ARM, 232 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[859]"></a>tcp_send_fin</STRONG> (ARM, 140 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[59f]"></a>tcp_sent</STRONG> (ARM, 156 bytes, Stack size 8 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tcp_sent &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[711]"></a>tcp_shutdown</STRONG> (ARM, 148 bytes, Stack size 8 bytes, tcp.o(i.tcp_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[870]"></a>tcp_slowtmr</STRONG> (ARM, 1812 bytes, Stack size 48 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = tcp_slowtmr &rArr; tcp_rst &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[857]"></a>tcp_timer_needed</STRONG> (ARM, 100 bytes, Stack size 0 bytes, timeouts.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout_debug &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[176]"></a>tcp_tmr</STRONG> (ARM, 40 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_recved &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[85b]"></a>tcp_trigger_input_pcb_close</STRONG> (ARM, 20 bytes, Stack size 0 bytes, tcp_in.o(i.tcp_trigger_input_pcb_close))
<BR><BR>[Called By]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[86e]"></a>tcp_update_rcv_ann_wnd</STRONG> (ARM, 164 bytes, Stack size 16 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[71c]"></a>tcp_write</STRONG> (ARM, 4548 bytes, Stack size 160 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = tcp_write &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_chksum_copy
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>

<P><STRONG><a name="[871]"></a>tcp_zero_window_probe</STRONG> (ARM, 448 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = tcp_zero_window_probe &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[769]"></a>tcpip_callback_with_block</STRONG> (ARM, 164 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_callback_with_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</UL>

<P><STRONG><a name="[508]"></a>tcpip_init</STRONG> (ARM, 312 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = tcpip_init &rArr; lwip_init &rArr; netif_init &rArr; dhcp_network_changed &rArr; dhcp_discover &rArr; autoip_start &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_LwIPEntry
</UL>

<P><STRONG><a name="[aa]"></a>tcpip_init_done</STRONG> (ARM, 224 bytes, Stack size 32 bytes, lwipentry.o(i.tcpip_init_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = tcpip_init_done &rArr; netif_add &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6_arm
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwipentry.o(i.T_LwIPEntry)
</UL>
<P><STRONG><a name="[873]"></a>tcpip_inpkt</STRONG> (ARM, 232 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_inpkt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[11a]"></a>tcpip_input</STRONG> (ARM, 244 bytes, Stack size 32 bytes, tcpip.o(i.tcpip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = tcpip_input &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwipentry.o(i.tcpip_init_done)
<LI> netif.o(i.netif_init)
</UL>
<P><STRONG><a name="[766]"></a>tcpip_send_msg_wait_sem</STRONG> (ARM, 48 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_send_msg_wait_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[3fc]"></a>time</STRONG> (ARM, 48 bytes, Stack size 8 bytes, tutk_platform.o(i.time))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Initialize2
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLocalNetworkInfo
</UL>

<P><STRONG><a name="[b1]"></a>timer2_IntHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, timer_project.o(i.timer2_IntHandler))
<BR>[Address Reference Count : 1]<UL><LI> timer_project.o(i.TimerProjectTimerInit)
</UL>
<P><STRONG><a name="[b2]"></a>timer3_IntHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, timer_project.o(i.timer3_IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = timer3_IntHandler &rArr; PWM_ISR_handler &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ISR_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_project.o(i.TimerProjectTimerInit)
</UL>
<P><STRONG><a name="[b3]"></a>timer4_IntHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, timer_project.o(i.timer4_IntHandler))
<BR>[Address Reference Count : 1]<UL><LI> timer_project.o(i.TimerProjectTimerInit)
</UL>
<P><STRONG><a name="[874]"></a>timerCountPause</STRONG> (ARM, 4 bytes, Stack size 0 bytes, timer.o(i.timerCountPause))
<BR><BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerCountPause
</UL>
<BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
</UL>

<P><STRONG><a name="[518]"></a>timerCountRead</STRONG> (ARM, 4 bytes, Stack size 0 bytes, timer.o(i.timerCountRead))
<BR><BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerCountRead
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_WrapRx_Task_UnitX
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RxMpeg4DecTask_UnitX
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_Rx_Task_UnitX
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuPutTimeCheck2ACK
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuPutPacketMap2ACK
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuPutFwUpdPkt2ACK
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuProcessCmdPkt
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuIntHandler (via Veneer)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisRecDMA_ISR
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
</UL>

<P><STRONG><a name="[730]"></a>timerInit</STRONG> (ARM, 128 bytes, Stack size 16 bytes, timer.o(i.timerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = timerInit &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerOpen
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerProjectTimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[836]"></a>timerInterruptEnable</STRONG> (ARM, 4 bytes, Stack size 0 bytes, timer.o(i.timerInterruptEnable))
<BR><BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerInterruptEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysVOICE_REC
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
</UL>

<P><STRONG><a name="[b4]"></a>timerPWM5_IntHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, timer_project.o(i.timerPWM5_IntHandler))
<BR>[Address Reference Count : 1]<UL><LI> timer_project.o(i.TimerProjectTimerInit)
</UL>
<P><STRONG><a name="[4f5]"></a>timer_100ms_IntHandler</STRONG> (ARM, 100 bytes, Stack size 16 bytes, timer_project.o(i.timer_100ms_IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = timer_100ms_IntHandler &rArr; i2c_Touch_getPosition &rArr; i2cWrite16addr_Byte &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reset_Count
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckTouchKey
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Touch_getPosition
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimerTask
</UL>

<P><STRONG><a name="[4f9]"></a>timer_1s_IntHandler</STRONG> (ARM, 472 bytes, Stack size 24 bytes, timer_project.o(i.timer_1s_IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = timer_1s_IntHandler &rArr; RTC_Get_GMT_Time &rArr; Set_SD2068_RTC &rArr; i2cWrite_SD2068 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackSetEvt
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcBatteryCheck
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Second_To_Time
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_GMT_Time
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTime_Gmt_To_Local
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimerTask
</UL>

<P><STRONG><a name="[4f6]"></a>timer_200ms_IntHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, timer_project.o(i.timer_200ms_IntHandler))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimerTask
</UL>

<P><STRONG><a name="[4f1]"></a>timer_25ms_IntHandler</STRONG> (ARM, 20 bytes, Stack size 0 bytes, timer_project.o(i.timer_25ms_IntHandler))
<BR><BR>[Calls]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcKeyPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimerTask
</UL>

<P><STRONG><a name="[4f7]"></a>timer_500ms_IntHandler</STRONG> (ARM, 28 bytes, Stack size 0 bytes, timer_project.o(i.timer_500ms_IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = timer_500ms_IntHandler &rArr; sysbackSetEvt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackSetEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimerTask
</UL>

<P><STRONG><a name="[4f4]"></a>timer_50ms_IntHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, timer_project.o(i.timer_50ms_IntHandler))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimerTask
</UL>

<P><STRONG><a name="[b5]"></a>timer_zeropointfivems_IntHandler</STRONG> (ARM, 212 bytes, Stack size 24 bytes, timer_project.o(i.timer_zeropointfivems_IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = timer_zeropointfivems_IntHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerInterruptEnable
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerCountPause
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.Timer_IR_TX)
</UL>
<P><STRONG><a name="[432]"></a>tlistAppend</STRONG> (ARM, 116 bytes, Stack size 16 bytes, tlink_list.o(i.tlistAppend))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tlistAppend &rArr; monopool_alloc &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxConnMgr_createNewConnection
</UL>

<P><STRONG><a name="[505]"></a>tlistDestroy</STRONG> (ARM, 84 bytes, Stack size 16 bytes, tlink_list.o(i.tlistDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tlistDestroy &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnManager_destroy
</UL>

<P><STRONG><a name="[504]"></a>tlistForeach</STRONG> (ARM, 80 bytes, Stack size 24 bytes, tlink_list.o(i.tlistForeach))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tlistForeach
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnManager_destroy
</UL>

<P><STRONG><a name="[434]"></a>tlistHead</STRONG> (ARM, 12 bytes, Stack size 0 bytes, tlink_list.o(i.tlistHead))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionHandlerThread
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxConnMgr_destroyConnection
</UL>

<P><STRONG><a name="[42f]"></a>tlistLength</STRONG> (ARM, 12 bytes, Stack size 0 bytes, tlink_list.o(i.tlistLength))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnManager_destroy
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxConnMgr_createNewConnection
</UL>

<P><STRONG><a name="[503]"></a>tlistNew</STRONG> (ARM, 40 bytes, Stack size 8 bytes, tlink_list.o(i.tlistNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tlistNew &rArr; monopool_alloc &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnManager_create
</UL>

<P><STRONG><a name="[5d5]"></a>tlistRemoveNode</STRONG> (ARM, 104 bytes, Stack size 8 bytes, tlink_list.o(i.tlistRemoveNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = tlistRemoveNode &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionHandlerThread
</UL>

<P><STRONG><a name="[437]"></a>tos_convert_error</STRONG> (ARM, 1880 bytes, Stack size 0 bytes, terror.o(i.tos_convert_error))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_setup
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_sendMessageTo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_sendMessage
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_changeDistance
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection_new
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_connectedReadyToSend
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_acceptTCPconnection
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnManager_create
</UL>

<P><STRONG><a name="[6ce]"></a>ttk_host_get_sockaddr</STRONG> (ARM, 280 bytes, Stack size 72 bytes, ttk_util.o(i.ttk_host_get_sockaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ttk_host_get_sockaddr &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_sockaddr_to_ip_addr
</UL>

<P><STRONG><a name="[440]"></a>ttk_lookup_hostname</STRONG> (ARM, 184 bytes, Stack size 48 bytes, ttk_util.o(i.ttk_lookup_hostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ttk_lookup_hostname &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_setup
</UL>

<P><STRONG><a name="[6c9]"></a>ttk_mem_alloc</STRONG> (ARM, 36 bytes, Stack size 16 bytes, ttk_mem.o(i.ttk_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ttk_mem_alloc &rArr; monopool_alloc &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_lookup_host
</UL>

<P><STRONG><a name="[6c6]"></a>ttk_mem_free</STRONG> (ARM, 28 bytes, Stack size 8 bytes, ttk_mem.o(i.ttk_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ttk_mem_free &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_lookup_host
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_free_host_list
</UL>

<P><STRONG><a name="[6ca]"></a>ttk_mutex_init</STRONG> (ARM, 56 bytes, Stack size 16 bytes, ttk_mutex.o(i.ttk_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ttk_mutex_init &rArr; OS_MutexInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexInit
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_lookup_host
</UL>

<P><STRONG><a name="[6c5]"></a>ttk_mutex_lock</STRONG> (ARM, 200 bytes, Stack size 24 bytes, ttk_mutex.o(i.ttk_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ttk_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexLock
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_lookup_host
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_free_host_list
</UL>

<P><STRONG><a name="[6c7]"></a>ttk_mutex_unlock</STRONG> (ARM, 116 bytes, Stack size 8 bytes, ttk_mutex.o(i.ttk_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ttk_mutex_unlock &rArr; OS_MutexUnLock &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexUnLock
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_lookup_host
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_free_host_list
</UL>

<P><STRONG><a name="[878]"></a>tutk_SockMng_Purge</STRONG> (ARM, 136 bytes, Stack size 16 bytes, tutk_taskmng.o(i.tutk_SockMng_Purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tutk_SockMng_Purge &rArr; tutk_bst_walk_purge &rArr;  tutk_bst_walk_purge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_walk_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_Run
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockMng_Remove
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_DeInit
</UL>

<P><STRONG><a name="[33d]"></a>tutk_SockMng_Remove</STRONG> (ARM, 344 bytes, Stack size 80 bytes, tutk_taskmng.o(i.tutk_SockMng_Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = tutk_SockMng_Remove &rArr; TCP_PurgeFd &rArr;  TCP_RunAction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_PurgeFd
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_search
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockMng_Purge
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fd_RootAction
</UL>

<P><STRONG><a name="[3ca]"></a>tutk_SockTaskMng_DeInit</STRONG> (ARM, 140 bytes, Stack size 16 bytes, tutk_taskmng.o(i.tutk_SockTaskMng_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tutk_SockTaskMng_DeInit &rArr; TCP_RunAction &rArr; TCP_PurgeFd &rArr;  TCP_RunAction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RunAction
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RunAction
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_WaitForTaskExit
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_walkpre
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockMng_Purge
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_DeInitialize
</UL>

<P><STRONG><a name="[400]"></a>tutk_SockTaskMng_Init</STRONG> (ARM, 76 bytes, Stack size 16 bytes, tutk_taskmng.o(i.tutk_SockTaskMng_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tutk_SockTaskMng_Init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Initialize2
</UL>

<P><STRONG><a name="[144]"></a>tutk_SockTaskMng_Run</STRONG> (ARM, 800 bytes, Stack size 56 bytes, tutk_taskmng.o(i.tutk_SockTaskMng_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = tutk_SockTaskMng_Run &rArr; lwip_select &rArr; lwip_selscan &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexUnLock
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexLock
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RunAction
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RunAction
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_walkpre
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockMng_Purge
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_set_thread_name
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tutk_taskmng.o(i.tutk_SockTaskMng_Init)
</UL>
<P><STRONG><a name="[28c]"></a>tutk_TaskMng_Create</STRONG> (ARM, 468 bytes, Stack size 88 bytes, tutk_taskmng.o(i.tutk_TaskMng_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = tutk_TaskMng_Create &rArr; tutk_TaskMng_Purge &rArr; tutk_bst_walk_purge &rArr;  tutk_bst_walk_purge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RunAction
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_search
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Purge
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Initialize2
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateVPGServerListDailyRoutine
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateUdpServerRelayRequestRStatus
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_callback_Try_Port
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceLoginCB
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSendLANSearch
</UL>

<P><STRONG><a name="[3c7]"></a>tutk_TaskMng_Delete</STRONG> (ARM, 92 bytes, Stack size 16 bytes, tutk_taskmng.o(i.tutk_TaskMng_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tutk_TaskMng_Delete &rArr; tutk_TaskMng_Purge &rArr; tutk_bst_walk_purge &rArr;  tutk_bst_walk_purge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Purge
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_DeInitialize
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStop
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStop
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avIOTCSesstionCloseCB
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_callback_Try_Port
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLanSearchTaskCB
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceLoginCB
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dailyUpdateSendQueryTask
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskDeleteNode
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskCleanNodesWithType
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskCleanAllNodes
</UL>

<P><STRONG><a name="[50c]"></a>tutk_TaskMng_Purge</STRONG> (ARM, 148 bytes, Stack size 16 bytes, tutk_taskmng.o(i.tutk_TaskMng_Purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tutk_TaskMng_Purge &rArr; tutk_bst_walk_purge &rArr;  tutk_bst_walk_purge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RunAction
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_walk_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RunAction
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RootAction
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Delete
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Create
</UL>

<P><STRONG><a name="[73f]"></a>tutk_av_sample</STRONG> (ARM, 496 bytes, Stack size 16 bytes, tutk_av_sample.o(i.tutk_av_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tutk_av_sample &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_task_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[57f]"></a>tutk_block_Alloc</STRONG> (ARM, 108 bytes, Stack size 16 bytes, block_fifo.o(i.tutk_block_Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tutk_block_Alloc &rArr; monopool_alloc &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendFrameData
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckResendRequest
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVCtrl
</UL>

<P><STRONG><a name="[5cc]"></a>tutk_block_FifoCount</STRONG> (ARM, 52 bytes, Stack size 16 bytes, block_fifo.o(i.tutk_block_FifoCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoCount &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
</UL>

<P><STRONG><a name="[584]"></a>tutk_block_FifoCountByFrmNo</STRONG> (ARM, 144 bytes, Stack size 16 bytes, block_fifo.o(i.tutk_block_FifoCountByFrmNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoCountByFrmNo &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeSearch
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckResendRequest
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
</UL>

<P><STRONG><a name="[583]"></a>tutk_block_FifoEmpty</STRONG> (ARM, 100 bytes, Stack size 16 bytes, block_fifo.o(i.tutk_block_FifoEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoEmpty &rArr; _BinaryTreeEmpty &rArr;  _BinaryTreeEmpty (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeEmpty
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServResetBuffer
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCleanVideoPreBuffer
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCleanAudioPreBuffer
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doIOTypeInner
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVCtrl
</UL>

<P><STRONG><a name="[57d]"></a>tutk_block_FifoExist</STRONG> (ARM, 184 bytes, Stack size 16 bytes, block_fifo.o(i.tutk_block_FifoExist))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoExist &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeSearch
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVCtrl
</UL>

<P><STRONG><a name="[5ce]"></a>tutk_block_FifoGet</STRONG> (ARM, 268 bytes, Stack size 24 bytes, block_fifo.o(i.tutk_block_FifoGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoGet &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeSearchMin
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeGetPos
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvIOCtrl
</UL>

<P><STRONG><a name="[279]"></a>tutk_block_FifoGetByFrmNo</STRONG> (ARM, 384 bytes, Stack size 32 bytes, block_fifo.o(i.tutk_block_FifoGetByFrmNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoGetByFrmNo &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeGetFrm
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckResendRequest
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVInfo_ResendReq
</UL>

<P><STRONG><a name="[590]"></a>tutk_block_FifoGetByFrmNoPos</STRONG> (ARM, 324 bytes, Stack size 40 bytes, block_fifo.o(i.tutk_block_FifoGetByFrmNoPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoGetByFrmNoPos &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeGetPos
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
</UL>

<P><STRONG><a name="[58f]"></a>tutk_block_FifoGetInfoByFrmNo</STRONG> (ARM, 164 bytes, Stack size 24 bytes, block_fifo.o(i.tutk_block_FifoGetInfoByFrmNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoGetInfoByFrmNo &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeSearch
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
</UL>

<P><STRONG><a name="[585]"></a>tutk_block_FifoGetLostPos</STRONG> (ARM, 596 bytes, Stack size 2104 bytes, block_fifo.o(i.tutk_block_FifoGetLostPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 2272 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoGetLostPos &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeSearch
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckResendRequest
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
</UL>

<P><STRONG><a name="[276]"></a>tutk_block_FifoGetMaxFrmNo</STRONG> (ARM, 144 bytes, Stack size 16 bytes, block_fifo.o(i.tutk_block_FifoGetMaxFrmNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoGetMaxFrmNo &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeSearchMax
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVInfo_ResendReq
</UL>

<P><STRONG><a name="[277]"></a>tutk_block_FifoGetMinFrmNo</STRONG> (ARM, 144 bytes, Stack size 16 bytes, block_fifo.o(i.tutk_block_FifoGetMinFrmNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoGetMinFrmNo &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeSearchMin
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVInfo_ResendReq
</UL>

<P><STRONG><a name="[596]"></a>tutk_block_FifoNew</STRONG> (ARM, 136 bytes, Stack size 16 bytes, block_fifo.o(i.tutk_block_FifoNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoNew &rArr; monopool_alloc &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initAVInfo
</UL>

<P><STRONG><a name="[580]"></a>tutk_block_FifoPut</STRONG> (ARM, 180 bytes, Stack size 24 bytes, block_fifo.o(i.tutk_block_FifoPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoPut &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeInsertBlock
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendFrameData
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVCtrl
</UL>

<P><STRONG><a name="[27b]"></a>tutk_block_FifoPutByPassSameBlock</STRONG> (ARM, 288 bytes, Stack size 24 bytes, block_fifo.o(i.tutk_block_FifoPutByPassSameBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoPutByPassSameBlock &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeInsertBlock
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckResendRequest
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVInfo_ResendReq
</UL>

<P><STRONG><a name="[592]"></a>tutk_block_FifoPutFrmNo</STRONG> (ARM, 276 bytes, Stack size 24 bytes, block_fifo.o(i.tutk_block_FifoPutFrmNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoPutFrmNo &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeInsertFrame
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
</UL>

<P><STRONG><a name="[595]"></a>tutk_block_FifoRelease</STRONG> (ARM, 124 bytes, Stack size 16 bytes, block_fifo.o(i.tutk_block_FifoRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoRelease &rArr; _BinaryTreeEmpty &rArr;  _BinaryTreeEmpty (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexDelete
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeEmpty
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unInitAVInfo
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initAVInfo
</UL>

<P><STRONG><a name="[582]"></a>tutk_block_FifoRemoveAllFramesBiggerThanFrmNo</STRONG> (ARM, 460 bytes, Stack size 32 bytes, block_fifo.o(i.tutk_block_FifoRemoveAllFramesBiggerThanFrmNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoRemoveAllFramesBiggerThanFrmNo &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeSearchMax
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeGetFrm
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVCtrl
</UL>

<P><STRONG><a name="[5cd]"></a>tutk_block_FifoRemoveAllFramesLessThanFrmNo</STRONG> (ARM, 452 bytes, Stack size 32 bytes, block_fifo.o(i.tutk_block_FifoRemoveAllFramesLessThanFrmNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoRemoveAllFramesLessThanFrmNo &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeSearchMin
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeGetFrm
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
</UL>

<P><STRONG><a name="[593]"></a>tutk_block_FifoRemoveFrameByFrmNo</STRONG> (ARM, 372 bytes, Stack size 32 bytes, block_fifo.o(i.tutk_block_FifoRemoveFrameByFrmNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoRemoveFrameByFrmNo &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeGetFrm
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendFrameData
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
</UL>

<P><STRONG><a name="[586]"></a>tutk_block_FifoSeekByFrmNoPos</STRONG> (ARM, 160 bytes, Stack size 24 bytes, block_fifo.o(i.tutk_block_FifoSeekByFrmNoPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoSeekByFrmNoPos &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BinaryTreeSearch
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendFrameData
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
</UL>

<P><STRONG><a name="[57e]"></a>tutk_block_FifoSize</STRONG> (ARM, 52 bytes, Stack size 16 bytes, block_fifo.o(i.tutk_block_FifoSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tutk_block_FifoSize &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendFrameData
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avResendBufUsageRate
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCaluDoStatistics
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCalu
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVCtrl
</UL>

<P><STRONG><a name="[27a]"></a>tutk_block_Release</STRONG> (ARM, 12 bytes, Stack size 0 bytes, block_fifo.o(i.tutk_block_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tutk_block_Release &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendFrameData
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvIOCtrl
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCleanVideoPreBuffer
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCleanAudioPreBuffer
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckResendRequest
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unInitAVInfo
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVInfo_ResendReq
</UL>

<P><STRONG><a name="[87d]"></a>tutk_bst_delete</STRONG> (ARM, 128 bytes, Stack size 0 bytes, tutk_taskmng.o(i.tutk_bst_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = tutk_bst_delete &rArr;  tutk_bst_delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_delete
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_walk_purge
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_delete
</UL>

<P><STRONG><a name="[501]"></a>tutk_bst_search</STRONG> (ARM, 88 bytes, Stack size 16 bytes, tutk_taskmng.o(i.tutk_bst_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tutk_bst_search
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RootAction
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockMng_Remove
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Create
</UL>

<P><STRONG><a name="[4fe]"></a>tutk_bst_walk_purge</STRONG> (ARM, 284 bytes, Stack size 16 bytes, tutk_taskmng.o(i.tutk_bst_walk_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = tutk_bst_walk_purge &rArr;  tutk_bst_walk_purge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_walk_purge
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_delete
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_PurgeFd
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_walk_purge
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Purge
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockMng_Purge
</UL>

<P><STRONG><a name="[502]"></a>tutk_bst_walkpre</STRONG> (ARM, 116 bytes, Stack size 24 bytes, tutk_taskmng.o(i.tutk_bst_walkpre))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = tutk_bst_walkpre &rArr;  tutk_bst_walkpre (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_walkpre
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RunAction
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RunAction
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_walkpre
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_Run
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_DeInit
</UL>

<P><STRONG><a name="[879]"></a>tutk_platform_WaitForTaskExit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, tutk_platform.o(i.tutk_platform_WaitForTaskExit))
<BR><BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_DeInit
</UL>

<P><STRONG><a name="[6cd]"></a>tutk_platform_inet_ntop</STRONG> (ARM, 20 bytes, Stack size 0 bytes, tutk_platform.o(i.tutk_platform_inet_ntop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tutk_platform_inet_ntop &rArr; ipaddr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_sockaddr_to_ip_string
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_sockaddr_to_ip_addr
</UL>

<P><STRONG><a name="[3db]"></a>tutk_platform_rand</STRONG> (ARM, 4 bytes, Stack size 0 bytes, tutk_platform.o(i.tutk_platform_rand))
<BR><BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Initialize2
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_callback_Try_Port
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLocalNetworkInfo
</UL>

<P><STRONG><a name="[5d4]"></a>tutk_platform_set_thread_name</STRONG> (ARM, 4 bytes, Stack size 0 bytes, tutk_platform.o(i.tutk_platform_set_thread_name))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectionHandlerThread
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_Run
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_thread_resolve_master_name_new
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_resolve_master_all
</UL>

<P><STRONG><a name="[40d]"></a>tutk_platform_snprintf</STRONG> (ARM, 28 bytes, Stack size 24 bytes, tutk_platform.o(i.tutk_platform_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tutk_platform_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_host_get_sockaddr
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_put_content
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_get_content
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check_Ex
</UL>

<P><STRONG><a name="[3fb]"></a>tutk_platform_srand</STRONG> (ARM, 4 bytes, Stack size 0 bytes, tutk_platform.o(i.tutk_platform_srand))
<BR><BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Initialize2
</UL>

<P><STRONG><a name="[87a]"></a>tutk_task_init</STRONG> (ARM, 68 bytes, Stack size 8 bytes, tutk_iotc_sample.o(i.tutk_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tutk_task_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_av_sample
</UL>

<P><STRONG><a name="[f1]"></a>uart2IntHandler</STRONG> (ARM, 36 bytes, Stack size 0 bytes, uart.o(i.uart2IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = uart2IntHandler &rArr; uartBufRcv &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartBufRcv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[f2]"></a>uart3IntHandler</STRONG> (ARM, 36 bytes, Stack size 0 bytes, uart.o(i.uart3IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = uart3IntHandler &rArr; uartBufRcv &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartBufRcv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[87f]"></a>uartBufRcv</STRONG> (ARM, 236 bytes, Stack size 32 bytes, uart.o(i.uartBufRcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = uartBufRcv &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIntHandler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3IntHandler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2IntHandler
</UL>

<P><STRONG><a name="[73e]"></a>uartCmdInit</STRONG> (ARM, 192 bytes, Stack size 32 bytes, uart.o(i.uartCmdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = uartCmdInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[14a]"></a>uartCmdTask</STRONG> (ARM, 500 bytes, Stack size 56 bytes, uart.o(i.uartCmdTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 4872 + Unknown Stack Size
<LI>Call Chain = uartCmdTask &rArr; UartCmdParse &rArr; ntpdate &rArr; uiSetRfTimeRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmdParse
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.uartCmdInit)
</UL>
<P><STRONG><a name="[f0]"></a>uartIntHandler</STRONG> (ARM, 36 bytes, Stack size 0 bytes, uart.o(i.uartIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = uartIntHandler &rArr; uartBufRcv &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartBufRcv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[63f]"></a>udp_bind</STRONG> (ARM, 332 bytes, Stack size 24 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[640]"></a>udp_connect</STRONG> (ARM, 148 bytes, Stack size 16 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = udp_connect &rArr; udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[715]"></a>udp_disconnect</STRONG> (ARM, 28 bytes, Stack size 0 bytes, udp.o(i.udp_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
</UL>

<P><STRONG><a name="[705]"></a>udp_init</STRONG> (ARM, 4 bytes, Stack size 0 bytes, udp.o(i.udp_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6d5]"></a>udp_input</STRONG> (ARM, 760 bytes, Stack size 48 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[76f]"></a>udp_netif_ip_addr_changed</STRONG> (ARM, 84 bytes, Stack size 0 bytes, udp.o(i.udp_netif_ip_addr_changed))
<BR><BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[63e]"></a>udp_new</STRONG> (ARM, 84 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[649]"></a>udp_new_ip_type</STRONG> (ARM, 84 bytes, Stack size 8 bytes, udp.o(i.udp_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = udp_new_ip_type &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</UL>

<P><STRONG><a name="[641]"></a>udp_recv</STRONG> (ARM, 12 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</UL>

<P><STRONG><a name="[63d]"></a>udp_remove</STRONG> (ARM, 80 bytes, Stack size 0 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</UL>

<P><STRONG><a name="[71a]"></a>udp_send</STRONG> (ARM, 168 bytes, Stack size 32 bytes, udp.o(i.udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = udp_send &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[64e]"></a>udp_sendto</STRONG> (ARM, 168 bytes, Stack size 32 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = udp_sendto &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[62e]"></a>udp_sendto_if</STRONG> (ARM, 96 bytes, Stack size 24 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
</UL>

<P><STRONG><a name="[62b]"></a>udp_sendto_if_src</STRONG> (ARM, 532 bytes, Stack size 48 bytes, udp.o(i.udp_sendto_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
</UL>

<P><STRONG><a name="[880]"></a>uiBrightnessTest</STRONG> (ARM, 64 bytes, Stack size 8 bytes, ui_cmd_project.o(i.uiBrightnessTest), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[881]"></a>uiCaptureVideoByChannel</STRONG> (ARM, 424 bytes, Stack size 16 bytes, ui_flow_project.o(i.uiCaptureVideoByChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = uiCaptureVideoByChannel &rArr; uiCaptureVideoStopByChannel &rArr; osdDrawVideoOn &rArr; uiOsdDrawCamera &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoOneCh
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStopByChannel
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSetChannelRecType
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInsertSD
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfResolutionRxToTx
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckScheduleTime
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckRecState
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckRecPIR
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCRec
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiWaitMainInitReady
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_CameraResolution
</UL>

<P><STRONG><a name="[3a2]"></a>uiCaptureVideoStop</STRONG> (ARM, 452 bytes, Stack size 24 bytes, ui_flow_project.o(i.uiCaptureVideoStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = uiCaptureVideoStop &rArr; osdDrawQuadVideoOn &rArr; uiOsdDrawCamera &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideoStopAll
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawVideoOn
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfRxVideoPackerDisable
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadVideoOn
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareUpdateFlow
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispFirmwareNetPrepare
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiKeyParse
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Overwrite
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Format
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Default
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_UpgradeNet
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Timezone
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Motion_Section
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_HDDRemove
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_DateTime
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[466]"></a>uiCaptureVideoStopByChannel</STRONG> (ARM, 188 bytes, Stack size 8 bytes, ui_flow_project.o(i.uiCaptureVideoStopByChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = uiCaptureVideoStopByChannel &rArr; osdDrawVideoOn &rArr; uiOsdDrawCamera &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoStopOneCh
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawVideoOn
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfLinkBrokenCloseFile
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfResolutionRxToTx
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckScheduleTime
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckRecState
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckCurRecState
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoByChannel
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_CameraOnOff
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_CameraResolution
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_REC_MODE_BY_CH
</UL>

<P><STRONG><a name="[884]"></a>uiCheckAlarmManualSwitchStatus</STRONG> (ARM, 556 bytes, Stack size 40 bytes, ui_flow_project.o(i.uiCheckAlarmManualSwitchStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = uiCheckAlarmManualSwitchStatus &rArr; uiSetRfManualLightingRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfManualLightingRxToTx
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadCamreaAlarmManual
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCamreaAlarmManual
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMAYONAlarmStatus
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetAlarmStatusAPP
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
</UL>

<P><STRONG><a name="[889]"></a>uiCheckBTCAlarm</STRONG> (ARM, 452 bytes, Stack size 40 bytes, ui_flow_project.o(i.uiCheckBTCAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = uiCheckBTCAlarm &rArr; Save_UI_Setting &rArr; spiWriteUIBackup &rArr; spiWrite &rArr; spi4ByteWrite &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetBTCTimer
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadLightManual
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadCamreaAlarmManual
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLightManual
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCamreaAlarmManual
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCRec
</UL>

<P><STRONG><a name="[88d]"></a>uiCheckBTCRec</STRONG> (ARM, 552 bytes, Stack size 48 bytes, ui_flow_project.o(i.uiCheckBTCRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 4088 + Unknown Stack Size
<LI>Call Chain = uiCheckBTCRec &rArr; uiFlowSetPir &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetPir
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckRecState
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCAlarm
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoByChannel
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMAYONTXStatus
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCSetting
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRFStatus
</UL>

<P><STRONG><a name="[891]"></a>uiCheckBTCSetting</STRONG> (ARM, 132 bytes, Stack size 16 bytes, ui_flow_project.o(i.uiCheckBTCSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 4104 + Unknown Stack Size
<LI>Call Chain = uiCheckBTCSetting &rArr; uiCheckBTCRec &rArr; uiFlowSetPir &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetBTCWakeStatus
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCRec
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetBTCTimer
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetBTCWakeTime
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetBTCTimer
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRFStatus
</UL>

<P><STRONG><a name="[892]"></a>uiCheckBTCTimer</STRONG> (ARM, 180 bytes, Stack size 8 bytes, ui_flow_project.o(i.uiCheckBTCTimer), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetBTCWakeStatus
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetBTCTimer
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetBTCWakeTime
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetBTCTimer
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[893]"></a>uiCheckBatterySchdule</STRONG> (ARM, 476 bytes, Stack size 48 bytes, ui_flow_project.o(i.uiCheckBatterySchdule))
<BR><BR>[Stack]<UL><LI>Max Depth = 4048 + Unknown Stack Size
<LI>Call Chain = uiCheckBatterySchdule &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetBTCWakeTime
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBatteryCam_wake
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBatteryCam_isSleeping
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
</UL>

<P><STRONG><a name="[3bd]"></a>uiCheckLightManualSwitchStatus</STRONG> (ARM, 560 bytes, Stack size 40 bytes, ui_flow_project.o(i.uiCheckLightManualSwitchStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = uiCheckLightManualSwitchStatus &rArr; uiSetRfManualLightingRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfManualLightingRxToTx
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadLightManual
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLightManual
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMAYONLightStatus
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetLightStatusAPP
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[7d8]"></a>uiCheckPIRSchedule</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ui.o(i.uiCheckPIRSchedule))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXPIRCfg
</UL>

<P><STRONG><a name="[898]"></a>uiCheckPlayback</STRONG> (ARM, 32 bytes, Stack size 8 bytes, ui.o(i.uiCheckPlayback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = uiCheckPlayback &rArr; OSFlagAccept
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
</UL>

<P><STRONG><a name="[8e6]"></a>uiCheckQuadTouchChannel</STRONG> (ARM, 268 bytes, Stack size 8 bytes, ui_flow_project.o(i.uiCheckQuadTouchChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uiCheckQuadTouchChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
</UL>

<P><STRONG><a name="[79c]"></a>uiCheckRfTalkStatus</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ui.o(i.uiCheckRfTalkStatus))
<BR><BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
</UL>

<P><STRONG><a name="[81c]"></a>uiCheckSDCD</STRONG> (ARM, 392 bytes, Stack size 32 bytes, ui.o(i.uiCheckSDCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704 + Unknown Stack Size
<LI>Call Chain = uiCheckSDCD &rArr; sysSDCD_IN &rArr; dcfInit &rArr; dcfDirInit &rArr; uiCheckTXUpgradeFileName &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetEvt
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_OFF
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageSel
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCheckSDCD
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_UI_KEY_SDCD
</UL>

<P><STRONG><a name="[899]"></a>uiCheckTVInFormat</STRONG> (ARM, 80 bytes, Stack size 8 bytes, ui.o(i.uiCheckTVInFormat), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTVinFormat
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[5fd]"></a>uiCheckTXUpgradeFileName</STRONG> (ARM, 908 bytes, Stack size 376 bytes, ui_flow_project.o(i.uiCheckTXUpgradeFileName))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544 + Unknown Stack Size
<LI>Call Chain = uiCheckTXUpgradeFileName &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOpen
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuTxFwUpdateFromSD
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDReset
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfRename
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInit
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorCenter
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduUnlockVideoAllColor
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduMenuMode
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduLockVideoAllColor
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfDirInit
</UL>

<P><STRONG><a name="[89f]"></a>uiCheckTimerWrong</STRONG> (ARM, 184 bytes, Stack size 24 bytes, ui_osd_project.o(i.uiCheckTimerWrong), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysForceWDTtoReboot
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[81e]"></a>uiCheckUSBCD</STRONG> (ARM, 384 bytes, Stack size 32 bytes, ui.o(i.uiCheckUSBCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 4704 + Unknown Stack Size
<LI>Call Chain = uiCheckUSBCD &rArr; sysUSBCD_IN &rArr; dcfInit &rArr; dcfDirInit &rArr; uiCheckTXUpgradeFileName &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetEvt
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_OFF
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_IN
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCheckUSBCD
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_UI_KEY_USB
</UL>

<P><STRONG><a name="[82d]"></a>uiCheckVideoRec</STRONG> (ARM, 32 bytes, Stack size 8 bytes, ui.o(i.uiCheckVideoRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = uiCheckVideoRec &rArr; OSFlagAccept
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPowerOff
</UL>

<P><STRONG><a name="[53]"></a>uiClearFfQuadBuf</STRONG> (ARM, 440 bytes, Stack size 32 bytes, ui.o(i.uiClearFfQuadBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = uiClearFfQuadBuf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[779]"></a>uiClearOSDBuf</STRONG> (ARM, 200 bytes, Stack size 20 bytes, ui_osd.o(i.uiClearOSDBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uiClearOSDBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawISPNow
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawISPStatus
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFillWait
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFillEmpty
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_IN
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPlaybackDeleteAll
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDevInsertedUpgradeEvt
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawFWVersion
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCardInfo
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiDrawNetworkInfo
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPairInMenu
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPair
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNoSignal
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawConfirmSelect
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawBlackAll
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawUpgradeFW
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSystemReboot
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRunFormat
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawProtect
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdTest
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawRestoreDefaltSettings
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuTitle
</UL>

<P><STRONG><a name="[8a1]"></a>uiCmdPareCmd</STRONG> (ARM, 8576 bytes, Stack size 80 bytes, ui_cmd_project.o(i.uiCmdPareCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 4080 + Unknown Stack Size
<LI>Call Chain = uiCmdPareCmd &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoStopOneCh
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelSysCaptureVideoOneCh
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_AudioRetONOFF_IIS
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_AudioRetONOFF_APP
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_TXCMD_Enc
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SendTxMdSense
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_PAIR_Stop
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_PAIR_Linit
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuTxFwUpdateFromSD
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuTxFwUpdateFromNet
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuForceResync
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuCamOnOffCmd
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_RF_SetEvt
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackSetEvt
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysForceWDTtoReboot
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteNet
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadData
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerCountEnable
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuEnterPreview
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetZoomMode
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfSwAudio_DualMode
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChgPTZ_CH
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeChannel
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeAudio_QuadMode
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawFrameRate
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawBitRate
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_function
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saturation_write
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saturation_read
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduSwitchNTSCPAL
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite_WM8940
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite_Byte
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead_Byte
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contrast_write
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contrast_read
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brightness_write
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brightness_read
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcSetADC_MICIN_PGA_Gain
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_IR_TX
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH_Channel_write
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTimeTest
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTestGPIO
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetMAC_To_Flash
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRXCMDTest
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPanelGammaSetting_Y
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPanelGammaSetting_X
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPWMTest
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdTest
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIRTest
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiIPNetworkTest
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAllPreviewIcon
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiKeyParse
</UL>

<P><STRONG><a name="[4dc]"></a>uiCompareSaveData</STRONG> (ARM, 632 bytes, Stack size 16 bytes, ui_flow_project.o(i.uiCompareSaveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uiCompareSaveData &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
</UL>

<P><STRONG><a name="[8ba]"></a>uiDrawManualRec</STRONG> (ARM, 280 bytes, Stack size 24 bytes, ui_flow_project.o(i.uiDrawManualRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = uiDrawManualRec &rArr; osdDrawRecPreview &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRecPreview
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
</UL>

<P><STRONG><a name="[8bb]"></a>uiDrawNetworkInfo</STRONG> (ARM, 424 bytes, Stack size 120 bytes, ui_osd_project.o(i.uiDrawNetworkInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = uiDrawNetworkInfo &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisable
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawNetworkInfo
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
</UL>

<P><STRONG><a name="[827]"></a>uiDrawTimeOnVideoClip</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ui_flow_project.o(i.uiDrawTimeOnVideoClip))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDrawTimeOnVideoClip
</UL>

<P><STRONG><a name="[89b]"></a>uiEnterMenu</STRONG> (ARM, 20 bytes, Stack size 0 bytes, ui.o(i.uiEnterMenu))
<BR><BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadSwitchChannel
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlayback_Delete_File
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackListMode
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiWaitMainInitReady
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuTreeInit
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetGoToFormat
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawConfirmSelect
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIP
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSetting
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduled
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawKeypad
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawDateTime
</UL>

<P><STRONG><a name="[8bc]"></a>uiEventHandler</STRONG> (ARM, 904 bytes, Stack size 16 bytes, ui_flow_project.o(i.uiEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4496 + Unknown Stack Size
<LI>Call Chain = uiEventHandler &rArr; uiFlowPlaybackListMode &rArr; uiOsdDrawConfirmSelect &rArr; uiFlowRunAction &rArr; uiFlowPlayback_Delete_File &rArr; uiOsdDrawPlaybackMenu &rArr; uiGraphDrawPlaybackList &rArr;  uiOsdDrawPlaybackMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupMode
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackListMode
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowEnterMenuMode
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawMaskArea
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawConfirmSelect
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawVersionInfo
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimezone
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIP
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSetting
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduled
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawResolution
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawRECMode
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawNetworkInfo
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMotionSensitivity
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawKeypad
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawDateTime
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCardInfo
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraOnOff
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraAlarmOnOff
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawBrightness
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawAPPInfo
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiKeyParse
</UL>

<P><STRONG><a name="[81d]"></a>uiFlowCardReady</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ui_flow_project.o(i.uiFlowCardReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = uiFlowCardReady &rArr; uiFlowCheckRecState &rArr; uiCaptureVideoByChannel &rArr; uiCaptureVideoStopByChannel &rArr; osdDrawVideoOn &rArr; uiOsdDrawCamera &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckRecState
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_UI_KEY_USB
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_UI_KEY_SDCD
</UL>

<P><STRONG><a name="[8d5]"></a>uiFlowCheckCurRecState</STRONG> (ARM, 268 bytes, Stack size 16 bytes, ui_flow_project.o(i.uiFlowCheckCurRecState), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStopByChannel
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[8d6]"></a>uiFlowCheckMotion</STRONG> (ARM, 520 bytes, Stack size 48 bytes, ui_flow_project.o(i.uiFlowCheckMotion))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = uiFlowCheckMotion &rArr; sysback_Net_SetEvt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioGetLevel
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_Net_SetEvt
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBatteryCam_isSleeping
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_function
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
</UL>

<P><STRONG><a name="[8d7]"></a>uiFlowCheckP2PMode</STRONG> (ARM, 508 bytes, Stack size 40 bytes, ui_flow_project.o(i.uiFlowCheckP2PMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4040 + Unknown Stack Size
<LI>Call Chain = uiFlowCheckP2PMode &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackMode
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idu_ClearBuf
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartBatteryCam
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBatteryCam_isSleeping
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearP2PConnection
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
</UL>

<P><STRONG><a name="[8d8]"></a>uiFlowCheckRecPIR</STRONG> (ARM, 228 bytes, Stack size 8 bytes, ui_flow_project.o(i.uiFlowCheckRecPIR), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoByChannel
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[88f]"></a>uiFlowCheckRecState</STRONG> (ARM, 872 bytes, Stack size 40 bytes, ui_flow_project.o(i.uiFlowCheckRecState))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = uiFlowCheckRecState &rArr; uiCaptureVideoByChannel &rArr; uiCaptureVideoStopByChannel &rArr; osdDrawVideoOn &rArr; uiOsdDrawCamera &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStopByChannel
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoByChannel
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCRec
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSdCardMode
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCardReady
</UL>

<P><STRONG><a name="[8d9]"></a>uiFlowCheckScheduleTime</STRONG> (ARM, 876 bytes, Stack size 56 bytes, ui_flow_project.o(i.uiFlowCheckScheduleTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = uiFlowCheckScheduleTime &rArr; uiCaptureVideoByChannel &rArr; uiCaptureVideoStopByChannel &rArr; osdDrawVideoOn &rArr; uiOsdDrawCamera &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStopByChannel
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoByChannel
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Week
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
</UL>

<P><STRONG><a name="[875]"></a>uiFlowCheckTouchKey</STRONG> (ARM, 700 bytes, Stack size 40 bytes, ui_flow_project.o(i.uiFlowCheckTouchKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = uiFlowCheckTouchKey &rArr; uiSentKeyToUi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSentKeyToUi
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_100ms_IntHandler
</UL>

<P><STRONG><a name="[826]"></a>uiFlowEnterMenuMode</STRONG> (ARM, 140 bytes, Stack size 8 bytes, ui_flow_project.o(i.uiFlowEnterMenuMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4176 + Unknown Stack Size
<LI>Call Chain = uiFlowEnterMenuMode &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDReset
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduUnlockVideoAllColor
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduMenuMode
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduLockVideoAllColor
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowMaskAreaMode
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDevInsertedUpgradeEvt
</UL>

<P><STRONG><a name="[8db]"></a>uiFlowMaskAreaMode</STRONG> (ARM, 140 bytes, Stack size 8 bytes, ui_flow_project.o(i.uiFlowMaskAreaMode), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowEnterMenuMode
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawMaskArea
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[8d1]"></a>uiFlowPlaybackListMode</STRONG> (ARM, 408 bytes, Stack size 16 bytes, ui_flow_project.o(i.uiFlowPlaybackListMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4480 + Unknown Stack Size
<LI>Call Chain = uiFlowPlaybackListMode &rArr; uiOsdDrawConfirmSelect &rArr; uiFlowRunAction &rArr; uiFlowPlayback_Delete_File &rArr; uiOsdDrawPlaybackMenu &rArr; uiGraphDrawPlaybackList &rArr;  uiOsdDrawPlaybackMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetTotalDirCount
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetCurDirFileCount
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuDoor
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawConfirmSelect
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSdCardMode
</UL>

<P><STRONG><a name="[8be]"></a>uiFlowPlaybackMode</STRONG> (ARM, 1768 bytes, Stack size 16 bytes, ui_flow_project.o(i.uiFlowPlaybackMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4336 + Unknown Stack Size
<LI>Call Chain = uiFlowPlaybackMode &rArr; uiOsdDrawPlaybackMenu &rArr; uiGraphDrawPlaybackList &rArr;  uiOsdDrawPlaybackMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFilePrev
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFileNext
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCountPause
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiReadVideoFile
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPlaybackStop
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckPlayback
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlayIndicator
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlayIcon
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFillEmpty
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduSetVidBufAddr
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetCurDirFileCount
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearBuf
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdVolumeControl
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackPlaySpeed
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisableAll
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawClearRemoteMsg
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduUnlockVideoAllColor
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduMenuMode
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduLockVideoAllColor
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
</UL>

<P><STRONG><a name="[8e3]"></a>uiFlowPlayback_Delete_File</STRONG> (ARM, 684 bytes, Stack size 40 bytes, ui_flow_project.o(i.uiFlowPlayback_Delete_File))
<BR><BR>[Stack]<UL><LI>Max Depth = 4360 + Unknown Stack Size
<LI>Call Chain = uiFlowPlayback_Delete_File &rArr; uiOsdDrawPlaybackMenu &rArr; uiGraphDrawPlaybackList &rArr;  uiOsdDrawPlaybackMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanFileOnPlaybackDir
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFilePrev
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDel
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetPlaybackFileListTail
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_protet
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearPKBuf
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetTotalDirCount
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackDirForward
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFillWait
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdPlaybackFileFind
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisableAll
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawProtect
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
</UL>

<P><STRONG><a name="[8d4]"></a>uiFlowQuadMode</STRONG> (ARM, 2292 bytes, Stack size 40 bytes, ui_flow_project.o(i.uiFlowQuadMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4216 + Unknown Stack Size
<LI>Call Chain = uiFlowQuadMode &rArr; uiFlowEnterMenuMode &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStopByChannel
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDPreviewInit
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadSwitchChannel
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckQuadTouchChannel
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckLightManualSwitchStatus
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckAlarmManualSwitchStatus
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoByChannel
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowEnterMenuMode
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartBatteryCam
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetOutputMode
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBatteryCam_isSleeping
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInsertSD
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawBlackAll
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMotionPreview
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioTimerCtrLed
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideoEnable
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
</UL>

<P><STRONG><a name="[8e7]"></a>uiFlowQuadSwitchChannel</STRONG> (ARM, 200 bytes, Stack size 8 bytes, ui_flow_project.o(i.uiFlowQuadSwitchChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 3856 + Unknown Stack Size
<LI>Call Chain = uiFlowQuadSwitchChannel &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDPreviewInit
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeChannel
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawBlackAll
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
</UL>

<P><STRONG><a name="[8ea]"></a>uiFlowRFStatus</STRONG> (ARM, 1084 bytes, Stack size 48 bytes, ui_flow_project.o(i.uiFlowRFStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4152 + Unknown Stack Size
<LI>Call Chain = uiFlowRFStatus &rArr; uiCheckBTCSetting &rArr; uiCheckBTCRec &rArr; uiFlowSetPir &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetBTCWakeStatus
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfLinkBrokenCloseFile
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCSetting
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCRec
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memset1_4_arm
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSynRfConfig
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetBTCTimer
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetBTCWakeTime
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetBTCTimer
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadNoSignal
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNoSignal
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSubTask
</UL>

<P><STRONG><a name="[8d3]"></a>uiFlowRunAction</STRONG> (ARM, 1432 bytes, Stack size 40 bytes, ui_flow_project.o(i.uiFlowRunAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 4400 + Unknown Stack Size
<LI>Call Chain = uiFlowRunAction &rArr; uiFlowPlayback_Delete_File &rArr; uiOsdDrawPlaybackMenu &rArr; uiGraphDrawPlaybackList &rArr;  uiOsdDrawPlaybackMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_protet
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearPKBuf
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysForceWDTtoReboot
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStopByChannel
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlayback_Delete_File
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeChannel
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetBTCWakeStatus
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageSel
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageInserted
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPairInMenu
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawMaskArea
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInsertSD
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInsertHDD
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInit
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisable
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawUpgradeFW
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSystemReboot
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRunFormat
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawProtect
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawNotHDD
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawHDDUninstallStatusMsg
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawHDDUninstallMsg
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduSetVideoBuf0Addr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupMode
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawConfirmSelect
</UL>

<P><STRONG><a name="[81f]"></a>uiFlowRunPerSec</STRONG> (ARM, 728 bytes, Stack size 24 bytes, ui_flow_project.o(i.uiFlowRunPerSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 4080 + Unknown Stack Size
<LI>Call Chain = uiFlowRunPerSec &rArr; uiOsdVolumeControl &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawSDCardFail
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_Net_SetEvt
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckScheduleTime
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckRecState
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckP2PMode
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckMotion
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiDrawManualRec
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBatterySchdule
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeChannel
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfTimeRxToTx
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSentKeyToUi
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackLowSetEvt
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdVolumeControl
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawRecPerSec
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNetworkLinkUp
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLifeTimePerSec
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMotionMsg
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawCamLiveView
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_Check_UI
</UL>

<P><STRONG><a name="[81a]"></a>uiFlowSdCardMode</STRONG> (ARM, 272 bytes, Stack size 8 bytes, ui_flow_project.o(i.uiFlowSdCardMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4488 + Unknown Stack Size
<LI>Call Chain = uiFlowSdCardMode &rArr; uiFlowPlaybackListMode &rArr; uiOsdDrawConfirmSelect &rArr; uiFlowRunAction &rArr; uiFlowPlayback_Delete_File &rArr; uiOsdDrawPlaybackMenu &rArr; uiGraphDrawPlaybackList &rArr;  uiOsdDrawPlaybackMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawSDCardFail
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDPreviewInit
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackListMode
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckRecState
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPlaybackStop
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSDIcon
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawStorageNReady
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInsertSD
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_UI_KEY_USB
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_UI_KEY_SDCD
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_Device_Mount
</UL>

<P><STRONG><a name="[8f4]"></a>uiFlowSetCAStatus</STRONG> (ARM, 776 bytes, Stack size 48 bytes, ui_flow_project.o(i.uiFlowSetCAStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = uiFlowSetCAStatus &rArr; uiSetRfManualLightingRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfManualLightingRxToTx
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadCamreaAlarmManual
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCamreaAlarmManual
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMAYONAlarmStatus
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetRfLightStatus
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetAlarmStatusAPP
</UL>

<P><STRONG><a name="[8f5]"></a>uiFlowSetLightStatus</STRONG> (ARM, 780 bytes, Stack size 48 bytes, ui_flow_project.o(i.uiFlowSetLightStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = uiFlowSetLightStatus &rArr; uiSetRfManualLightingRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfManualLightingRxToTx
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadLightManual
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLightManual
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMAYONLightStatus
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetRfLightStatus
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetLightStatusAPP
</UL>

<P><STRONG><a name="[890]"></a>uiFlowSetPir</STRONG> (ARM, 288 bytes, Stack size 40 bytes, ui_flow_project.o(i.uiFlowSetPir))
<BR><BR>[Stack]<UL><LI>Max Depth = 4040 + Unknown Stack Size
<LI>Call Chain = uiFlowSetPir &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMotionPreview
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCRec
</UL>

<P><STRONG><a name="[3be]"></a>uiFlowSetRfLightStatus</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ui_flow_project.o(i.uiFlowSetRfLightStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = uiFlowSetRfLightStatus &rArr; uiFlowSetLightStatus &rArr; uiSetRfManualLightingRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetLightStatus
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetCAStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuSetLightStat_RX
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[8bf]"></a>uiFlowSetupMode</STRONG> (ARM, 968 bytes, Stack size 16 bytes, ui_flow_project.o(i.uiFlowSetupMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4416 + Unknown Stack Size
<LI>Call Chain = uiFlowSetupMode &rArr; uiFlowRunAction &rArr; uiFlowPlayback_Delete_File &rArr; uiOsdDrawPlaybackMenu &rArr; uiGraphDrawPlaybackList &rArr;  uiOsdDrawPlaybackMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearPKBuf
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
</UL>

<P><STRONG><a name="[89e]"></a>uiFlowSetupToPreview</STRONG> (ARM, 304 bytes, Stack size 8 bytes, ui_flow_project.o(i.uiFlowSetupToPreview))
<BR><BR>[Stack]<UL><LI>Max Depth = 3856 + Unknown Stack Size
<LI>Call Chain = uiFlowSetupToPreview &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearPKBuf
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDPreviewInit
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDReset
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckRecState
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawBlackAll
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduSetVideoBuf0Addr
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPreviewMode
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduLockVideoAllColor
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupMode
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackListMode
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiKeyParse
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSdCardMode
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TVout_Format
</UL>

<P><STRONG><a name="[8bd]"></a>uiFlowVideoMode</STRONG> (ARM, 1904 bytes, Stack size 40 bytes, ui_flow_project.o(i.uiFlowVideoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4216 + Unknown Stack Size
<LI>Call Chain = uiFlowVideoMode &rArr; uiFlowEnterMenuMode &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStopByChannel
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDPreviewInit
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetPir
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckLightManualSwitchStatus
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckAlarmManualSwitchStatus
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoByChannel
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetTalkOnOff
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeChannel
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckRfTalkStatus
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowEnterMenuMode
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartBatteryCam
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetOutputMode
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBatteryCam_isSleeping
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdVolumeControl
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawTalkBack
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInsertSD
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawBlackAll
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMotionPreview
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMotionMsg
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioTimerCtrLed
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideoEnable
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
</UL>

<P><STRONG><a name="[8f9]"></a>uiFrowGoToLastNode</STRONG> (ARM, 20 bytes, Stack size 0 bytes, ui_flow_project.o(i.uiFrowGoToLastNode))
<BR><BR>[Called By]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawVersionInfo
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimezone
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIP
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSetting
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduled
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawResolution
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawRECMode
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawNetworkInfo
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMotionSensitivity
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawDateTime
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCardInfo
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraOnOff
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraAlarmOnOff
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawBrightness
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawAPPInfo
</UL>

<P><STRONG><a name="[383]"></a>uiGetAlarmOnOffAPP</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ui_flow_project.o(i.uiGetAlarmOnOffAPP))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[384]"></a>uiGetAlarmStatusAPP</STRONG> (ARM, 28 bytes, Stack size 0 bytes, ui_flow_project.o(i.uiGetAlarmStatusAPP))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[381]"></a>uiGetLightOnOffAPP</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ui_flow_project.o(i.uiGetLightOnOffAPP))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[382]"></a>uiGetLightStatusAPP</STRONG> (ARM, 28 bytes, Stack size 0 bytes, ui_flow_project.o(i.uiGetLightStatusAPP))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[833]"></a>uiGetMenuMode</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ui.o(i.uiGetMenuMode))
<BR><BR>[Called By]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
</UL>

<P><STRONG><a name="[389]"></a>uiGetMotionStatusAPP</STRONG> (ARM, 128 bytes, Stack size 8 bytes, ui_flow_project.o(i.uiGetMotionStatusAPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = uiGetMotionStatusAPP &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[970]"></a>uiGetP2PStatueToRF</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ui.o(i.uiGetP2PStatueToRF))
<BR><BR>[Called By]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSynRfConfig
</UL>

<P><STRONG><a name="[4dd]"></a>uiGetSaveChecksum</STRONG> (ARM, 648 bytes, Stack size 24 bytes, ui_flow_project.o(i.uiGetSaveChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uiGetSaveChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadUIBackup
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadUI
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
</UL>

<P><STRONG><a name="[386]"></a>uiGetSuptAlarmAPP</STRONG> (ARM, 112 bytes, Stack size 16 bytes, ui_flow_project.o(i.uiGetSuptAlarmAPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uiGetSuptAlarmAPP &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[38b]"></a>uiGetSuptLightAPP</STRONG> (ARM, 112 bytes, Stack size 16 bytes, ui_flow_project.o(i.uiGetSuptLightAPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uiGetSuptLightAPP &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[8cf]"></a>uiGraphDrawAPPInfo</STRONG> (ARM, 108 bytes, Stack size 8 bytes, ui_graph_project.o(i.uiGraphDrawAPPInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4176 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawAPPInfo &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFrowGoToLastNode
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawFWVersion
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
</UL>

<P><STRONG><a name="[8c3]"></a>uiGraphDrawBrightness</STRONG> (ARM, 376 bytes, Stack size 16 bytes, ui_graph_project.o(i.uiGraphDrawBrightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiGraphDrawBrightness &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFrowGoToLastNode
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_VideoBrightness
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawBrightnessGraph
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
</UL>

<P><STRONG><a name="[8fa]"></a>uiGraphDrawBrightnessGraph</STRONG> (ARM, 368 bytes, Stack size 72 bytes, ui_graph_project.o(i.uiGraphDrawBrightnessGraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawBrightnessGraph &rArr; uiGraphDrawJPGImage &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawBrightness
</UL>

<P><STRONG><a name="[8fd]"></a>uiGraphDrawCalendarFileLoad</STRONG> (ARM, 256 bytes, Stack size 32 bytes, ui_graph_project.o(i.uiGraphDrawCalendarFileLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawCalendarFileLoad &rArr; dcfPlaybackCalendarInit &rArr; dcfScanDiskAll &rArr; dcfPlayDirSearch &rArr; FS_SearchWholeDir &rArr; FS__fat_SearchWholedir &rArr; FS__fat_dir_realsec &rArr;  FS__fat_find_dir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetEvt
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackCalendarInit
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLoadIcon
</UL>
<BR>[Called By]<UL><LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
</UL>

<P><STRONG><a name="[8c1]"></a>uiGraphDrawCameraAlarmOnOff</STRONG> (ARM, 1216 bytes, Stack size 56 bytes, ui_graph_project.o(i.uiGraphDrawCameraAlarmOnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4056 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiGraphDrawCameraAlarmOnOff &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFrowGoToLastNode
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
</UL>

<P><STRONG><a name="[8c0]"></a>uiGraphDrawCameraOnOff</STRONG> (ARM, 484 bytes, Stack size 24 bytes, ui_graph_project.o(i.uiGraphDrawCameraOnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiGraphDrawCameraOnOff &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFrowGoToLastNode
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_CameraOnOff
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraOnOffGraph
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
</UL>

<P><STRONG><a name="[8ff]"></a>uiGraphDrawCameraOnOffGraph</STRONG> (ARM, 276 bytes, Stack size 40 bytes, ui_graph_project.o(i.uiGraphDrawCameraOnOffGraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawCameraOnOffGraph &rArr; uiGraphDrawJPGImage &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraOnOff
</UL>

<P><STRONG><a name="[8ca]"></a>uiGraphDrawCardInfo</STRONG> (ARM, 104 bytes, Stack size 8 bytes, ui_graph_project.o(i.uiGraphDrawCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4176 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawCardInfo &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFrowGoToLastNode
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCardInfo
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
</UL>

<P><STRONG><a name="[8c8]"></a>uiGraphDrawDateTime</STRONG> (ARM, 1436 bytes, Stack size 64 bytes, ui_graph_project.o(i.uiGraphDrawDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4064 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiGraphDrawDateTime &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFrowGoToLastNode
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawSetting
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimeGraph
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawSelectDateTime
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
</UL>

<P><STRONG><a name="[8fc]"></a>uiGraphDrawJPGImage</STRONG> (ARM, 244 bytes, Stack size 56 bytes, ui_graph.o(i.uiGraphDrawJPGImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawJPGImage &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJpgGraph
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDU_TVLayer_Stride
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimeZoneGraph
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimeGraph
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawString
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledTime
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledTable
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSettingGraph
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawResolutionGraph
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawRECModeGraph
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListRecType
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListCam
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListCalendar
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMotionSensitivityGraph
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawLoadingGraph
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraOnOffGraph
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawBrightnessGraph
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduled
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawDateTime
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraAlarmOnOff
</UL>

<P><STRONG><a name="[905]"></a>uiGraphDrawJpgGraph</STRONG> (ARM, 420 bytes, Stack size 32 bytes, ui_graph.o(i.uiGraphDrawJpgGraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiUI_OpenFB_ByIndex
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegDecompressionYUV420
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exifFileParse
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegRAW420
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetStartMovie
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphGetMenuData
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
</UL>

<P><STRONG><a name="[8ce]"></a>uiGraphDrawKeypad</STRONG> (ARM, 776 bytes, Stack size 24 bytes, ui_graph_project.o(i.uiGraphDrawKeypad))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiGraphDrawKeypad &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawKeypadGraph
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
</UL>

<P><STRONG><a name="[906]"></a>uiGraphDrawKeypadGraph</STRONG> (ARM, 612 bytes, Stack size 32 bytes, ui_graph_project.o(i.uiGraphDrawKeypadGraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawKeypadGraph &rArr; uiGraphDrawString &rArr; uiGraphDrawJPGImage &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphGetMenuData
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawString
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawKeypad
</UL>

<P><STRONG><a name="[7a3]"></a>uiGraphDrawLoadingGraph</STRONG> (ARM, 176 bytes, Stack size 32 bytes, ui_graph_project.o(i.uiGraphDrawLoadingGraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawLoadingGraph &rArr; uiGraphDrawJPGImage &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
</UL>
<BR>[Called By]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRunFormat
</UL>

<P><STRONG><a name="[89d]"></a>uiGraphDrawMenu</STRONG> (ARM, 844 bytes, Stack size 40 bytes, ui_graph_project.o(i.uiGraphDrawMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 4168 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysISU_enable
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawFWVersion
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCardInfo
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiDrawNetworkInfo
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetworkInfo
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphGetMenuData
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimezone
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIP
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSetting
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduled
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawResolution
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawRECMode
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMotionSensitivity
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawKeypad
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawDateTime
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraOnOff
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraAlarmOnOff
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawBrightness
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduSetVideoBuf0Addr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupMode
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetGoToFormat
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowEnterMenuMode
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawConfirmSelect
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawVersionInfo
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimezone
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIP
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSetting
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduled
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawResolution
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawRECMode
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawNetworkInfo
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMotionSensitivity
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawKeypad
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawDateTime
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCardInfo
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraOnOff
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraAlarmOnOff
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawBrightness
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawAPPInfo
</UL>

<P><STRONG><a name="[8c5]"></a>uiGraphDrawMotionSensitivity</STRONG> (ARM, 524 bytes, Stack size 32 bytes, ui_graph_project.o(i.uiGraphDrawMotionSensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiGraphDrawMotionSensitivity &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFrowGoToLastNode
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_MotionSensitivity
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMotionSensitivityGraph
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
</UL>

<P><STRONG><a name="[909]"></a>uiGraphDrawMotionSensitivityGraph</STRONG> (ARM, 336 bytes, Stack size 64 bytes, ui_graph_project.o(i.uiGraphDrawMotionSensitivityGraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawMotionSensitivityGraph &rArr; uiGraphDrawJPGImage &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMotionSensitivity
</UL>

<P><STRONG><a name="[8cd]"></a>uiGraphDrawNetworkInfo</STRONG> (ARM, 140 bytes, Stack size 32 bytes, ui_graph_project.o(i.uiGraphDrawNetworkInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4200 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawNetworkInfo &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFrowGoToLastNode
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiDrawNetworkInfo
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetworkInfo
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
</UL>

<P><STRONG><a name="[8de]"></a>uiGraphDrawPlaybackList</STRONG> (ARM, 2320 bytes, Stack size 88 bytes, ui_graph_project.o(i.uiGraphDrawPlaybackList))
<BR><BR>[Stack]<UL><LI>Max Depth = 4256 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiGraphDrawPlaybackList &rArr;  uiOsdDrawPlaybackMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanFileOnPlaybackDir
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearPKBuf
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetVideoDirListTail
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcGetDayNum
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphGetMenuData
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawString
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListRecType
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListCam
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListCalendar
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCalendarFileLoad
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisableAll
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupMode
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlayback_Delete_File
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackListMode
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
</UL>

<P><STRONG><a name="[90d]"></a>uiGraphDrawPlaybackListCalendar</STRONG> (ARM, 608 bytes, Stack size 152 bytes, ui_graph_project.o(i.uiGraphDrawPlaybackListCalendar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawPlaybackListCalendar &rArr; uiGraphDrawString &rArr; uiGraphDrawJPGImage &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcGetDayNum
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawString
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Week
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
</UL>

<P><STRONG><a name="[90b]"></a>uiGraphDrawPlaybackListCam</STRONG> (ARM, 196 bytes, Stack size 32 bytes, ui_graph_project.o(i.uiGraphDrawPlaybackListCam))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawPlaybackListCam &rArr; uiGraphDrawJPGImage &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
</UL>
<BR>[Called By]<UL><LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
</UL>

<P><STRONG><a name="[90c]"></a>uiGraphDrawPlaybackListRecType</STRONG> (ARM, 212 bytes, Stack size 40 bytes, ui_graph_project.o(i.uiGraphDrawPlaybackListRecType))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawPlaybackListRecType &rArr; uiGraphDrawJPGImage &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
</UL>
<BR>[Called By]<UL><LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
</UL>

<P><STRONG><a name="[910]"></a>uiGraphDrawPlaybackListYM</STRONG> (ARM, 128 bytes, Stack size 32 bytes, ui_graph_project.o(i.uiGraphDrawPlaybackListYM), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawString
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[8c4]"></a>uiGraphDrawRECMode</STRONG> (ARM, 420 bytes, Stack size 24 bytes, ui_graph_project.o(i.uiGraphDrawRECMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4024 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiGraphDrawRECMode &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFrowGoToLastNode
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawRECModeGraph
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
</UL>

<P><STRONG><a name="[911]"></a>uiGraphDrawRECModeGraph</STRONG> (ARM, 352 bytes, Stack size 64 bytes, ui_graph_project.o(i.uiGraphDrawRECModeGraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawRECModeGraph &rArr; uiGraphDrawJPGImage &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawRECMode
</UL>

<P><STRONG><a name="[8c2]"></a>uiGraphDrawResolution</STRONG> (ARM, 536 bytes, Stack size 32 bytes, ui_graph_project.o(i.uiGraphDrawResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiGraphDrawResolution &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFrowGoToLastNode
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartBatteryCam
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBatteryCam_isSleeping
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawResolutionGraph
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_CameraResolution
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
</UL>

<P><STRONG><a name="[912]"></a>uiGraphDrawResolutionGraph</STRONG> (ARM, 276 bytes, Stack size 56 bytes, ui_graph_project.o(i.uiGraphDrawResolutionGraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawResolutionGraph &rArr; uiGraphDrawJPGImage &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
</UL>
<BR>[Called By]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawResolution
</UL>

<P><STRONG><a name="[8c6]"></a>uiGraphDrawScheduled</STRONG> (ARM, 796 bytes, Stack size 32 bytes, ui_graph_project.o(i.uiGraphDrawScheduled))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiGraphDrawScheduled &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFrowGoToLastNode
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledTable
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
</UL>

<P><STRONG><a name="[8c7]"></a>uiGraphDrawScheduledSetting</STRONG> (ARM, 1972 bytes, Stack size 56 bytes, ui_graph_project.o(i.uiGraphDrawScheduledSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 4056 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiGraphDrawScheduledSetting &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFrowGoToLastNode
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawScheduledFrame
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSchduleWarnMsg
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledTimeSelect
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSettingGraph
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr1_7_arm
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
</UL>

<P><STRONG><a name="[915]"></a>uiGraphDrawScheduledSettingGraph</STRONG> (ARM, 540 bytes, Stack size 48 bytes, ui_graph_project.o(i.uiGraphDrawScheduledSettingGraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawScheduledSettingGraph &rArr; uiGraphDrawScheduledTime &rArr; uiGraphDrawJPGImage &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledTime
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSetting
</UL>

<P><STRONG><a name="[914]"></a>uiGraphDrawScheduledTable</STRONG> (ARM, 840 bytes, Stack size 64 bytes, ui_graph_project.o(i.uiGraphDrawScheduledTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawScheduledTable &rArr; uiGraphDrawJPGImage &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduled
</UL>

<P><STRONG><a name="[918]"></a>uiGraphDrawScheduledTime</STRONG> (ARM, 400 bytes, Stack size 40 bytes, ui_graph_project.o(i.uiGraphDrawScheduledTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawScheduledTime &rArr; uiGraphDrawJPGImage &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
</UL>
<BR>[Called By]<UL><LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledTimeSelect
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSettingGraph
</UL>

<P><STRONG><a name="[916]"></a>uiGraphDrawScheduledTimeSelect</STRONG> (ARM, 504 bytes, Stack size 24 bytes, ui_graph_project.o(i.uiGraphDrawScheduledTimeSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawScheduledTimeSelect &rArr; uiGraphDrawScheduledTime &rArr; uiGraphDrawJPGImage &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledTime
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSetting
</UL>

<P><STRONG><a name="[903]"></a>uiGraphDrawSelectDateTime</STRONG> (ARM, 940 bytes, Stack size 8 bytes, ui_graph_project.o(i.uiGraphDrawSelectDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawSelectDateTime &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawDateTime
</UL>

<P><STRONG><a name="[919]"></a>uiGraphDrawSelectTimeZone</STRONG> (ARM, 240 bytes, Stack size 0 bytes, ui_graph_project.o(i.uiGraphDrawSelectTimeZone))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawSelectTimeZone &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimezone
</UL>

<P><STRONG><a name="[8cc]"></a>uiGraphDrawStaticIP</STRONG> (ARM, 1004 bytes, Stack size 128 bytes, ui_graph_project.o(i.uiGraphDrawStaticIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 4128 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysForceWDTtoReboot
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSPI_Enable
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFrowGoToLastNode
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetworkInfo
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphSaveStaticIP
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphReadStaticIP
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawString
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeStrtoIP
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSystemReboot
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
</UL>

<P><STRONG><a name="[91c]"></a>uiGraphDrawStaticIPNum</STRONG> (ARM, 184 bytes, Stack size 64 bytes, ui_graph_project.o(i.uiGraphDrawStaticIPNum), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawString
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[908]"></a>uiGraphDrawString</STRONG> (ARM, 512 bytes, Stack size 64 bytes, ui_graph_project.o(i.uiGraphDrawString))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawString &rArr; uiGraphDrawJPGImage &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIPNum
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListYM
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackListCalendar
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawKeypadGraph
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIP
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
</UL>

<P><STRONG><a name="[902]"></a>uiGraphDrawTimeGraph</STRONG> (ARM, 492 bytes, Stack size 48 bytes, ui_graph_project.o(i.uiGraphDrawTimeGraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawTimeGraph &rArr; uiGraphDrawJPGImage &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
</UL>
<BR>[Called By]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawDateTime
</UL>

<P><STRONG><a name="[91d]"></a>uiGraphDrawTimeZoneGraph</STRONG> (ARM, 504 bytes, Stack size 48 bytes, ui_graph_project.o(i.uiGraphDrawTimeZoneGraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawTimeZoneGraph &rArr; uiGraphDrawJPGImage &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJPGImage
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimezone
</UL>

<P><STRONG><a name="[8c9]"></a>uiGraphDrawTimezone</STRONG> (ARM, 740 bytes, Stack size 48 bytes, ui_graph_project.o(i.uiGraphDrawTimezone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4048 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiGraphDrawTimezone &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFrowGoToLastNode
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimeZoneGraph
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawSelectTimeZone
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
</UL>

<P><STRONG><a name="[8cb]"></a>uiGraphDrawVersionInfo</STRONG> (ARM, 108 bytes, Stack size 8 bytes, ui_graph_project.o(i.uiGraphDrawVersionInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4176 + Unknown Stack Size
<LI>Call Chain = uiGraphDrawVersionInfo &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFrowGoToLastNode
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawFWVersion
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
</UL>

<P><STRONG><a name="[91e]"></a>uiGraphGetImageID</STRONG> (ARM, 1532 bytes, Stack size 40 bytes, ui_graph_project.o(i.uiGraphGetImageID))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uiGraphGetImageID &rArr; spiGet_UI_FB_Index &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiGet_UI_FB_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetBootSetting
</UL>

<P><STRONG><a name="[907]"></a>uiGraphGetMenuData</STRONG> (ARM, 456 bytes, Stack size 64 bytes, ui_graph_project.o(i.uiGraphGetMenuData))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = uiGraphGetMenuData &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJpgGraph
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDU_TVLayer_Stride
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawKeypadGraph
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
</UL>

<P><STRONG><a name="[91a]"></a>uiGraphReadStaticIP</STRONG> (ARM, 352 bytes, Stack size 8 bytes, ui_graph_project.o(i.uiGraphReadStaticIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uiGraphReadStaticIP
</UL>
<BR>[Called By]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIP
</UL>

<P><STRONG><a name="[91b]"></a>uiGraphSaveStaticIP</STRONG> (ARM, 308 bytes, Stack size 8 bytes, ui_graph_project.o(i.uiGraphSaveStaticIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uiGraphSaveStaticIP
</UL>
<BR>[Called By]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIP
</UL>

<P><STRONG><a name="[8b7]"></a>uiIPNetworkTest</STRONG> (ARM, 1268 bytes, Stack size 80 bytes, ui_cmd_project.o(i.uiIPNetworkTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = uiIPNetworkTest &rArr; Save_UI_Setting &rArr; spiWriteUIBackup &rArr; spiWrite &rArr; spi4ByteWrite &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNetworkInfo
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[8a9]"></a>uiIRTest</STRONG> (ARM, 732 bytes, Stack size 24 bytes, ui_cmd_project.o(i.uiIRTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = uiIRTest &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRSetDiv
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRSetCustomCode
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRGetRecCustomCode
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IREnableInt
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRCtrReset
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRCtrEnable
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[739]"></a>uiInit</STRONG> (ARM, 328 bytes, Stack size 16 bytes, ui.o(i.uiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4032 + Unknown Stack Size
<LI>Call Chain = uiInit &rArr; uiMenuSetBootSetting &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetDefaultSetting
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSPI_Enable
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSPI_Disable
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Enable
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSD_Disable
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStart
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadVersion
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadUI
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadRF_ID
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadNet
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadFBSetting
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDReset
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdIconInit
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuTreeInit
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetBootSetting
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuInit
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTVinFormat
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[929]"></a>uiKeyParse</STRONG> (ARM, 760 bytes, Stack size 32 bytes, ui_flow_project.o(i.uiKeyParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4528 + Unknown Stack Size
<LI>Call Chain = uiKeyParse &rArr; uiEventHandler &rArr; uiFlowPlaybackListMode &rArr; uiOsdDrawConfirmSelect &rArr; uiFlowRunAction &rArr; uiFlowPlayback_Delete_File &rArr; uiOsdDrawPlaybackMenu &rArr; uiGraphDrawPlaybackList &rArr;  uiOsdDrawPlaybackMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioGetLevel
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiPlaybackStop
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSDIcon
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUnlockMountSeq
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawStorageNReady
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPair
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTask
</UL>

<P><STRONG><a name="[896]"></a>uiMenuAction</STRONG> (ARM, 3648 bytes, Stack size 64 bytes, ui_act_project.o(i.uiMenuAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 4000 + Unknown Stack Size
<LI>Call Chain = uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRF
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackSetEvt
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteNet
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetEvt
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_Net_SetEvt
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSetVideoSectionTime
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfPIRRxToTx
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfMotionRxToTx
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfFlickerRxToTx
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfBrightnessRxToTx
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNetworkInfo
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_TimeZone
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfTimeStampTypeRxToTx
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfManualLightingRxToTx
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PPassword
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfTimeRxToTx
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysResetBTCCheckLev
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageSel
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_CameraOnOff
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Overwrite
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Default
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_CameraResolution
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stop_remove
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpeg4SetVideoQuality
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpeg4SetVideoFrameRate
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8940_SpeakerMute
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8940_AdjustSpeakerVolume
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTP_Switch
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TVout_Format
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_REC_MODE_BY_CH
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Network
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Motion_Section
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_LS_Timer
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_LS_Status
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_LS_ONOFF
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_CameraAlarm_Timer
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_CameraAlarm_Status
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_CA_ONOFF
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetAlarmOnOffAPP
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetPir
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowMaskAreaMode
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckP2PMode
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBatterySchdule
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSetBootSetting
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetFileDoCommand
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSynRfConfig
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Default
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdVolumeControl
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawTimezone
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawStaticIP
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSetting
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawRECMode
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawDateTime
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraAlarmOnOff
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetMotionStatusAPP
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetLightOnOffAPP
</UL>

<P><STRONG><a name="[830]"></a>uiMenuEnterPreview</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ui.o(i.uiMenuEnterPreview))
<BR><BR>[Called By]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[926]"></a>uiMenuInit</STRONG> (ARM, 728 bytes, Stack size 1672 bytes, ui.o(i.uiMenuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1732<LI>Call Chain = uiMenuInit &rArr; spiGet_UI_FB_Index &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiGet_UI_FB_Index
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
</UL>

<P><STRONG><a name="[788]"></a>uiMenuOSDFrame</STRONG> (ARM, 268 bytes, Stack size 32 bytes, ui_osd.o(i.uiMenuOSDFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = uiMenuOSDFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawSDCardFail
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRemoteOn
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCameraBatteryLevel
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSDIcon
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlayIndicator
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawScheduledFrame
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLoadIcon
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdVolumeControl
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawTalkBack
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawStorageNReady
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackPlaySpeed
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPair
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInsertSD
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawBlackAll
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdTest
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawRemindDownload
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuFrame
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuFolder
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuFile
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNetworkLink
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMenuPreview
</UL>

<P><STRONG><a name="[793]"></a>uiMenuOSDReset</STRONG> (ARM, 228 bytes, Stack size 8 bytes, ui_osd.o(i.uiMenuOSDReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = uiMenuOSDReset &rArr; iduTVOSDDisable_All &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVOSDDisable_All
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVOSDClear
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduOSDDisable_All
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduOSDClear
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlaybackArea
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDPreviewInit
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowEnterMenuMode
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysProjectSDCD_IN
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawSetting
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPair
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNoSignal
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInit
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawBlackAll
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdTest
</UL>

<P><STRONG><a name="[925]"></a>uiMenuSetBootSetting</STRONG> (ARM, 360 bytes, Stack size 16 bytes, ui_flow_project.o(i.uiMenuSetBootSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 4016 + Unknown Stack Size
<LI>Call Chain = uiMenuSetBootSetting &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memset1_4_arm
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphGetImageID
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
</UL>

<P><STRONG><a name="[2ba]"></a>uiMenuSetStartMovie</STRONG> (ARM, 396 bytes, Stack size 40 bytes, ui_flow_project.o(i.uiMenuSetStartMovie))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = uiMenuSetStartMovie &rArr; uiGraphDrawJpgGraph &rArr; exifFileParse &rArr; jpegSetHuffmanTable &rArr; jpegSetHuffmanDecodeTable
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearPKBuf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSPI_Enable
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSPI_Disable
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiGet_UI_FB_Index
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_enable
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysJPEG_disable
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysISU_enable
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTVinFormat
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawJpgGraph
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduSetVideoBuf0Addr
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPreviewMode
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduMenuMode
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDU_TVLayer_Stride
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawLogoTask
</UL>

<P><STRONG><a name="[941]"></a>uiMenuSet_Alarm</STRONG> (ARM, 108 bytes, Stack size 8 bytes, ui_act_project.o(i.uiMenuSet_Alarm), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[942]"></a>uiMenuSet_Audio_Vol</STRONG> (ARM, 176 bytes, Stack size 8 bytes, ui_act_project.o(i.uiMenuSet_Audio_Vol), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8940_SpeakerMute
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8940_AdjustSpeakerVolume
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[93b]"></a>uiMenuSet_CA_ONOFF</STRONG> (ARM, 132 bytes, Stack size 16 bytes, ui_act_project.o(i.uiMenuSet_CA_ONOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiMenuSet_CA_ONOFF &rArr;  uiMenuSet_CA_ONOFF (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfManualLightingRxToTx
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_CA_ONOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_CA_ONOFF
</UL>

<P><STRONG><a name="[93a]"></a>uiMenuSet_CameraAlarm_Status</STRONG> (ARM, 168 bytes, Stack size 16 bytes, ui_act_project.o(i.uiMenuSet_CameraAlarm_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiMenuSet_CameraAlarm_Status &rArr;  uiMenuSet_CameraAlarm_Status (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfManualLightingRxToTx
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_CameraAlarm_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_CameraAlarm_Status
</UL>

<P><STRONG><a name="[939]"></a>uiMenuSet_CameraAlarm_Timer</STRONG> (ARM, 232 bytes, Stack size 48 bytes, ui_act_project.o(i.uiMenuSet_CameraAlarm_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = uiMenuSet_CameraAlarm_Timer &rArr; uiSetRfLightTimerRxToTx &rArr; rfiu_SetTXSchedule &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfLightTimerRxToTx
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
</UL>

<P><STRONG><a name="[943]"></a>uiMenuSet_DateTime</STRONG> (ARM, 248 bytes, Stack size 16 bytes, ui_act_project.o(i.uiMenuSet_DateTime), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_Net_SetEvt
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfTimeRxToTx
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysResetBTCCheckLev
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTP_Switch
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[930]"></a>uiMenuSet_Default</STRONG> (ARM, 220 bytes, Stack size 16 bytes, ui_act_project.o(i.uiMenuSet_Default))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiMenuSet_Default &rArr;  uiMenuAction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetDefaultSetting
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawRestoreDefaltSettings
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
</UL>

<P><STRONG><a name="[945]"></a>uiMenuSet_Display</STRONG> (ARM, 68 bytes, Stack size 8 bytes, ui_act_project.o(i.uiMenuSet_Display), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[946]"></a>uiMenuSet_Dynamic_ON</STRONG> (ARM, 196 bytes, Stack size 8 bytes, ui_act_project.o(i.uiMenuSet_Dynamic_ON), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNetworkInfo
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Network
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[947]"></a>uiMenuSet_Format</STRONG> (ARM, 180 bytes, Stack size 16 bytes, ui_act_project.o(i.uiMenuSet_Format), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysbackSetEvt
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetEvt
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[948]"></a>uiMenuSet_HDDRemove</STRONG> (ARM, 196 bytes, Stack size 8 bytes, ui_act_project.o(i.uiMenuSet_HDDRemove), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageSel
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stop_remove
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[938]"></a>uiMenuSet_LS_ONOFF</STRONG> (ARM, 132 bytes, Stack size 16 bytes, ui_act_project.o(i.uiMenuSet_LS_ONOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiMenuSet_LS_ONOFF &rArr;  uiMenuSet_LS_ONOFF (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfManualLightingRxToTx
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_LS_ONOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_LS_ONOFF
</UL>

<P><STRONG><a name="[937]"></a>uiMenuSet_LS_Status</STRONG> (ARM, 168 bytes, Stack size 16 bytes, ui_act_project.o(i.uiMenuSet_LS_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiMenuSet_LS_Status &rArr;  uiMenuSet_LS_Status (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfManualLightingRxToTx
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_LS_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_LS_Status
</UL>

<P><STRONG><a name="[936]"></a>uiMenuSet_LS_Timer</STRONG> (ARM, 140 bytes, Stack size 48 bytes, ui_act_project.o(i.uiMenuSet_LS_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = uiMenuSet_LS_Timer &rArr; uiSetRfLightTimerRxToTx &rArr; rfiu_SetTXSchedule &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfLightTimerRxToTx
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
</UL>

<P><STRONG><a name="[949]"></a>uiMenuSet_Language</STRONG> (ARM, 88 bytes, Stack size 8 bytes, ui_act_project.o(i.uiMenuSet_Language), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[94a]"></a>uiMenuSet_MACAddr</STRONG> (ARM, 124 bytes, Stack size 16 bytes, ui_act_project.o(i.uiMenuSet_MACAddr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteNet
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[94b]"></a>uiMenuSet_MotionMask</STRONG> (ARM, 76 bytes, Stack size 8 bytes, ui_act_project.o(i.uiMenuSet_MotionMask), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[90a]"></a>uiMenuSet_MotionSensitivity</STRONG> (ARM, 168 bytes, Stack size 16 bytes, ui_act_project.o(i.uiMenuSet_MotionSensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = uiMenuSet_MotionSensitivity &rArr; uiSetRfMotionRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfMotionRxToTx
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMotionSensitivity
</UL>

<P><STRONG><a name="[93d]"></a>uiMenuSet_Motion_Section</STRONG> (ARM, 200 bytes, Stack size 16 bytes, ui_act_project.o(i.uiMenuSet_Motion_Section))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiMenuSet_Motion_Section &rArr;  uiMenuSet_Motion_Section (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Motion_Section
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Motion_Section
</UL>

<P><STRONG><a name="[932]"></a>uiMenuSet_Network</STRONG> (ARM, 276 bytes, Stack size 16 bytes, ui_act_project.o(i.uiMenuSet_Network))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = uiMenuSet_Network &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNetworkInfo
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Dynamic_ON
</UL>

<P><STRONG><a name="[92e]"></a>uiMenuSet_Overwrite</STRONG> (ARM, 344 bytes, Stack size 16 bytes, ui_act_project.o(i.uiMenuSet_Overwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiMenuSet_Overwrite &rArr;  uiMenuSet_Overwrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Overwrite
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Overwrite
</UL>

<P><STRONG><a name="[94c]"></a>uiMenuSet_P2PID</STRONG> (ARM, 72 bytes, Stack size 8 bytes, ui_act_project.o(i.uiMenuSet_P2PID), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteNet
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[94d]"></a>uiMenuSet_P2P_Password</STRONG> (ARM, 88 bytes, Stack size 8 bytes, ui_act_project.o(i.uiMenuSet_P2P_Password), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PPassword
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[94e]"></a>uiMenuSet_PIR</STRONG> (ARM, 144 bytes, Stack size 16 bytes, ui_act_project.o(i.uiMenuSet_PIR), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfPIRRxToTx
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[92d]"></a>uiMenuSet_REC_MODE_BY_CH</STRONG> (ARM, 316 bytes, Stack size 16 bytes, ui_act_project.o(i.uiMenuSet_REC_MODE_BY_CH))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiMenuSet_REC_MODE_BY_CH &rArr;  uiMenuSet_REC_MODE_BY_CH (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStopByChannel
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_REC_MODE_BY_CH
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_REC_MODE_BY_CH
</UL>

<P><STRONG><a name="[94f]"></a>uiMenuSet_RFID</STRONG> (ARM, 100 bytes, Stack size 16 bytes, ui_act_project.o(i.uiMenuSet_RFID), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRF
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[950]"></a>uiMenuSet_RFID_CODE</STRONG> (ARM, 108 bytes, Stack size 16 bytes, ui_act_project.o(i.uiMenuSet_RFID_CODE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRF
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[951]"></a>uiMenuSet_Section</STRONG> (ARM, 136 bytes, Stack size 8 bytes, ui_act_project.o(i.uiMenuSet_Section), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfSetVideoSectionTime
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[934]"></a>uiMenuSet_TVout_Format</STRONG> (ARM, 624 bytes, Stack size 48 bytes, ui_act_project.o(i.uiMenuSet_TVout_Format))
<BR><BR>[Stack]<UL><LI>Max Depth = 3936 + Unknown Stack Size
<LI>Call Chain = uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetTVOutXY
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetOutputMode
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduSwitchNTSCPAL
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
</UL>

<P><STRONG><a name="[900]"></a>uiMenuSet_TX_CameraOnOff</STRONG> (ARM, 352 bytes, Stack size 40 bytes, ui_act_project.o(i.uiMenuSet_TX_CameraOnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = uiMenuSet_TX_CameraOnOff &rArr; uiCaptureVideoStopByChannel &rArr; osdDrawVideoOn &rArr; uiOsdDrawCamera &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiuCamOnOffCmd
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStopByChannel
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCameraOnOff
</UL>

<P><STRONG><a name="[913]"></a>uiMenuSet_TX_CameraResolution</STRONG> (ARM, 508 bytes, Stack size 24 bytes, ui_act_project.o(i.uiMenuSet_TX_CameraResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = uiMenuSet_TX_CameraResolution &rArr;  uiMenuSet_TX_CameraResolution (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStopByChannel
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfResolutionRxToTx
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoByChannel
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_CameraResolution
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSynRfConfig
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_CameraResolution
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawResolution
</UL>

<P><STRONG><a name="[8fb]"></a>uiMenuSet_TX_VideoBrightness</STRONG> (ARM, 216 bytes, Stack size 64 bytes, ui_act_project.o(i.uiMenuSet_TX_VideoBrightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = uiMenuSet_TX_VideoBrightness &rArr; uiSetRfBrightnessRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfBrightnessRxToTx
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawBrightness
</UL>

<P><STRONG><a name="[954]"></a>uiMenuSet_TimestampType</STRONG> (ARM, 128 bytes, Stack size 16 bytes, ui_act_project.o(i.uiMenuSet_TimestampType), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfTimeStampTypeRxToTx
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[955]"></a>uiMenuSet_Timezone</STRONG> (ARM, 172 bytes, Stack size 16 bytes, ui_act_project.o(i.uiMenuSet_Timezone), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_TimeZone
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[956]"></a>uiMenuSet_UpgradeNet</STRONG> (ARM, 292 bytes, Stack size 16 bytes, ui_act_project.o(i.uiMenuSet_UpgradeNet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStop
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysback_Net_SetEvt
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[957]"></a>uiMenuSet_VideoFrameRate</STRONG> (ARM, 132 bytes, Stack size 8 bytes, ui_act_project.o(i.uiMenuSet_VideoFrameRate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpeg4SetVideoFrameRate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[958]"></a>uiMenuSet_VideoQuality</STRONG> (ARM, 120 bytes, Stack size 8 bytes, ui_act_project.o(i.uiMenuSet_VideoQuality), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpeg4SetVideoQuality
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[927]"></a>uiMenuTreeInit</STRONG> (ARM, 116 bytes, Stack size 8 bytes, ui_flow_project.o(i.uiMenuTreeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = uiMenuTreeInit &rArr; iduPlaybackMode &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackMode
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetTVOutXY
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetisuPanel
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysIDU_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
</UL>

<P><STRONG><a name="[776]"></a>uiOSDASCIIStringByColor</STRONG> (ARM, 312 bytes, Stack size 88 bytes, ui_osd.o(i.uiOSDASCIIStringByColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdGetStrLibByLanguage
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDPrintStr
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawSDCardFail
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawDelMsg
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawVideoTime
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFillEmpty
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFileNum
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_Draw_OSDString
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawFWVersion
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCardInfo
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiDrawNetworkInfo
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSchduleWarnMsg
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawStorageNReady
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackPlaySpeed
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInsertSD
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInsertHDD
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawConfirmSelect
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawUpgradeFW
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawProtect
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawNotHDD
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawHDDUninstallStatusMsg
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawHDDUninstallMsg
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuTitle
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuPage
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuFolder
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuFile
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuDoorSel
</UL>

<P><STRONG><a name="[775]"></a>uiOSDASCIIStringByColorCenter</STRONG> (ARM, 488 bytes, Stack size 96 bytes, ui_osd.o(i.uiOSDASCIIStringByColorCenter))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = uiOSDASCIIStringByColorCenter &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdGetStrLibByLanguage
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduOSDGetYStartEnd
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDPrintStr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawClearRemoteMsg
</UL>

<P><STRONG><a name="[78d]"></a>uiOSDASCIIStringByColorY</STRONG> (ARM, 364 bytes, Stack size 88 bytes, ui_osd.o(i.uiOSDASCIIStringByColorY))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = uiOSDASCIIStringByColorY &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdGetStrLibByLanguage
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDPrintStr
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPairInMenu
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPair
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLifeTimePerSec
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMotionPreview
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMotionMsg
</UL>

<P><STRONG><a name="[95b]"></a>uiOSDIcon</STRONG> (ARM, 300 bytes, Stack size 64 bytes, ui_osd.o(i.uiOSDIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdGetIconInfo
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uiOSDIconColor
</UL>
<BR>[Called By]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByY
</UL>

<P><STRONG><a name="[77b]"></a>uiOSDIconColorByXY</STRONG> (ARM, 84 bytes, Stack size 24 bytes, ui_osd.o(i.uiOSDIconColorByXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIcon
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawSDCardFail
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMemFull
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRemoteOn
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCameraBatteryLevel
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSDIcon
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlayIndicator
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlayIcon
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawISPStatus
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFillEmpty
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdVolumeControl
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawTalkBack
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadLightManual
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadCamreaAlarmManual
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackPlaySpeed
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLightManual
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInsertSD
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawConfirmSelect
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCamreaAlarmManual
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRecPreview
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawProtect
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMotionPreview
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawRemindDownload
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNetworkLink
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCamera
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAtenna
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAllPreviewIcon
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMenuPreview
</UL>

<P><STRONG><a name="[786]"></a>uiOSDIconColorByXYChColor</STRONG> (ARM, 232 bytes, Stack size 80 bytes, ui_osd.o(i.uiOSDIconColorByXYChColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = uiOSDIconColorByXYChColor &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdGetIconInfo
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uiOSDIconColor
</UL>
<BR>[Called By]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMemFull
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLoadIcon
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadLightManual
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadCamreaAlarmManual
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLightManual
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCamreaAlarmManual
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRecPreview
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMotionPreview
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNetworkLink
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCamera
</UL>

<P><STRONG><a name="[95c]"></a>uiOSDIconColorByY</STRONG> (ARM, 160 bytes, Stack size 48 bytes, ui_osd.o(i.uiOSDIconColorByY))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = uiOSDIconColorByY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdGetIconInfo
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIcon
</UL>
<BR>[Called By]<UL><LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuNoFile
</UL>

<P><STRONG><a name="[78a]"></a>uiOSDMultiLanguageStrByX</STRONG> (ARM, 252 bytes, Stack size 80 bytes, ui_osd.o(i.uiOSDMultiLanguageStrByX))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = uiOSDMultiLanguageStrByX &rArr; uiOsdGetStrLib &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdGetStrLib
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduOSDGetYStartEnd
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uiOSDDrawStr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMessage
</UL>

<P><STRONG><a name="[78b]"></a>uiOSDMultiLanguageStrByXY</STRONG> (ARM, 144 bytes, Stack size 80 bytes, ui_osd.o(i.uiOSDMultiLanguageStrByXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = uiOSDMultiLanguageStrByXY &rArr; uiOsdGetStrLib &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdGetStrLib
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uiOSDDrawStr
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMessage
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuTitle
</UL>

<P><STRONG><a name="[789]"></a>uiOSDMultiLanguageStrByY</STRONG> (ARM, 200 bytes, Stack size 64 bytes, ui_osd.o(i.uiOSDMultiLanguageStrByY))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = uiOSDMultiLanguageStrByY &rArr; uiOsdGetStrLib &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdGetStrLib
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uiOSDDrawStr
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMessage
</UL>

<P><STRONG><a name="[77c]"></a>uiOSDMultiLanguageStrCenter</STRONG> (ARM, 300 bytes, Stack size 72 bytes, ui_osd.o(i.uiOSDMultiLanguageStrCenter))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = uiOSDMultiLanguageStrCenter &rArr; uiOsdGetStrLib &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdGetStrLib
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduOSDGetYStartEnd
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uiOSDDrawStr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMessage
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFillEmpty
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_Draw_OSDString
</UL>

<P><STRONG><a name="[73a]"></a>uiOSDPreviewInit</STRONG> (ARM, 192 bytes, Stack size 24 bytes, ui_osd_project.o(i.uiOSDPreviewInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 3848 + Unknown Stack Size
<LI>Call Chain = uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDReset
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVOSDDisplay
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduOSDDisplay1
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadSwitchChannel
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiWaitMainInitReady
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOutputRedirection
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSdCardMode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[782]"></a>uiOsdDisable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ui_osd.o(i.uiOsdDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = uiOsdDisable &rArr; iduTVOSDDisable &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduOSDDisable
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVOSDDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawSetting
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLoadIcon
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawFWVersion
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCardInfo
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiDrawNetworkInfo
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSchduleWarnMsg
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawConfirmSelect
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawNotHDD
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawHDDUninstallStatusMsg
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdTest
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawRestoreDefaltSettings
</UL>

<P><STRONG><a name="[8e2]"></a>uiOsdDisableAll</STRONG> (ARM, 60 bytes, Stack size 8 bytes, ui_osd.o(i.uiOsdDisableAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = uiOsdDisableAll &rArr; iduTVOSDDisable &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVOSDDisable
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduOSDDisable_All
</UL>
<BR>[Called By]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlayback_Delete_File
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetGoToFormat
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawConfirmSelect
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuTitle
</UL>

<P><STRONG><a name="[95e]"></a>uiOsdDrawAlarmApp</STRONG> (ARM, 56 bytes, Stack size 0 bytes, ui_osd_project.o(i.uiOsdDrawAlarmApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawAlarmApp &rArr; uiOsdDrawAlarmIcon &rArr; uiOsdDrawQuadCamreaAlarmManual &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadCamreaAlarmManual
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCamreaAlarmManual
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAlarmIcon
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetAlarmOnOffAPP
</UL>

<P><STRONG><a name="[79b]"></a>uiOsdDrawAlarmIcon</STRONG> (ARM, 232 bytes, Stack size 16 bytes, ui_osd_project.o(i.uiOsdDrawAlarmIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawAlarmIcon &rArr; uiOsdDrawQuadCamreaAlarmManual &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadCamreaAlarmManual
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCamreaAlarmManual
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAlarmApp
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
</UL>

<P><STRONG><a name="[8b9]"></a>uiOsdDrawAllPreviewIcon</STRONG> (ARM, 484 bytes, Stack size 48 bytes, ui_osd_project.o(i.uiOsdDrawAllPreviewIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawAllPreviewIcon &rArr; osdDrawRemoteOn &rArr; uiOsdDrawNetworkLink &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMemFull
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRemoteOn
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSDIcon
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawTalkBack
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawStorageNReady
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadLightManual
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadCamreaAlarmManual
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRecPreview
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadVideoOn
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMotionPreview
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_network_status
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawRemindDownload
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNetworkLink
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCamera
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAtenna
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMenuPreview
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[95f]"></a>uiOsdDrawAtenna</STRONG> (ARM, 148 bytes, Stack size 24 bytes, ui_osd_project.o(i.uiOsdDrawAtenna))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawAtenna &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
</UL>
<BR>[Called By]<UL><LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawBitRate
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPair
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNoSignal
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAllPreviewIcon
</UL>

<P><STRONG><a name="[822]"></a>uiOsdDrawBattery</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ui_osd_project.o(i.uiOsdDrawBattery))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_Draw_Battery
</UL>

<P><STRONG><a name="[823]"></a>uiOsdDrawBitRate</STRONG> (ARM, 156 bytes, Stack size 16 bytes, ui_osd_project.o(i.uiOsdDrawBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawBitRate &rArr; uiOsdDrawAtenna &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAtenna
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_Draw_BitRate
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPair
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[8e8]"></a>uiOsdDrawBlackAll</STRONG> (ARM, 228 bytes, Stack size 40 bytes, ui_osd_project.o(i.uiOsdDrawBlackAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawBlackAll &rArr; uiMenuOSDReset &rArr; iduTVOSDDisable_All &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDReset
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSD_Black_Color_Bar
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadSwitchChannel
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
</UL>

<P><STRONG><a name="[798]"></a>uiOsdDrawCamera</STRONG> (ARM, 456 bytes, Stack size 56 bytes, ui_osd_project.o(i.uiOsdDrawCamera))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawCamera &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXYChColor
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawVideoOn
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawRecPerSec
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadVideoOn
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAllPreviewIcon
</UL>

<P><STRONG><a name="[773]"></a>uiOsdDrawCameraBatteryLevel</STRONG> (ARM, 792 bytes, Stack size 64 bytes, ui_osd_project.o(i.uiOsdDrawCameraBatteryLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawCameraBatteryLevel &rArr; H264_Decode_One_I_frame &rArr; H264DecodeLastFrame &rArr; Idu_ClearBuf &rArr; memset_hw_Word &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H264_Decode_One_I_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartBatteryCam
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysCheckBTCBatteryLevel
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBatteryCam_stopIfDone
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadNoSignal
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawCamLiveView
</UL>

<P><STRONG><a name="[885]"></a>uiOsdDrawCamreaAlarmManual</STRONG> (ARM, 376 bytes, Stack size 40 bytes, ui_osd_project.o(i.uiOsdDrawCamreaAlarmManual))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawCamreaAlarmManual &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXYChColor
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetCAStatus
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCAlarm
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckAlarmManualSwitchStatus
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAlarmApp
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAlarmIcon
</UL>

<P><STRONG><a name="[901]"></a>uiOsdDrawCardInfo</STRONG> (ARM, 664 bytes, Stack size 56 bytes, ui_osd_project.o(i.uiOsdDrawCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawCardInfo &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisable
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCardInfo
</UL>

<P><STRONG><a name="[8d0]"></a>uiOsdDrawConfirmSelect</STRONG> (ARM, 1312 bytes, Stack size 64 bytes, ui_osd_project.o(i.uiOsdDrawConfirmSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4464 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawConfirmSelect &rArr; uiFlowRunAction &rArr; uiFlowPlayback_Delete_File &rArr; uiOsdDrawPlaybackMenu &rArr; uiGraphDrawPlaybackList &rArr;  uiOsdDrawPlaybackMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearPKBuf
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisableAll
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisable
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackListMode
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
</UL>

<P><STRONG><a name="[8f8]"></a>uiOsdDrawFWVersion</STRONG> (ARM, 492 bytes, Stack size 152 bytes, ui_osd_project.o(i.uiOsdDrawFWVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawFWVersion &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisable
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawVersionInfo
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawAPPInfo
</UL>

<P><STRONG><a name="[824]"></a>uiOsdDrawFrameRate</STRONG> (ARM, 40 bytes, Stack size 16 bytes, ui_osd_project.o(i.uiOsdDrawFrameRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawFrameRate &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_Draw_FrameRate
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[780]"></a>uiOsdDrawInit</STRONG> (ARM, 140 bytes, Stack size 24 bytes, ui_osd_project.o(i.uiOsdDrawInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawInit &rArr; uiMenuOSDReset &rArr; iduTVOSDDisable_All &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDReset
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLoadIcon
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSchduleWarnMsg
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInsertHDD
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawNotHDD
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawHDDUninstallStatusMsg
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawHDDUninstallMsg
</UL>

<P><STRONG><a name="[8ef]"></a>uiOsdDrawInsertHDD</STRONG> (ARM, 188 bytes, Stack size 40 bytes, ui_osd_project.o(i.uiOsdDrawInsertHDD))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawInsertHDD &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
</UL>

<P><STRONG><a name="[7a4]"></a>uiOsdDrawInsertSD</STRONG> (ARM, 460 bytes, Stack size 48 bytes, ui_osd_project.o(i.uiOsdDrawInsertSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawInsertSD &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageSel
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoByChannel
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSdCardMode
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRunFormat
</UL>

<P><STRONG><a name="[8f0]"></a>uiOsdDrawLifeTimePerSec</STRONG> (ARM, 584 bytes, Stack size 88 bytes, ui_osd_project.o(i.uiOsdDrawLifeTimePerSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawLifeTimePerSec &rArr; RTC_Get_Time &rArr; RTC_Get_GMT_Time &rArr; Set_SD2068_RTC &rArr; i2cWrite_SD2068 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysForceWDTtoReboot
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorY
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
</UL>

<P><STRONG><a name="[961]"></a>uiOsdDrawLightApp</STRONG> (ARM, 56 bytes, Stack size 0 bytes, ui_osd_project.o(i.uiOsdDrawLightApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawLightApp &rArr; uiOsdDrawLightIcon &rArr; uiOsdDrawQuadLightManual &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadLightManual
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLightManual
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLightIcon
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetLightOnOffAPP
</UL>

<P><STRONG><a name="[79a]"></a>uiOsdDrawLightIcon</STRONG> (ARM, 216 bytes, Stack size 16 bytes, ui_osd_project.o(i.uiOsdDrawLightIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawLightIcon &rArr; uiOsdDrawQuadLightManual &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawQuadLightManual
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLightManual
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLightApp
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
</UL>

<P><STRONG><a name="[88b]"></a>uiOsdDrawLightManual</STRONG> (ARM, 368 bytes, Stack size 40 bytes, ui_osd_project.o(i.uiOsdDrawLightManual))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawLightManual &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXYChColor
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetLightStatus
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckLightManualSwitchStatus
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCAlarm
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLightApp
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLightIcon
</UL>

<P><STRONG><a name="[8fe]"></a>uiOsdDrawLoadIcon</STRONG> (ARM, 708 bytes, Stack size 96 bytes, ui_osd_project.o(i.uiOsdDrawLoadIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawLoadIcon &rArr; uiOSDIconColorByXYChColor &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXYChColor
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInit
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawCalendarFileLoad
</UL>

<P><STRONG><a name="[8d2]"></a>uiOsdDrawMaskArea</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ui_osd_project.o(i.uiOsdDrawMaskArea))
<BR><BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowMaskAreaMode
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEventHandler
</UL>

<P><STRONG><a name="[7a0]"></a>uiOsdDrawNetworkLink</STRONG> (ARM, 408 bytes, Stack size 72 bytes, ui_osd_project.o(i.uiOsdDrawNetworkLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawNetworkLink &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXYChColor
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_P2P_info
</UL>
<BR>[Called By]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRemoteOn
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyNETRunPerSec
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNetworkLinkUp
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAllPreviewIcon
</UL>

<P><STRONG><a name="[8f2]"></a>uiOsdDrawNetworkLinkUp</STRONG> (ARM, 40 bytes, Stack size 8 bytes, ui_osd_project.o(i.uiOsdDrawNetworkLinkUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawNetworkLinkUp &rArr; uiOsdDrawNetworkLink &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_network_status
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNetworkLink
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
</UL>

<P><STRONG><a name="[45e]"></a>uiOsdDrawNewFile</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ui_osd_project.o(i.uiOsdDrawNewFile))
<BR><BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCloseFile
</UL>

<P><STRONG><a name="[8ec]"></a>uiOsdDrawNoSignal</STRONG> (ARM, 324 bytes, Stack size 24 bytes, ui_osd_project.o(i.uiOsdDrawNoSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 3840 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawNoSignal &rArr; osdDrawPreviewIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDReset
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idu_ClearBuf
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAtenna
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRFStatus
</UL>

<P><STRONG><a name="[92a]"></a>uiOsdDrawPair</STRONG> (ARM, 684 bytes, Stack size 72 bytes, ui_osd_project.o(i.uiOsdDrawPair))
<BR><BR>[Stack]<UL><LI>Max Depth = 3888 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawPair &rArr; osdDrawPreviewIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_PAIR_Stop
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_PAIR_Linit
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDReset
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawBitRate
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idu_ClearBuf
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorY
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAtenna
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiKeyParse
</UL>

<P><STRONG><a name="[8ee]"></a>uiOsdDrawPairInMenu</STRONG> (ARM, 580 bytes, Stack size 88 bytes, ui_osd_project.o(i.uiOsdDrawPairInMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawPairInMenu &rArr; uiOSDASCIIStringByColorY &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearPKBuf
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_PAIR_Stop
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_PAIR_Linit
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorY
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduSetVideoBuf0Addr
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
</UL>

<P><STRONG><a name="[8dc]"></a>uiOsdDrawPlaybackMenu</STRONG> (ARM, 4720 bytes, Stack size 64 bytes, ui_osd_project.o(i.uiOsdDrawPlaybackMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 4320 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawPlaybackMenu &rArr; uiGraphDrawPlaybackList &rArr;  uiOsdDrawPlaybackMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanFileOnPlaybackDir
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFilePrev
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetPlaybackFileListHead
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearPKBuf
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetTotalDirCount
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDReset
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiReadVideoFile
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfFileInit
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlayIndicator
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlayIcon
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorCenter
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuTitle
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuPage
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuNoFile
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuFrame
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlayback_Delete_File
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackListMode
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuDoor
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawConfirmSelect
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawPlaybackList
</UL>

<P><STRONG><a name="[8dd]"></a>uiOsdDrawPlaybackMenuDoor</STRONG> (ARM, 276 bytes, Stack size 16 bytes, ui_osd_project.o(i.uiOsdDrawPlaybackMenuDoor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4336 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawPlaybackMenuDoor &rArr; uiOsdDrawPlaybackMenu &rArr; uiGraphDrawPlaybackList &rArr;  uiOsdDrawPlaybackMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuTitle
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuDoorSel
</UL>
<BR>[Called By]<UL><LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackListMode
</UL>

<P><STRONG><a name="[966]"></a>uiOsdDrawPlaybackMenuDoorSel</STRONG> (ARM, 104 bytes, Stack size 16 bytes, ui_osd_project.o(i.uiOsdDrawPlaybackMenuDoorSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawPlaybackMenuDoorSel &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
</UL>
<BR>[Called By]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuDoor
</UL>

<P><STRONG><a name="[72]"></a>uiOsdDrawPlaybackMenuFile</STRONG> (ARM, 600 bytes, Stack size 104 bytes, ui_osd_project.o(i.uiOsdDrawPlaybackMenuFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawPlaybackMenuFile &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_osd_project.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>uiOsdDrawPlaybackMenuFolder</STRONG> (ARM, 380 bytes, Stack size 72 bytes, ui_osd_project.o(i.uiOsdDrawPlaybackMenuFolder))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawPlaybackMenuFolder &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_osd_project.o(.data)
</UL>
<P><STRONG><a name="[963]"></a>uiOsdDrawPlaybackMenuFrame</STRONG> (ARM, 396 bytes, Stack size 64 bytes, ui_osd_project.o(i.uiOsdDrawPlaybackMenuFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawPlaybackMenuFrame &rArr; uiMenuOSDFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
</UL>

<P><STRONG><a name="[965]"></a>uiOsdDrawPlaybackMenuNoFile</STRONG> (ARM, 216 bytes, Stack size 32 bytes, ui_osd_project.o(i.uiOsdDrawPlaybackMenuNoFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawPlaybackMenuNoFile &rArr; osdDrawMessage &rArr; uiOSDMultiLanguageStrByXY &rArr; uiOsdGetStrLib &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMessage
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByY
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
</UL>

<P><STRONG><a name="[964]"></a>uiOsdDrawPlaybackMenuPage</STRONG> (ARM, 176 bytes, Stack size 48 bytes, ui_osd_project.o(i.uiOsdDrawPlaybackMenuPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawPlaybackMenuPage &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
</UL>

<P><STRONG><a name="[962]"></a>uiOsdDrawPlaybackMenuTitle</STRONG> (ARM, 496 bytes, Stack size 56 bytes, ui_osd_project.o(i.uiOsdDrawPlaybackMenuTitle))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawPlaybackMenuTitle &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDMultiLanguageStrByXY
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisableAll
</UL>
<BR>[Called By]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuDoor
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
</UL>

<P><STRONG><a name="[8df]"></a>uiOsdDrawPlaybackPlaySpeed</STRONG> (ARM, 344 bytes, Stack size 64 bytes, ui_osd_project.o(i.uiOsdDrawPlaybackPlaySpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawPlaybackPlaySpeed &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
</UL>

<P><STRONG><a name="[886]"></a>uiOsdDrawQuadCamreaAlarmManual</STRONG> (ARM, 588 bytes, Stack size 48 bytes, ui_osd_project.o(i.uiOsdDrawQuadCamreaAlarmManual))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawQuadCamreaAlarmManual &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXYChColor
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetCAStatus
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCAlarm
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckAlarmManualSwitchStatus
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAlarmApp
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAllPreviewIcon
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAlarmIcon
</UL>

<P><STRONG><a name="[88c]"></a>uiOsdDrawQuadLightManual</STRONG> (ARM, 580 bytes, Stack size 48 bytes, ui_osd_project.o(i.uiOsdDrawQuadLightManual))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawQuadLightManual &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXYChColor
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetLightStatus
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckLightManualSwitchStatus
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckBTCAlarm
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLightApp
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLightIcon
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAllPreviewIcon
</UL>

<P><STRONG><a name="[8ed]"></a>uiOsdDrawQuadNoSignal</STRONG> (ARM, 132 bytes, Stack size 32 bytes, ui_osd_project.o(i.uiOsdDrawQuadNoSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawQuadNoSignal &rArr; uiOsdDrawCameraBatteryLevel &rArr; H264_Decode_One_I_frame &rArr; H264DecodeLastFrame &rArr; Idu_ClearBuf &rArr; memset_hw_Word &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCameraBatteryLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRFStatus
</UL>

<P><STRONG><a name="[8f1]"></a>uiOsdDrawRecPerSec</STRONG> (ARM, 424 bytes, Stack size 32 bytes, ui_osd_project.o(i.uiOsdDrawRecPerSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawRecPerSec &rArr; osdDrawQuadVideoOn &rArr; uiOsdDrawCamera &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageStatus
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadVideoOn
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCamera
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
</UL>

<P><STRONG><a name="[2ae]"></a>uiOsdDrawRemindDownload</STRONG> (ARM, 388 bytes, Stack size 64 bytes, ui_osd_project.o(i.uiOsdDrawRemindDownload))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawRemindDownload &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawQuadIcon
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_fw_ver_net
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAllPreviewIcon
</UL>

<P><STRONG><a name="[944]"></a>uiOsdDrawRestoreDefaltSettings</STRONG> (ARM, 216 bytes, Stack size 24 bytes, ui_osd_project.o(i.uiOsdDrawRestoreDefaltSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawRestoreDefaltSettings &rArr; osdDrawMessage &rArr; uiOSDMultiLanguageStrByXY &rArr; uiOsdGetStrLib &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IduVideo_ClearPKBuf
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMessage
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Default
</UL>

<P><STRONG><a name="[44f]"></a>uiOsdDrawSDCardFULL</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ui_osd_project.o(i.uiOsdDrawSDCardFULL))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawSDCardFULL &rArr; osdDrawMemFull &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMemFull
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCreateFile
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
</UL>

<P><STRONG><a name="[45a]"></a>uiOsdDrawSDCardFail</STRONG> (ARM, 624 bytes, Stack size 56 bytes, ui_osd_project.o(i.uiOsdDrawSDCardFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawSDCardFail &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetStorageSel
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCloseFile
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelAsfCaptureVideo
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSdCardMode
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
</UL>

<P><STRONG><a name="[917]"></a>uiOsdDrawScheduledFrame</STRONG> (ARM, 560 bytes, Stack size 56 bytes, ui_osd_project.o(i.uiOsdDrawScheduledFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawScheduledFrame &rArr; uiMenuOSDFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawScheduledSetting
</UL>

<P><STRONG><a name="[904]"></a>uiOsdDrawSetting</STRONG> (ARM, 160 bytes, Stack size 24 bytes, ui_osd_project.o(i.uiOsdDrawSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawSetting &rArr; uiMenuOSDReset &rArr; iduTVOSDDisable_All &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDReset
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawDateTime
</UL>

<P><STRONG><a name="[8f3]"></a>uiOsdDrawStorageNReady</STRONG> (ARM, 264 bytes, Stack size 48 bytes, ui_osd_project.o(i.uiOsdDrawStorageNReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawStorageNReady &rArr; uiOSDASCIIStringByColor &rArr; uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiKeyParse
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSdCardMode
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAllPreviewIcon
</UL>

<P><STRONG><a name="[796]"></a>uiOsdDrawTalkBack</STRONG> (ARM, 240 bytes, Stack size 48 bytes, ui_osd_project.o(i.uiOsdDrawTalkBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = uiOsdDrawTalkBack &rArr; uiOSDIconColorByXY &rArr; uiOSDIcon &rArr; uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPreviewIcon
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAllPreviewIcon
</UL>

<P><STRONG><a name="[77a]"></a>uiOsdEnable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ui_osd.o(i.uiOsdEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = uiOsdEnable &rArr; iduTVOSDEnable &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVOSDEnable
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduOSDEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawPlaybackArea
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawISPNow
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDPreviewInit
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawISPStatus
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFillWait
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawFillEmpty
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawSetting
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawFWVersion
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawCardInfo
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiDrawNetworkInfo
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPairInMenu
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPair
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawNoSignal
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawInit
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawConfirmSelect
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawBlackAll
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawUpgradeFW
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawSystemReboot
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRunFormat
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawProtect
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdTest
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawRestoreDefaltSettings
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenuTitle
</UL>

<P><STRONG><a name="[832]"></a>uiOsdGetIconInfo</STRONG> (ARM, 192 bytes, Stack size 8 bytes, ui_osd_project.o(i.uiOsdGetIconInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = uiOsdGetIconInfo &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByY
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXYChColor
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIcon
</UL>

<P><STRONG><a name="[95d]"></a>uiOsdGetStrLib</STRONG> (ARM, 180 bytes, Stack size 16 bytes, ui_osd_project.o(i.uiOsdGetStrLib))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = uiOsdGetStrLib &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDMultiLanguageStrCenter
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDMultiLanguageStrByY
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDMultiLanguageStrByXY
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDMultiLanguageStrByX
</UL>

<P><STRONG><a name="[959]"></a>uiOsdGetStrLibByLanguage</STRONG> (ARM, 296 bytes, Stack size 16 bytes, ui_osd_project.o(i.uiOsdGetStrLibByLanguage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = uiOsdGetStrLibByLanguage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorY
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorCenter
</UL>

<P><STRONG><a name="[928]"></a>uiOsdIconInit</STRONG> (ARM, 168 bytes, Stack size 8 bytes, ui_osd_project.o(i.uiOsdIconInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = uiOsdIconInit
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
</UL>

<P><STRONG><a name="[8e4]"></a>uiOsdPlaybackFileFind</STRONG> (ARM, 48 bytes, Stack size 0 bytes, ui_osd_project.o(i.uiOsdPlaybackFileFind))
<BR><BR>[Called By]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlayback_Delete_File
</UL>

<P><STRONG><a name="[6c]"></a>uiOsdPlaybackFileNext</STRONG> (ARM, 512 bytes, Stack size 40 bytes, ui_osd_project.o(i.uiOsdPlaybackFileNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = uiOsdPlaybackFileNext &rArr; dcfScanFileOnPlaybackDir &rArr; dcfFileInit &rArr; dcfPlayDirScan &rArr; FS_ScanWholeDir &rArr; FS__fat_ScanWholedir &rArr; FSFATFreeFATLink &rArr; FSFATSetFSInfo &rArr; FS__lb_sin_write &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanFileOnPlaybackDir
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFileNext
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetPlaybackFileListTail
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetPlaybackFileListHead
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_osd_project.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>uiOsdPlaybackFilePrev</STRONG> (ARM, 504 bytes, Stack size 40 bytes, ui_osd_project.o(i.uiOsdPlaybackFilePrev))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = uiOsdPlaybackFilePrev &rArr; dcfScanFileOnPlaybackDir &rArr; dcfFileInit &rArr; dcfPlayDirScan &rArr; FS_ScanWholeDir &rArr; FS__fat_ScanWholedir &rArr; FSFATFreeFATLink &rArr; FSFATSetFSInfo &rArr; FS__lb_sin_write &rArr; FS__lb_write &rArr; FSLBSyncSinWriteCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfScanFileOnPlaybackDir
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfPlaybackFilePrev
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfGetPlaybackFileListHead
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_osd_project.o(.data)
</UL>
<P><STRONG><a name="[8a8]"></a>uiOsdTest</STRONG> (ARM, 2912 bytes, Stack size 88 bytes, ui_cmd_project.o(i.uiOsdTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = uiOsdTest &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDReset
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdEnable
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiClearOSDBuf
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisable
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[7aa]"></a>uiOsdVolumeControl</STRONG> (ARM, 752 bytes, Stack size 56 bytes, ui_osd_project.o(i.uiOsdVolumeControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4056 + Unknown Stack Size
<LI>Call Chain = uiOsdVolumeControl &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDIconColorByXY
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDFrame
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawVideoTime
</UL>

<P><STRONG><a name="[841]"></a>uiOutputRedirection</STRONG> (ARM, 672 bytes, Stack size 24 bytes, ui.o(i.uiOutputRedirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 3872 + Unknown Stack Size
<LI>Call Chain = uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackMode
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDPreviewInit
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetTVOutXY
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetOutputMode
</UL>

<P><STRONG><a name="[8ac]"></a>uiPWMTest</STRONG> (ARM, 852 bytes, Stack size 56 bytes, ui_cmd_project.o(i.uiPWMTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = uiPWMTest &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerPwmEnable
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerPwmCountEnable
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerPwmConfig
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerCountWrite
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerCountRead
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_function
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[8b5]"></a>uiPanelGammaSetting_X</STRONG> (ARM, 480 bytes, Stack size 24 bytes, ui_cmd_project.o(i.uiPanelGammaSetting_X))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = uiPanelGammaSetting_X &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[8b4]"></a>uiPanelGammaSetting_Y</STRONG> (ARM, 488 bytes, Stack size 24 bytes, ui_cmd_project.o(i.uiPanelGammaSetting_Y))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = uiPanelGammaSetting_Y &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[8e0]"></a>uiPlaybackStop</STRONG> (ARM, 268 bytes, Stack size 24 bytes, ui.o(i.uiPlaybackStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = uiPlaybackStop &rArr; Save_UI_Setting &rArr; spiWriteUIBackup &rArr; spiWrite &rArr; spi4ByteWrite &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asfPlaybackVideoStop
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiKeyParse
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSdCardMode
</UL>

<P><STRONG><a name="[968]"></a>uiRFPairTest</STRONG> (ARM, 56 bytes, Stack size 8 bytes, ui_cmd_project.o(i.uiRFPairTest), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_PAIR_Linit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[8a7]"></a>uiRXCMDTest</STRONG> (ARM, 352 bytes, Stack size 24 bytes, ui_cmd_project.o(i.uiRXCMDTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = uiRXCMDTest &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[804]"></a>uiReadNetworkIDFromFlash</STRONG> (ARM, 40 bytes, Stack size 8 bytes, ui.o(i.uiReadNetworkIDFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uiReadNetworkIDFromFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6_arm
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadNet
</UL>

<P><STRONG><a name="[806]"></a>uiReadRFIDFromFlash</STRONG> (ARM, 228 bytes, Stack size 16 bytes, ui.o(i.uiReadRFIDFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = uiReadRFIDFromFlash &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadRF_ID
</UL>

<P><STRONG><a name="[807]"></a>uiReadSettingFromFlash</STRONG> (ARM, 476 bytes, Stack size 40 bytes, ui_flow_project.o(i.uiReadSettingFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uiReadSettingFromFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadUIBackup
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadUI
</UL>

<P><STRONG><a name="[80a]"></a>uiReadVersionFromFlash</STRONG> (ARM, 96 bytes, Stack size 8 bytes, ui.o(i.uiReadVersionFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = uiReadVersionFromFlash &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadVersion
</UL>

<P><STRONG><a name="[8e1]"></a>uiReadVideoFile</STRONG> (ARM, 176 bytes, Stack size 16 bytes, ui.o(i.uiReadVideoFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = uiReadVideoFile &rArr; sysSetEvt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetEvt
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowPlaybackMode
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
</UL>

<P><STRONG><a name="[969]"></a>uiResetAlarmSetting</STRONG> (ARM, 260 bytes, Stack size 40 bytes, ui_flow_project.o(i.uiResetAlarmSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = uiResetAlarmSetting &rArr; uiSetRfLightTimerRxToTx &rArr; rfiu_SetTXSchedule &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfLightTimerRxToTx
</UL>
<BR>[Called By]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSynRfConfig
</UL>

<P><STRONG><a name="[96a]"></a>uiRfCreateDecTask</STRONG> (ARM, 268 bytes, Stack size 24 bytes, ui.o(i.uiRfCreateDecTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = uiRfCreateDecTask &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeChannel
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeAudio_QuadMode
</UL>

<P><STRONG><a name="[96b]"></a>uiRfSuspendDelDecTask</STRONG> (ARM, 288 bytes, Stack size 32 bytes, ui.o(i.uiRfSuspendDelDecTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = uiRfSuspendDelDecTask &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeChannel
</UL>

<P><STRONG><a name="[96c]"></a>uiRfSuspendDelDecTask_ALL</STRONG> (ARM, 292 bytes, Stack size 32 bytes, ui.o(i.uiRfSuspendDelDecTask_ALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = uiRfSuspendDelDecTask_ALL &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeAudio_QuadMode
</UL>

<P><STRONG><a name="[977]"></a>uiSaveScheduleTime</STRONG> (ARM, 188 bytes, Stack size 32 bytes, ui_flow_project.o(i.uiSaveScheduleTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uiSaveScheduleTime
</UL>
<BR>[Called By]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiWriteSettingToFlash
</UL>

<P><STRONG><a name="[694]"></a>uiSentKeyToUi</STRONG> (ARM, 116 bytes, Stack size 8 bytes, ui.o(i.uiSentKeyToUi))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = uiSentKeyToUi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowCheckTouchKey
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawVideoTime
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSentUiKeyTilOK
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSentMountSeq
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBack_Check_UI
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioIntHandler
</UL>

<P><STRONG><a name="[387]"></a>uiSetAlarmOnOffAPP</STRONG> (ARM, 80 bytes, Stack size 8 bytes, ui_flow_project.o(i.uiSetAlarmOnOffAPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 4008 + Unknown Stack Size
<LI>Call Chain = uiSetAlarmOnOffAPP &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawAlarmApp
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[388]"></a>uiSetAlarmStatusAPP</STRONG> (ARM, 152 bytes, Stack size 16 bytes, ui_flow_project.o(i.uiSetAlarmStatusAPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = uiSetAlarmStatusAPP &rArr; uiFlowSetCAStatus &rArr; uiSetRfManualLightingRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetCAStatus
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckAlarmManualSwitchStatus
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMAYONAlarmStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[4d0]"></a>uiSetDefaultSetting</STRONG> (ARM, 240 bytes, Stack size 8 bytes, ui_flow_project.o(i.uiSetDefaultSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = uiSetDefaultSetting &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSet_DefaultValue
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadUIBackup
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadUI
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiInit
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UI_Setting
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_Default
</UL>

<P><STRONG><a name="[41c]"></a>uiSetFileDoCommand</STRONG> (ARM, 712 bytes, Stack size 24 bytes, ui_setfile_project.o(i.uiSetFileDoCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 4024 + Unknown Stack Size
<LI>Call Chain = uiSetFileDoCommand &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSetParse
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSetProgram
</UL>

<P><STRONG><a name="[41e]"></a>uiSetFileInitFinish</STRONG> (ARM, 8 bytes, Stack size 0 bytes, ui_setfile_project.o(i.uiSetFileInitFinish))
<BR><BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSetProgram
</UL>

<P><STRONG><a name="[83c]"></a>uiSetGoToFormat</STRONG> (ARM, 192 bytes, Stack size 8 bytes, ui_flow_project.o(i.uiSetGoToFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 4176 + Unknown Stack Size
<LI>Call Chain = uiSetGoToFormat &rArr; uiGraphDrawMenu &rArr; uiGraphDrawStaticIP &rArr;  uiGraphDrawMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDisableAll
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGraphDrawMenu
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduMenuMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_IN
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSDCD_IN
</UL>

<P><STRONG><a name="[38c]"></a>uiSetLightOnOffAPP</STRONG> (ARM, 80 bytes, Stack size 8 bytes, ui_flow_project.o(i.uiSetLightOnOffAPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 4008 + Unknown Stack Size
<LI>Call Chain = uiSetLightOnOffAPP &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawLightApp
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[38d]"></a>uiSetLightStatusAPP</STRONG> (ARM, 152 bytes, Stack size 16 bytes, ui_flow_project.o(i.uiSetLightStatusAPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = uiSetLightStatusAPP &rArr; uiFlowSetLightStatus &rArr; uiSetRfManualLightingRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetLightStatus
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckLightManualSwitchStatus
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMAYONLightStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[8b8]"></a>uiSetMAC_To_Flash</STRONG> (ARM, 336 bytes, Stack size 56 bytes, ui_cmd_project.o(i.uiSetMAC_To_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = uiSetMAC_To_Flash &rArr; spiWriteNet &rArr; spiWrite &rArr; spi4ByteWrite &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteNet
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadData
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6_arm
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[38a]"></a>uiSetMotionStatusAPP</STRONG> (ARM, 80 bytes, Stack size 8 bytes, ui_flow_project.o(i.uiSetMotionStatusAPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 4008 + Unknown Stack Size
<LI>Call Chain = uiSetMotionStatusAPP &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[284]"></a>uiSetP2PImageLevel</STRONG> (ARM, 44 bytes, Stack size 8 bytes, ui.o(i.uiSetP2PImageLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = uiSetP2PImageLevel &rArr; uiSetP2PStatueToRF &rArr; uiSetRfResolutionRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawRemoteOn
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PStatueToRF
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Session_Status
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Listen
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Session_Status
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVServerStart
</UL>

<P><STRONG><a name="[398]"></a>uiSetP2PPassword</STRONG> (ARM, 100 bytes, Stack size 8 bytes, ui.o(i.uiSetP2PPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = uiSetP2PPassword &rArr; Save_UI_Setting &rArr; spiWriteUIBackup &rArr; spiWrite &rArr; spi4ByteWrite &rArr; marsDMAReq &rArr; marsDMAOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadP2PPassword
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_P2P_Password
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[96e]"></a>uiSetP2PStatueToRF</STRONG> (ARM, 864 bytes, Stack size 56 bytes, ui.o(i.uiSetP2PStatueToRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = uiSetP2PStatueToRF &rArr; uiSetRfResolutionRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVColorbar_onoff
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfResolutionRxToTx
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PImageLevel
</UL>

<P><STRONG><a name="[843]"></a>uiSetRfBrightnessRxToTx</STRONG> (ARM, 288 bytes, Stack size 48 bytes, ui.o(i.uiSetRfBrightnessRxToTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = uiSetRfBrightnessRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSet_Brightness
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_VideoBrightness
</UL>

<P><STRONG><a name="[8a4]"></a>uiSetRfChangeAudio_QuadMode</STRONG> (ARM, 536 bytes, Stack size 32 bytes, ui.o(i.uiSetRfChangeAudio_QuadMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = uiSetRfChangeAudio_QuadMode &rArr; rfiu_AudioRetONOFF_IIS &rArr; MicVol_FadeOut &rArr; WM8940_MicVol_FadeOut &rArr; i2cWrite_WM8940 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_AudioRetONOFF_IIS
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAClose
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfSuspendDelDecTask_ALL
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfCreateDecTask
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[8a3]"></a>uiSetRfChangeChannel</STRONG> (ARM, 3104 bytes, Stack size 48 bytes, ui.o(i.uiSetRfChangeChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = uiSetRfChangeChannel &rArr; uiSetRfDisplayMode &rArr; rfiu_SetRXOpMode_All &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_AudioRetONOFF_IIS
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetRXOpMode_1
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVColorbar_onoff
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackMode
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAClose
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfDisplayMode
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfSuspendDelDecTask
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfCreateDecTask
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idu_ClearBuf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunAction
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadSwitchChannel
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[8a6]"></a>uiSetRfChgPTZ_CH</STRONG> (ARM, 192 bytes, Stack size 0 bytes, ui.o(i.uiSetRfChgPTZ_CH))
<BR><BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[89c]"></a>uiSetRfDisplayMode</STRONG> (ARM, 1844 bytes, Stack size 48 bytes, ui.o(i.uiSetRfDisplayMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = uiSetRfDisplayMode &rArr; rfiu_SetRXOpMode_All &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetRXOpMode_All
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetRXOpMode_1
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduTVColorbar_onoff
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iduPlaybackMode
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAClose
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTV_Preview
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfSuspendDelDecTask_ALL
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfSuspendDelDecTask
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiRfCreateDecTask
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idu_ClearBuf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetupToPreview
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowQuadMode
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfChangeChannel
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckTXUpgradeFileName
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetGoToFormat
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowEnterMenuMode
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOsdDrawPlaybackMenu
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[931]"></a>uiSetRfFlickerRxToTx</STRONG> (ARM, 340 bytes, Stack size 56 bytes, ui.o(i.uiSetRfFlickerRxToTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = uiSetRfFlickerRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
</UL>

<P><STRONG><a name="[3c0]"></a>uiSetRfLightTimerRxToTx</STRONG> (ARM, 180 bytes, Stack size 48 bytes, ui.o(i.uiSetRfLightTimerRxToTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = uiSetRfLightTimerRxToTx &rArr; rfiu_SetTXSchedule &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_SetTXSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiResetAlarmSetting
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSyncLightTimer2LightInterval
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_LS_Timer
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_CameraAlarm_Timer
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[887]"></a>uiSetRfManualLightingRxToTx</STRONG> (ARM, 312 bytes, Stack size 40 bytes, ui.o(i.uiSetRfManualLightingRxToTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = uiSetRfManualLightingRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetLightStatus
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowSetCAStatus
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckLightManualSwitchStatus
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCheckAlarmManualSwitchStatus
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_LS_Status
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_LS_ONOFF
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_CameraAlarm_Status
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_CA_ONOFF
</UL>

<P><STRONG><a name="[844]"></a>uiSetRfMotionRxToTx</STRONG> (ARM, 348 bytes, Stack size 56 bytes, ui.o(i.uiSetRfMotionRxToTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = uiSetRfMotionRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSet_RecMode
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSet_MotionEnable
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_MotionSensitivity
</UL>

<P><STRONG><a name="[935]"></a>uiSetRfPIRRxToTx</STRONG> (ARM, 312 bytes, Stack size 48 bytes, ui.o(i.uiSetRfPIRRxToTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = uiSetRfPIRRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_PIR
</UL>

<P><STRONG><a name="[953]"></a>uiSetRfResolutionRxToTx</STRONG> (ARM, 1076 bytes, Stack size 56 bytes, ui.o(i.uiSetRfResolutionRxToTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = uiSetRfResolutionRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoStopByChannel
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoByChannel
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UI_Setting
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetP2PStatueToRF
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSynRfConfig
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_CameraResolution
</UL>

<P><STRONG><a name="[8a5]"></a>uiSetRfSwAudio_DualMode</STRONG> (ARM, 164 bytes, Stack size 8 bytes, ui.o(i.uiSetRfSwAudio_DualMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = uiSetRfSwAudio_DualMode &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RfSwAudio_DualMode
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[61]"></a>uiSetRfTimeRxToTx</STRONG> (ARM, 276 bytes, Stack size 72 bytes, ui.o(i.uiSetRfTimeRxToTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = uiSetRfTimeRxToTx &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSynRfConfig
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRunPerSec
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntpdate
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_DateTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[93c]"></a>uiSetRfTimeStampTypeRxToTx</STRONG> (ARM, 88 bytes, Stack size 8 bytes, ui.o(i.uiSetRfTimeStampTypeRxToTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = uiSetRfTimeStampTypeRxToTx &rArr; rfiu_UpdateTXOthersPara &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_UpdateTXOthersPara
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TimestampType
</UL>

<P><STRONG><a name="[952]"></a>uiSetTVOutXY</STRONG> (ARM, 256 bytes, Stack size 12 bytes, ui_flow_project.o(i.uiSetTVOutXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uiSetTVOutXY
</UL>
<BR>[Called By]<UL><LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuTreeInit
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOutputRedirection
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TVout_Format
</UL>

<P><STRONG><a name="[8f7]"></a>uiSetTalkOnOff</STRONG> (ARM, 124 bytes, Stack size 8 bytes, ui.o(i.uiSetTalkOnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = uiSetTalkOnOff &rArr; rfiu_AudioRetONOFF_IIS &rArr; MicVol_FadeOut &rArr; WM8940_MicVol_FadeOut &rArr; i2cWrite_WM8940 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_AudioRetONOFF_IIS
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowVideoMode
</UL>

<P><STRONG><a name="[96f]"></a>uiSetUID_To_Flash</STRONG> (ARM, 200 bytes, Stack size 32 bytes, ui_cmd_project.o(i.uiSetUID_To_Flash), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteNet
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadData
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[8a2]"></a>uiSetZoomMode</STRONG> (ARM, 360 bytes, Stack size 4 bytes, ui.o(i.uiSetZoomMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uiSetZoomMode
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[161]"></a>uiSubTask</STRONG> (ARM, 52 bytes, Stack size 8 bytes, ui.o(i.uiSubTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 4160 + Unknown Stack Size
<LI>Call Chain = uiSubTask &rArr; uiFlowRFStatus &rArr; uiCheckBTCSetting &rArr; uiCheckBTCRec &rArr; uiFlowSetPir &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRFStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(i.uiInit)
</UL>
<P><STRONG><a name="[81b]"></a>uiSynRfConfig</STRONG> (ARM, 776 bytes, Stack size 40 bytes, ui_flow_project.o(i.uiSynRfConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4040 + Unknown Stack Size
<LI>Call Chain = uiSynRfConfig &rArr; uiMenuAction &rArr; uiMenuSet_TVout_Format &rArr; sysSetOutputMode &rArr; uiOutputRedirection &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_RXCMD_Enc
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfResolutionRxToTx
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiResetAlarmSetting
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiGetP2PStatueToRF
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfTimeRxToTx
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_TX_CameraResolution
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiFlowRFStatus
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysBackLow_Syn_RF
</UL>

<P><STRONG><a name="[3bf]"></a>uiSyncLightTimer2LightInterval</STRONG> (ARM, 528 bytes, Stack size 64 bytes, ui_flow_project.o(i.uiSyncLightTimer2LightInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = uiSyncLightTimer2LightInterval &rArr; uiSetRfLightTimerRxToTx &rArr; rfiu_SetTXSchedule &rArr; rfiu_RXCMD_Enc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSetRfLightTimerRxToTx
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[971]"></a>uiTXCMDTest</STRONG> (ARM, 96 bytes, Stack size 16 bytes, ui_cmd_project.o(i.uiTXCMDTest), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfiu_TXCMD_Enc
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[160]"></a>uiTask</STRONG> (ARM, 232 bytes, Stack size 8 bytes, ui.o(i.uiTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536 + Unknown Stack Size
<LI>Call Chain = uiTask &rArr; uiKeyParse &rArr; uiEventHandler &rArr; uiFlowPlaybackListMode &rArr; uiOsdDrawConfirmSelect &rArr; uiFlowRunAction &rArr; uiFlowPlayback_Delete_File &rArr; uiOsdDrawPlaybackMenu &rArr; uiGraphDrawPlaybackList &rArr;  uiOsdDrawPlaybackMenu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiWaitMainInitReady
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiKeyParse
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(i.uiInit)
</UL>
<P><STRONG><a name="[973]"></a>uiTestAdc</STRONG> (ARM, 172 bytes, Stack size 0 bytes, ui_cmd_project.o(i.uiTestAdc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[8ab]"></a>uiTestGPIO</STRONG> (ARM, 2680 bytes, Stack size 48 bytes, ui_cmd_project.o(i.uiTestGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = uiTestGPIO &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetLevel
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioGetLevel
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioConfig
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioLvTrgIntCfg
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioIntConfig
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[8aa]"></a>uiTimeTest</STRONG> (ARM, 836 bytes, Stack size 88 bytes, ui_cmd_project.o(i.uiTimeTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = uiTimeTest &rArr; RTC_Set_Time &rArr; Set_SD2068_RTC &rArr; i2cWrite_SD2068 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcSetTmpCount
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcGetTmpCount
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time_With_TmpCnt
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCmdPareCmd
</UL>

<P><STRONG><a name="[976]"></a>uiTimerTest</STRONG> (ARM, 228 bytes, Stack size 16 bytes, ui_cmd_project.o(i.uiTimerTest), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerCountEnable
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>

<P><STRONG><a name="[972]"></a>uiWaitMainInitReady</STRONG> (ARM, 228 bytes, Stack size 40 bytes, ui_flow_project.o(i.uiWaitMainInitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 3888 + Unknown Stack Size
<LI>Call Chain = uiWaitMainInitReady &rArr; uiOSDPreviewInit &rArr; osdDrawQuadIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDPreviewInit
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiCaptureVideoByChannel
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiEnterMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiTask
</UL>

<P><STRONG><a name="[80f]"></a>uiWriteNetworkIDFromFlash</STRONG> (ARM, 36 bytes, Stack size 8 bytes, ui.o(i.uiWriteNetworkIDFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uiWriteNetworkIDFromFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6_arm
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteNet
</UL>

<P><STRONG><a name="[810]"></a>uiWriteRFIDFromFlash</STRONG> (ARM, 56 bytes, Stack size 8 bytes, ui.o(i.uiWriteRFIDFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uiWriteRFIDFromFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRF
</UL>

<P><STRONG><a name="[811]"></a>uiWriteSettingToFlash</STRONG> (ARM, 220 bytes, Stack size 16 bytes, ui_flow_project.o(i.uiWriteSettingToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uiWriteSettingToFlash &rArr; uiSaveScheduleTime
</UL>
<BR>[Calls]<UL><LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiSaveScheduleTime
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteUIBackup
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteUI
</UL>

<P><STRONG><a name="[978]"></a>ui_change_test</STRONG> (ARM, 168 bytes, Stack size 16 bytes, ui_cmd_project.o(i.ui_change_test), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH_Channel_write
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>

<P><STRONG><a name="[979]"></a>ui_contrast_test</STRONG> (ARM, 156 bytes, Stack size 16 bytes, ui_cmd_project.o(i.ui_contrast_test), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contrast_write
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contrast_read
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>

<P><STRONG><a name="[5d2]"></a>unregedit_client_from_avsession</STRONG> (ARM, 268 bytes, Stack size 24 bytes, tutk_av_sample.o(i.unregedit_client_from_avsession))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = unregedit_client_from_avsession &rArr; avServStop &rArr; _unInitAVInfo &rArr; tutk_block_FifoRelease &rArr; _BinaryTreeEmpty &rArr;  _BinaryTreeEmpty (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStop
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_p2pdisconnected
</UL>

<P><STRONG><a name="[97a]"></a>usbHostGetIntEvt</STRONG> (ARM, 112 bytes, Stack size 8 bytes, usb-transfer.o(i.usbHostGetIntEvt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[742]"></a>usbHostInit</STRONG> (ARM, 148 bytes, Stack size 8 bytes, usb-transfer.o(i.usbHostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = usbHostInit &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSB_enable
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_reset
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_hcd_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainTask
</UL>

<P><STRONG><a name="[fd]"></a>usbHostIntHandler</STRONG> (ARM, 372 bytes, Stack size 40 bytes, usb-transfer.o(i.usbHostIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = usbHostIntHandler &rArr; usbHostSetIntEvt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbHostSetIntEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main_intInit)
</UL>
<P><STRONG><a name="[7b0]"></a>usbHostSetIntEvt</STRONG> (ARM, 196 bytes, Stack size 8 bytes, usb-transfer.o(i.usbHostSetIntEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = usbHostSetIntEvt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_mass_scan_free_extend
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stop_remove
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_hub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_scan
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbHostIntHandler
</UL>

<P><STRONG><a name="[16d]"></a>usbHostTask</STRONG> (ARM, 164 bytes, Stack size 32 bytes, usb-transfer.o(i.usbHostTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = usbHostTask &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb-transfer.o(i.usbHostInit)
</UL>
<P><STRONG><a name="[97d]"></a>usbMscFsUnInitLuns</STRONG> (ARM, 48 bytes, Stack size 16 bytes, usbmscfs.o(i.usbMscFsUnInitLuns))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = usbMscFsUnInitLuns &rArr; OSSemDel &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>
<BR>[Called By]<UL><LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbMscUnInit
</UL>

<P><STRONG><a name="[97e]"></a>usbMscUnInit</STRONG> (ARM, 84 bytes, Stack size 16 bytes, usbmsc.o(i.usbMscUnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = usbMscUnInit &rArr; usbMscFsUnInitLuns &rArr; OSSemDel &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbMscFsUnInitLuns
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbReleaseDmaSource
</UL>
<BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbUninst
</UL>

<P><STRONG><a name="[97f]"></a>usbReleaseDmaSource</STRONG> (ARM, 24 bytes, Stack size 8 bytes, usbdev.o(i.usbReleaseDmaSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = usbReleaseDmaSource &rArr; marsDMACloseReleaseSource &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMACloseReleaseSource
</UL>
<BR>[Called By]<UL><LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbMscUnInit
</UL>

<P><STRONG><a name="[848]"></a>usbUninst</STRONG> (ARM, 240 bytes, Stack size 16 bytes, usb.o(i.usbUninst))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = usbUninst &rArr; usbMscUnInit &rArr; usbMscFsUnInitLuns &rArr; OSSemDel &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbMscUnInit
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUsbRemoved
</UL>

<P><STRONG><a name="[980]"></a>usb_alloc_new_device</STRONG> (ARM, 264 bytes, Stack size 16 bytes, usb-transfer.o(i.usb_alloc_new_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = usb_alloc_new_device &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_scan
</UL>

<P><STRONG><a name="[981]"></a>usb_bulk_msg</STRONG> (ARM, 152 bytes, Stack size 24 bytes, usb-transfer.o(i.usb_bulk_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = usb_bulk_msg &rArr; submit_bulk_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_mdelay
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;submit_bulk_msg
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_BBB_transport
</UL>

<P><STRONG><a name="[982]"></a>usb_clear_halt</STRONG> (ARM, 164 bytes, Stack size 40 bytes, usb-transfer.o(i.usb_clear_halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = usb_clear_halt &rArr; usb_control_msg &rArr; submit_control_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_control_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_BBB_reset
</UL>

<P><STRONG><a name="[697]"></a>usb_control_msg</STRONG> (ARM, 340 bytes, Stack size 64 bytes, usb-transfer.o(i.usb_control_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = usb_control_msg &rArr; submit_control_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;submit_control_msg
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_interface
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_halt
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_BBB_transport
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_BBB_reset
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scan
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_new_device
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_reset
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_event_handle
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_configure
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_port_feature
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mouse_hid_probe
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_keyboard_hid_probe
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_string_sub
</UL>

<P><STRONG><a name="[77]"></a>usb_dev_mass_scan_free</STRONG> (ARM, 8 bytes, Stack size 0 bytes, usb-transfer.o(i.usb_dev_mass_scan_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = usb_dev_mass_scan_free &rArr; sysGetDiskFree &rArr; dcfDriveInfo &rArr; FS_IoCtl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetDiskFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb-transfer.o(.data)
</UL>
<P><STRONG><a name="[846]"></a>usb_dev_mass_scan_free_extend</STRONG> (ARM, 8 bytes, Stack size 0 bytes, usb-transfer.o(i.usb_dev_mass_scan_free_extend))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = usb_dev_mass_scan_free_extend &rArr; usbHostSetIntEvt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbHostSetIntEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUSBCD_IN
</UL>

<P><STRONG><a name="[75]"></a>usb_dev_mount_seq</STRONG> (ARM, 24 bytes, Stack size 0 bytes, usb-transfer.o(i.usb_dev_mount_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = usb_dev_mount_seq &rArr; sysSentMountSeq &rArr; sysGetStoragePriority &rArr; sysGetStorageInserted &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSentMountSeq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb-transfer.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>usb_dev_unmount_seq</STRONG> (ARM, 40 bytes, Stack size 0 bytes, usb-transfer.o(i.usb_dev_unmount_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = usb_dev_unmount_seq &rArr; sysSentMountSeq &rArr; sysGetStoragePriority &rArr; sysGetStorageInserted &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSentMountSeq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb-transfer.o(.data)
</UL>
<P><STRONG><a name="[997]"></a>usb_disable_asynch</STRONG> (ARM, 32 bytes, Stack size 0 bytes, usb-transfer.o(i.usb_disable_asynch))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_write
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_read
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scan
</UL>

<P><STRONG><a name="[78]"></a>usb_end</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usb-transfer.o(i.usb_end))
<BR>[Address Reference Count : 1]<UL><LI> usb-transfer.o(.data)
</UL>
<P><STRONG><a name="[996]"></a>usb_get_dev_index</STRONG> (ARM, 36 bytes, Stack size 0 bytes, usb-transfer.o(i.usb_get_dev_index))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_write
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_read
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scan
</UL>

<P><STRONG><a name="[990]"></a>usb_hid_bit_format</STRONG> (ARM, 432 bytes, Stack size 8 bytes, usb-transfer.o(i.usb_hid_bit_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_hid_bit_format
</UL>
<BR>[Called By]<UL><LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_hid_format
</UL>

<P><STRONG><a name="[983]"></a>usb_hid_report_descriptor_handler</STRONG> (ARM, 672 bytes, Stack size 32 bytes, usb-transfer.o(i.usb_hid_report_descriptor_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb_hid_report_descriptor_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_hid_format
</UL>

<P><STRONG><a name="[74]"></a>usb_hub_connect_change</STRONG> (ARM, 60 bytes, Stack size 0 bytes, usb-transfer.o(i.usb_hub_connect_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = usb_hub_connect_change &rArr; hub_event_handle &rArr; usb_hub_port_connect_change &rArr; usb_new_device &rArr; usb_string &rArr; usb_string_sub &rArr; usb_control_msg &rArr; submit_control_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb-transfer.o(.data)
</UL>
<P><STRONG><a name="[698]"></a>usb_hub_port_connect_change</STRONG> (ARM, 688 bytes, Stack size 56 bytes, usb-hub.o(i.usb_hub_port_connect_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576 + Unknown Stack Size
<LI>Call Chain = usb_hub_port_connect_change &rArr; usb_new_device &rArr; usb_string &rArr; usb_string_sub &rArr; usb_control_msg &rArr; submit_control_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_new_device
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_control_msg
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_alloc_new_device
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_mdelay
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_reset
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_port_feature
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_event_handle
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_configure
</UL>

<P><STRONG><a name="[986]"></a>usb_hub_probe</STRONG> (ARM, 380 bytes, Stack size 16 bytes, usb-hub.o(i.usb_hub_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = usb_hub_probe &rArr; usb_hub_configure &rArr;  usb_hub_port_connect_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_qh_init
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_configure
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_new_device
</UL>

<P><STRONG><a name="[98f]"></a>usb_hub_reset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, usb-hub.o(i.usb_hub_reset))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_scan
</UL>

<P><STRONG><a name="[988]"></a>usb_keyboard_hid_probe</STRONG> (ARM, 412 bytes, Stack size 72 bytes, usb-transfer.o(i.usb_keyboard_hid_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = usb_keyboard_hid_probe &rArr; usb_control_msg &rArr; submit_control_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_control_msg
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_mdelay
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_qh_init
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_hid_format
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr2_10_arm
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_new_device
</UL>

<P><STRONG><a name="[98c]"></a>usb_lowlevel_init</STRONG> (ARM, 308 bytes, Stack size 16 bytes, ehci-hcd.o(i.usb_lowlevel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usb_lowlevel_init &rArr; ehci_mdelay
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_scan
</UL>

<P><STRONG><a name="[658]"></a>usb_maxpacket</STRONG> (ARM, 28 bytes, Stack size 0 bytes, usb-transfer.o(i.usb_maxpacket))
<BR><BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_storage_probe
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_submit_async
</UL>

<P><STRONG><a name="[98d]"></a>usb_mouse_hid_probe</STRONG> (ARM, 348 bytes, Stack size 48 bytes, usb-transfer.o(i.usb_mouse_hid_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = usb_mouse_hid_probe &rArr; usb_control_msg &rArr; submit_control_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_10_arm
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_control_msg
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_mdelay
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_qh_init
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_hid_format
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_new_device
</UL>

<P><STRONG><a name="[985]"></a>usb_new_device</STRONG> (ARM, 1568 bytes, Stack size 576 bytes, usb-transfer.o(i.usb_new_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = usb_new_device &rArr; usb_string &rArr; usb_string_sub &rArr; usb_control_msg &rArr; submit_control_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_control_msg
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_mdelay
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_probe
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_reset
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_string
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mouse_hid_probe
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_keyboard_hid_probe
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_scan
</UL>

<P><STRONG><a name="[73]"></a>usb_scan</STRONG> (ARM, 200 bytes, Stack size 40 bytes, usb-transfer.o(i.usb_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560 + Unknown Stack Size
<LI>Call Chain = usb_scan &rArr; usb_new_device &rArr; usb_string &rArr; usb_string_sub &rArr; usb_control_msg &rArr; submit_control_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSentUiKeyTilOK
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbHostSetIntEvt
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scan
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_info
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_new_device
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_alloc_new_device
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_reset
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_lowlevel_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb-transfer.o(.data)
</UL>
<P><STRONG><a name="[98a]"></a>usb_set_hid_format</STRONG> (ARM, 516 bytes, Stack size 64 bytes, usb-transfer.o(i.usb_set_hid_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usb_set_hid_format &rArr; usb_hid_report_descriptor_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_report_descriptor_handler
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hid_bit_format
</UL>
<BR>[Called By]<UL><LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mouse_hid_probe
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_keyboard_hid_probe
</UL>

<P><STRONG><a name="[991]"></a>usb_set_interface</STRONG> (ARM, 208 bytes, Stack size 32 bytes, usb-transfer.o(i.usb_set_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = usb_set_interface &rArr; usb_control_msg &rArr; submit_control_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_control_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_storage_probe
</UL>

<P><STRONG><a name="[92b]"></a>usb_stop_remove</STRONG> (ARM, 284 bytes, Stack size 72 bytes, usb_storage.o(i.usb_stop_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = usb_stop_remove &rArr; usbHostSetIntEvt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbHostSetIntEvt
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr1_8_arm
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_test_unit_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuAction
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuSet_HDDRemove
</UL>

<P><STRONG><a name="[173]"></a>usb_stor_BBB_transport</STRONG> (ARM, 704 bytes, Stack size 112 bytes, usb_storage.o(i.usb_stor_BBB_transport))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = usb_stor_BBB_transport &rArr; usb_stor_BBB_reset &rArr; usb_clear_halt &rArr; usb_control_msg &rArr; submit_control_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_bulk_msg
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_BBB_reset
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_control_msg
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_storage.o(i.usb_storage_probe)
</UL>
<P><STRONG><a name="[994]"></a>usb_stor_get_info</STRONG> (ARM, 596 bytes, Stack size 80 bytes, usb_storage.o(i.usb_stor_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = usb_stor_get_info &rArr; usb_test_unit_ready &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr1_8_arm
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_test_unit_ready
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scan
</UL>

<P><STRONG><a name="[69a]"></a>usb_stor_info</STRONG> (ARM, 76 bytes, Stack size 20 bytes, usb_storage.o(i.usb_stor_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_stor_info &rArr; dev_print
</UL>
<BR>[Calls]<UL><LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_print
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_event_handle
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_scan
</UL>

<P><STRONG><a name="[171]"></a>usb_stor_read</STRONG> (ARM, 604 bytes, Stack size 128 bytes, usb_storage.o(i.usb_stor_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = usb_stor_read
</UL>
<BR>[Calls]<UL><LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_dev_index
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_disable_asynch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_storage.o(i.usb_stor_scan)
</UL>
<P><STRONG><a name="[699]"></a>usb_stor_scan</STRONG> (ARM, 428 bytes, Stack size 64 bytes, usb_storage.o(i.usb_stor_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = usb_stor_scan &rArr; usb_storage_probe &rArr; usb_set_interface &rArr; usb_control_msg &rArr; submit_control_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_dev_index
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_disable_asynch
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_storage_probe
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_get_info
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_control_msg
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_event_handle
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_scan
</UL>

<P><STRONG><a name="[172]"></a>usb_stor_write</STRONG> (ARM, 628 bytes, Stack size 128 bytes, usb_storage.o(i.usb_stor_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = usb_stor_write &rArr; usb_test_unit_ready &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_dev_index
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_disable_asynch
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_test_unit_ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_storage.o(i.usb_stor_scan)
</UL>
<P><STRONG><a name="[998]"></a>usb_storage_probe</STRONG> (ARM, 564 bytes, Stack size 24 bytes, usb_storage.o(i.usb_storage_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = usb_storage_probe &rArr; usb_set_interface &rArr; usb_control_msg &rArr; submit_control_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_interface
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_maxpacket
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scan
</UL>

<P><STRONG><a name="[98e]"></a>usb_string</STRONG> (ARM, 260 bytes, Stack size 544 bytes, usb-transfer.o(i.usb_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = usb_string &rArr; usb_string_sub &rArr; usb_control_msg &rArr; submit_control_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_string_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_new_device
</UL>

<P><STRONG><a name="[18c]"></a>usbfsDevIoCtl</STRONG> (ARM, 156 bytes, Stack size 24 bytes, usb_storage.o(i.usbfsDevIoCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = usbfsDevIoCtl &rArr; DCF_GetDeviceIndex &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCF_GetDeviceIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(.constdata)
</UL>
<P><STRONG><a name="[189]"></a>usbfsDevMulRead</STRONG> (ARM, 204 bytes, Stack size 32 bytes, usb_storage.o(i.usbfsDevMulRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = usbfsDevMulRead &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(.constdata)
</UL>
<P><STRONG><a name="[18b]"></a>usbfsDevMulWrite</STRONG> (ARM, 204 bytes, Stack size 32 bytes, usb_storage.o(i.usbfsDevMulWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = usbfsDevMulWrite &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(.constdata)
</UL>
<P><STRONG><a name="[188]"></a>usbfsDevRead</STRONG> (ARM, 200 bytes, Stack size 32 bytes, usb_storage.o(i.usbfsDevRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = usbfsDevRead &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>usbfsDevStatus</STRONG> (ARM, 72 bytes, Stack size 8 bytes, usb_storage.o(i.usbfsDevStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = usbfsDevStatus &rArr; DCF_GetDeviceIndex &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCF_GetDeviceIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(.constdata)
</UL>
<P><STRONG><a name="[18a]"></a>usbfsDevWrite</STRONG> (ARM, 200 bytes, Stack size 32 bytes, usb_storage.o(i.usbfsDevWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = usbfsDevWrite &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(.constdata)
</UL>
<P><STRONG><a name="[99a]"></a>wavReadFile_PCM</STRONG> (ARM, 1036 bytes, Stack size 72 bytes, iis.o(i.wavReadFile_PCM))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = wavReadFile_PCM &rArr; dcfClose &rArr; FS_LB_Cache_Clean &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfRead
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAClose
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAReq
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMACheckReady
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSeek
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iis5SetPlayFormat
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IIS_WM8940_play
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInitDAC_Play
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavreadfile
</UL>

<P><STRONG><a name="[84b]"></a>wavRecVoice</STRONG> (ARM, 612 bytes, Stack size 16 bytes, iis.o(i.wavRecVoice))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = wavRecVoice &rArr; wavRecVoiceFile &rArr; dcfCreateNextFile &rArr; dcfCreateNextDir &rArr; dcfCheckDirExist &rArr; FS_OpenDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsDMAClose
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Sem
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoiceFile
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iisReset
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysVOICE_REC
</UL>

<P><STRONG><a name="[99b]"></a>wavRecVoiceFile</STRONG> (ARM, 1188 bytes, Stack size 128 bytes, iis.o(i.wavRecVoiceFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = wavRecVoiceFile &rArr; dcfCreateNextFile &rArr; dcfCreateNextDir &rArr; dcfCheckDirExist &rArr; FS_OpenDir &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfWrite
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSeek
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCreateNextFile
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfCloseFileByIdx
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Sem
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osdDrawMemFull
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavRecVoice
</UL>

<P><STRONG><a name="[99c]"></a>wavWriteVoiceData</STRONG> (ARM, 100 bytes, Stack size 16 bytes, iis.o(i.wavWriteVoiceData), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfWrite
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[837]"></a>wavreadfile</STRONG> (ARM, 300 bytes, Stack size 24 bytes, iis.o(i.wavreadfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = wavreadfile &rArr; wavReadFile_PCM &rArr; dcfClose &rArr; FS_LB_Cache_Clean &rArr; FSLBSyncAllCache &rArr; FS__lb_SD_WRretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfRead
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfOpen
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfClose
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcfSeek
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wavReadFile_PCM
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysReadFile
</UL>

<P><STRONG><a name="[82]"></a>_get_lc_ctype</STRONG> (ARM, 68 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[1e4]"></a>_get_lc_numeric</STRONG> (ARM, 68 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[1e6]"></a>_get_lc_time</STRONG> (ARM, 68 bytes, Stack size 8 bytes, lc_time_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_time &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_time_2
</UL>

<P><STRONG><a name="[521]"></a>__aeabi_dadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[99d]"></a>_dadd</STRONG> (ARM, 336 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[9a1]"></a>__fpl_dcheck_NaN1</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[9a7]"></a>__fpl_dcmp_Inf</STRONG> (ARM, 28 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[577]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[9a3]"></a>_ddiv</STRONG> (ARM, 584 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[65c]"></a>__aeabi_d2iz</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ue_v
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_se_v
</UL>

<P><STRONG><a name="[9a4]"></a>_dfix</STRONG> (ARM, 112 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[522]"></a>__aeabi_d2uiz</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
</UL>

<P><STRONG><a name="[9a5]"></a>_dfixu</STRONG> (ARM, 112 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[65a]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ue_v
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_se_v
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[a06]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[a07]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[a08]"></a>__aeabi_cdcmple</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[9a6]"></a>_dcmple</STRONG> (ARM, 148 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[9aa]"></a>__fpl_dcmple_InfNaN</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[520]"></a>__aeabi_dmul</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[9a8]"></a>_dmul</STRONG> (ARM, 364 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[9a0]"></a>__fpl_dnaninf</STRONG> (ARM, 184 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[99f]"></a>__fpl_dretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[7b5]"></a>__aeabi_cdrcmple</STRONG> (ARM, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[9a9]"></a>_drcmple</STRONG> (ARM, 140 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[7b4]"></a>__aeabi_drsub</STRONG> (ARM, 0 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[9ab]"></a>_drsb</STRONG> (ARM, 24 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[812]"></a>_dsqrt</STRONG> (ARM, 508 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[7b3]"></a>__aeabi_dsub</STRONG> (ARM, 0 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[9ad]"></a>_dsub</STRONG> (ARM, 568 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[51f]"></a>__aeabi_f2d</STRONG> (ARM, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
</UL>

<P><STRONG><a name="[9ae]"></a>_f2d</STRONG> (ARM, 100 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[5d0]"></a>__aeabi_fdiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avResendBufUsageRate
</UL>

<P><STRONG><a name="[9b0]"></a>_fdiv</STRONG> (ARM, 396 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[a09]"></a>__aeabi_i2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[a0a]"></a>_fflt</STRONG> (ARM, 92 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[9b3]"></a>__fflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffltu
</UL>

<P><STRONG><a name="[5cf]"></a>__aeabi_ui2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avResendBufUsageRate
</UL>

<P><STRONG><a name="[9b2]"></a>_ffltu</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fflt_normalise
</UL>

<P><STRONG><a name="[9af]"></a>__fpl_fnaninf</STRONG> (ARM, 160 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[9b1]"></a>__fpl_fretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[1c1]"></a>_printf_fp_dec</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[1c5]"></a>_printf_fp_hex</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[9a2]"></a>__fpl_return_NaN</STRONG> (ARM, 116 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[57b]"></a>__ARM_scalbn</STRONG> (ARM, 104 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[9b4]"></a>__fpl_cmpreturn</STRONG> (ARM, 60 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7c]"></a>Undefined_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vectors.o(Vect))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL>
<P><STRONG><a name="[7d]"></a>SWI_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vectors.o(Vect))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL>
<P><STRONG><a name="[7e]"></a>Prefetch_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vectors.o(Vect))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL>
<P><STRONG><a name="[7f]"></a>Abort_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, vectors.o(Vect))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(Vect)
</UL>
<P><STRONG><a name="[123]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rfiu.o(i.rfiu_Rx_Task_UnitX))
<BR>[Address Reference Count : 1]<UL><LI> rfiu.o(i.rfiu_Rx_Task_UnitX)
</UL>
<P><STRONG><a name="[125]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, spiapi.o(i.spiAddressLocate))
<BR>[Address Reference Count : 1]<UL><LI> spiapi.o(i.spiAddressLocate)
</UL>
<P><STRONG><a name="[126]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, spi_wbd_eon.o(i.spiIdentification))
<BR>[Address Reference Count : 1]<UL><LI> spi_wbd_eon.o(i.spiIdentification)
</UL>
<P><STRONG><a name="[127]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, spi_wbd_eon.o(i.spiIdentification))
<BR>[Address Reference Count : 1]<UL><LI> spi_wbd_eon.o(i.spiIdentification)
</UL>
<P><STRONG><a name="[128]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, spi_wbd_eon.o(i.spiIdentification))
<BR>[Address Reference Count : 1]<UL><LI> spi_wbd_eon.o(i.spiIdentification)
</UL>
<P><STRONG><a name="[129]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, spi_wbd_eon.o(i.spiSemProcess))
<BR>[Address Reference Count : 1]<UL><LI> spi_wbd_eon.o(i.spiSemProcess)
</UL>
<P><STRONG><a name="[12a]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, spi_wbd_eon.o(i.spiSemProcess))
<BR>[Address Reference Count : 1]<UL><LI> spi_wbd_eon.o(i.spiSemProcess)
</UL>
<P><STRONG><a name="[130]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_project.o(i.sysProjectSDCD_IN))
<BR>[Address Reference Count : 1]<UL><LI> sys_project.o(i.sysProjectSDCD_IN)
</UL>
<P><STRONG><a name="[d2]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, exif.o(i.exifFileParse))
<BR>[Address Reference Count : 1]<UL><LI> exif.o(i.exifFileParse)
</UL>
<P><STRONG><a name="[d3]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, exif.o(i.exifFileParse))
<BR>[Address Reference Count : 1]<UL><LI> exif.o(i.exifFileParse)
</UL>
<P><STRONG><a name="[d4]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, exif.o(i.exifIfdParse))
<BR>[Address Reference Count : 1]<UL><LI> exif.o(i.exifIfdParse)
</UL>
<P><STRONG><a name="[d5]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, exif.o(i.exifIfdTag))
<BR>[Address Reference Count : 1]<UL><LI> exif.o(i.exifIfdTag)
</UL>
<P><STRONG><a name="[d6]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, exif.o(i.exifIfdTag))
<BR>[Address Reference Count : 1]<UL><LI> exif.o(i.exifIfdTag)
</UL>
<P><STRONG><a name="[cb]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dcf.o(i.dcfGetNewFileTime))
<BR>[Address Reference Count : 1]<UL><LI> dcf.o(i.dcfGetNewFileTime)
</UL>
<P><STRONG><a name="[14b]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui.o(i.uiClearFfQuadBuf))
<BR>[Address Reference Count : 1]<UL><LI> ui.o(i.uiClearFfQuadBuf)
</UL>
<P><STRONG><a name="[166]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui.o(i.uiSetP2PStatueToRF))
<BR>[Address Reference Count : 1]<UL><LI> ui.o(i.uiSetP2PStatueToRF)
</UL>
<P><STRONG><a name="[167]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui.o(i.uiSetRfChangeAudio_QuadMode))
<BR>[Address Reference Count : 1]<UL><LI> ui.o(i.uiSetRfChangeAudio_QuadMode)
</UL>
<P><STRONG><a name="[168]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui.o(i.uiSetRfChangeChannel))
<BR>[Address Reference Count : 1]<UL><LI> ui.o(i.uiSetRfChangeChannel)
</UL>
<P><STRONG><a name="[169]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui.o(i.uiSetRfChgPTZ_CH))
<BR>[Address Reference Count : 1]<UL><LI> ui.o(i.uiSetRfChgPTZ_CH)
</UL>
<P><STRONG><a name="[16a]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui.o(i.uiSetRfDisplayMode))
<BR>[Address Reference Count : 1]<UL><LI> ui.o(i.uiSetRfDisplayMode)
</UL>
<P><STRONG><a name="[16b]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui.o(i.uiSetRfResolutionRxToTx))
<BR>[Address Reference Count : 1]<UL><LI> ui.o(i.uiSetRfResolutionRxToTx)
</UL>
<P><STRONG><a name="[14c]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_flow_project.o(i.uiEventHandler))
<BR>[Address Reference Count : 1]<UL><LI> ui_flow_project.o(i.uiEventHandler)
</UL>
<P><STRONG><a name="[14d]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_flow_project.o(i.uiFlowPlaybackListMode))
<BR>[Address Reference Count : 1]<UL><LI> ui_flow_project.o(i.uiFlowPlaybackListMode)
</UL>
<P><STRONG><a name="[14e]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_flow_project.o(i.uiFlowPlaybackMode))
<BR>[Address Reference Count : 1]<UL><LI> ui_flow_project.o(i.uiFlowPlaybackMode)
</UL>
<P><STRONG><a name="[14f]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_flow_project.o(i.uiFlowQuadMode))
<BR>[Address Reference Count : 1]<UL><LI> ui_flow_project.o(i.uiFlowQuadMode)
</UL>
<P><STRONG><a name="[150]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_flow_project.o(i.uiFlowSdCardMode))
<BR>[Address Reference Count : 1]<UL><LI> ui_flow_project.o(i.uiFlowSdCardMode)
</UL>
<P><STRONG><a name="[151]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_flow_project.o(i.uiFlowVideoMode))
<BR>[Address Reference Count : 1]<UL><LI> ui_flow_project.o(i.uiFlowVideoMode)
</UL>
<P><STRONG><a name="[162]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_flow_project.o(i.uiKeyParse))
<BR>[Address Reference Count : 1]<UL><LI> ui_flow_project.o(i.uiKeyParse)
</UL>
<P><STRONG><a name="[152]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_graph_project.o(i.uiGraphDrawBrightness))
<BR>[Address Reference Count : 1]<UL><LI> ui_graph_project.o(i.uiGraphDrawBrightness)
</UL>
<P><STRONG><a name="[153]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_graph_project.o(i.uiGraphDrawCameraAlarmOnOff))
<BR>[Address Reference Count : 1]<UL><LI> ui_graph_project.o(i.uiGraphDrawCameraAlarmOnOff)
</UL>
<P><STRONG><a name="[154]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_graph_project.o(i.uiGraphDrawCameraOnOff))
<BR>[Address Reference Count : 1]<UL><LI> ui_graph_project.o(i.uiGraphDrawCameraOnOff)
</UL>
<P><STRONG><a name="[155]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_graph_project.o(i.uiGraphDrawKeypadGraph))
<BR>[Address Reference Count : 1]<UL><LI> ui_graph_project.o(i.uiGraphDrawKeypadGraph)
</UL>
<P><STRONG><a name="[156]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_graph_project.o(i.uiGraphDrawMotionSensitivity))
<BR>[Address Reference Count : 1]<UL><LI> ui_graph_project.o(i.uiGraphDrawMotionSensitivity)
</UL>
<P><STRONG><a name="[157]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_graph_project.o(i.uiGraphDrawRECMode))
<BR>[Address Reference Count : 1]<UL><LI> ui_graph_project.o(i.uiGraphDrawRECMode)
</UL>
<P><STRONG><a name="[158]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_graph_project.o(i.uiGraphDrawResolution))
<BR>[Address Reference Count : 1]<UL><LI> ui_graph_project.o(i.uiGraphDrawResolution)
</UL>
<P><STRONG><a name="[159]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_graph_project.o(i.uiGraphDrawScheduled))
<BR>[Address Reference Count : 1]<UL><LI> ui_graph_project.o(i.uiGraphDrawScheduled)
</UL>
<P><STRONG><a name="[15a]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_graph_project.o(i.uiGraphDrawScheduledSetting))
<BR>[Address Reference Count : 1]<UL><LI> ui_graph_project.o(i.uiGraphDrawScheduledSetting)
</UL>
<P><STRONG><a name="[15b]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_graph_project.o(i.uiGraphDrawSelectDateTime))
<BR>[Address Reference Count : 1]<UL><LI> ui_graph_project.o(i.uiGraphDrawSelectDateTime)
</UL>
<P><STRONG><a name="[15c]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_graph_project.o(i.uiGraphDrawSelectDateTime))
<BR>[Address Reference Count : 1]<UL><LI> ui_graph_project.o(i.uiGraphDrawSelectDateTime)
</UL>
<P><STRONG><a name="[15d]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_graph_project.o(i.uiGraphDrawSelectDateTime))
<BR>[Address Reference Count : 1]<UL><LI> ui_graph_project.o(i.uiGraphDrawSelectDateTime)
</UL>
<P><STRONG><a name="[15e]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_graph_project.o(i.uiGraphDrawTimeGraph))
<BR>[Address Reference Count : 1]<UL><LI> ui_graph_project.o(i.uiGraphDrawTimeGraph)
</UL>
<P><STRONG><a name="[15f]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_graph_project.o(i.uiGraphDrawTimezone))
<BR>[Address Reference Count : 1]<UL><LI> ui_graph_project.o(i.uiGraphDrawTimezone)
</UL>
<P><STRONG><a name="[598]"></a>_uiOSDDrawStr</STRONG> (ARM, 212 bytes, Stack size 72 bytes, ui_osd.o(i._uiOSDDrawStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _uiOSDDrawStr &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiMenuOSDPrintStr
</UL>
<BR>[Called By]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDMultiLanguageStrCenter
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDMultiLanguageStrByY
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDMultiLanguageStrByXY
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDMultiLanguageStrByX
</UL>

<P><STRONG><a name="[599]"></a>uiMenuOSDPrintStr</STRONG> (ARM, 344 bytes, Stack size 40 bytes, ui_osd.o(i.uiMenuOSDPrintStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uiMenuOSDPrintStr
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColor
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorY
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uiOSDDrawStr
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uiOSDASCIIStringByColorCenter
</UL>

<P><STRONG><a name="[164]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_osd_project.o(i.uiOsdDrawPlaybackMenuDoor))
<BR>[Address Reference Count : 1]<UL><LI> ui_osd_project.o(i.uiOsdDrawPlaybackMenuDoor)
</UL>
<P><STRONG><a name="[165]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_osd_project.o(i.uiOsdDrawPlaybackMenuTitle))
<BR>[Address Reference Count : 1]<UL><LI> ui_osd_project.o(i.uiOsdDrawPlaybackMenuTitle)
</UL>
<P><STRONG><a name="[163]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_act_project.o(i.uiMenuAction))
<BR>[Address Reference Count : 1]<UL><LI> ui_act_project.o(i.uiMenuAction)
</UL>
<P><STRONG><a name="[62d]"></a>dhcp_bind</STRONG> (ARM, 612 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = dhcp_bind &rArr; autoip_stop &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_stop
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[626]"></a>dhcp_create_msg</STRONG> (ARM, 1308 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_create_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Random
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[62c]"></a>dhcp_delete_msg</STRONG> (ARM, 316 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_delete_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[62f]"></a>dhcp_discover</STRONG> (ARM, 408 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = dhcp_discover &rArr; autoip_start &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[638]"></a>dhcp_handle_ack</STRONG> (ARM, 272 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[627]"></a>dhcp_option</STRONG> (ARM, 172 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dhcp_option &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[628]"></a>dhcp_option_long</STRONG> (ARM, 288 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dhcp_option_long &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
</UL>

<P><STRONG><a name="[630]"></a>dhcp_option_short</STRONG> (ARM, 100 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dhcp_option_short &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[629]"></a>dhcp_option_trailer</STRONG> (ARM, 396 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_trailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dhcp_option_trailer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[63a]"></a>dhcp_parse_reply</STRONG> (ARM, 1508 bytes, Stack size 64 bytes, dhcp.o(i.dhcp_parse_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_10_arm
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[637]"></a>dhcp_reboot</STRONG> (ARM, 380 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[cd]"></a>dhcp_recv</STRONG> (ARM, 756 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = dhcp_recv &rArr; dhcp_discover &rArr; autoip_start &rArr; netif_set_addr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(i.dhcp_start)
</UL>
<P><STRONG><a name="[634]"></a>dhcp_select</STRONG> (ARM, 444 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = dhcp_select &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[64f]"></a>do_memp_free_pool</STRONG> (ARM, 340 bytes, Stack size 144 bytes, memp.o(i.do_memp_free_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[650]"></a>do_memp_malloc_pool_fn</STRONG> (ARM, 480 bytes, Stack size 152 bytes, memp.o(i.do_memp_malloc_pool_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>

<P><STRONG><a name="[11c]"></a>netif_loop_output_ipv4</STRONG> (ARM, 4 bytes, Stack size 0 bytes, netif.o(i.netif_loop_output_ipv4))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = netif_loop_output_ipv4 &rArr; netif_loop_output &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_loop_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netif.o(i.netif_loopif_init)
</UL>
<P><STRONG><a name="[76c]"></a>netif_loopif_init</STRONG> (ARM, 32 bytes, Stack size 0 bytes, netif.o(i.netif_loopif_init))
<BR><BR>[Called By]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
</UL>

<P><STRONG><a name="[11d]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, pbuf.o(i.pbuf_alloc))
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(i.pbuf_alloc)
</UL>
<P><STRONG><a name="[11f]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, pbuf.o(i.pbuf_alloced_custom))
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(i.pbuf_alloced_custom)
</UL>
<P><STRONG><a name="[11e]"></a>pbuf_free_ooseq_callback</STRONG> (ARM, 80 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_free_ooseq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = pbuf_free_ooseq_callback &rArr; tcp_segs_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(i.pbuf_alloc)
</UL>
<P><STRONG><a name="[7ad]"></a>pbuf_header_impl</STRONG> (ARM, 356 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_header_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = pbuf_header_impl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>

<P><STRONG><a name="[136]"></a>tcp_accept_null</STRONG> (ARM, 24 bytes, Stack size 8 bytes, tcp.o(i.tcp_accept_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcp_accept_null &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_listen_with_backlog_and_err)
</UL>
<P><STRONG><a name="[858]"></a>tcp_close_shutdown</STRONG> (ARM, 880 bytes, Stack size 32 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_trigger_input_pcb_close
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[865]"></a>tcp_parseopt</STRONG> (ARM, 508 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[866]"></a>tcp_process</STRONG> (ARM, 1860 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[137]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, tcp_in.o(i.tcp_process))
<BR>[Address Reference Count : 1]<UL><LI> tcp_in.o(i.tcp_process)
</UL>
<P><STRONG><a name="[86b]"></a>tcp_receive</STRONG> (ARM, 5340 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[85d]"></a>tcp_create_segment</STRONG> (ARM, 384 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[869]"></a>tcp_output_alloc_header</STRONG> (ARM, 352 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>

<P><STRONG><a name="[139]"></a>tcpip_thread</STRONG> (ARM, 428 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = tcpip_thread &rArr; sys_timeout_debug &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_init)
</UL>
<P><STRONG><a name="[13d]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, tcpip.o(i.tcpip_thread))
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_thread)
</UL>
<P><STRONG><a name="[76a]"></a>netconn_recv_data</STRONG> (ARM, 732 bytes, Stack size 72 bytes, api_lib.o(i.netconn_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = netconn_recv_data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
</UL>

<P><STRONG><a name="[e9]"></a>accept_function</STRONG> (ARM, 412 bytes, Stack size 24 bytes, api_msg.o(i.accept_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = accept_function &rArr; netconn_alloc &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.lwip_netconn_do_listen)
</UL>
<P><STRONG><a name="[c4]"></a>err_tcp</STRONG> (ARM, 620 bytes, Stack size 24 bytes, api_msg.o(i.err_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = err_tcp &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 5]<UL><LI> api_msg.o(i.lwip_netconn_do_connect)
<LI> api_msg.o(i.lwip_netconn_do_connected)
<LI> api_msg.o(i.lwip_netconn_do_newconn)
<LI> api_msg.o(i.accept_function)
<LI> api_msg.o(i.lwip_netconn_do_close_internal)
</UL>
<P><STRONG><a name="[70d]"></a>lwip_netconn_do_close_internal</STRONG> (ARM, 1064 bytes, Stack size 40 bytes, api_msg.o(i.lwip_netconn_do_close_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</UL>

<P><STRONG><a name="[e7]"></a>lwip_netconn_do_connected</STRONG> (ARM, 576 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_connected &rArr; tcp_sent &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.lwip_netconn_do_connect)
</UL>
<P><STRONG><a name="[e8]"></a>lwip_netconn_do_dns_found</STRONG> (ARM, 48 bytes, Stack size 0 bytes, api_msg.o(i.lwip_netconn_do_dns_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_dns_found &rArr; sys_sem_signal &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.lwip_netconn_do_gethostbyname)
</UL>
<P><STRONG><a name="[71b]"></a>lwip_netconn_do_writemore</STRONG> (ARM, 1124 bytes, Stack size 40 bytes, api_msg.o(i.lwip_netconn_do_writemore))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = lwip_netconn_do_writemore &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
</UL>

<P><STRONG><a name="[70c]"></a>netconn_drain</STRONG> (ARM, 352 bytes, Stack size 24 bytes, api_msg.o(i.netconn_drain))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</UL>

<P><STRONG><a name="[c3]"></a>poll_tcp</STRONG> (ARM, 264 bytes, Stack size 8 bytes, api_msg.o(i.poll_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = poll_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 5]<UL><LI> api_msg.o(i.lwip_netconn_do_connect)
<LI> api_msg.o(i.lwip_netconn_do_connected)
<LI> api_msg.o(i.lwip_netconn_do_newconn)
<LI> api_msg.o(i.accept_function)
<LI> api_msg.o(i.lwip_netconn_do_close_internal)
</UL>
<P><STRONG><a name="[c1]"></a>recv_tcp</STRONG> (ARM, 448 bytes, Stack size 16 bytes, api_msg.o(i.recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 4]<UL><LI> api_msg.o(i.lwip_netconn_do_connect)
<LI> api_msg.o(i.lwip_netconn_do_connected)
<LI> api_msg.o(i.lwip_netconn_do_newconn)
<LI> api_msg.o(i.accept_function)
</UL>
<P><STRONG><a name="[ea]"></a>recv_udp</STRONG> (ARM, 480 bytes, Stack size 24 bytes, api_msg.o(i.recv_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.lwip_netconn_do_newconn)
</UL>
<P><STRONG><a name="[c2]"></a>sent_tcp</STRONG> (ARM, 268 bytes, Stack size 16 bytes, api_msg.o(i.sent_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = sent_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 5]<UL><LI> api_msg.o(i.lwip_netconn_do_connect)
<LI> api_msg.o(i.lwip_netconn_do_connected)
<LI> api_msg.o(i.lwip_netconn_do_newconn)
<LI> api_msg.o(i.accept_function)
<LI> api_msg.o(i.lwip_netconn_do_close_internal)
</UL>
<P><STRONG><a name="[e5]"></a>event_callback</STRONG> (ARM, 600 bytes, Stack size 40 bytes, sockets.o(i.event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = event_callback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sockets.o(i.lwip_accept)
<LI> sockets.o(i.lwip_socket)
</UL>
<P><STRONG><a name="[d1]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sockets.o(i.event_callback))
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.event_callback)
</UL>
<P><STRONG><a name="[e6]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sockets.o(i.lwip_getsockopt))
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.lwip_getsockopt)
</UL>
<P><STRONG><a name="[720]"></a>lwip_selscan</STRONG> (ARM, 676 bytes, Stack size 104 bytes, sockets.o(i.lwip_selscan))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = lwip_selscan &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[eb]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sockets.o(i.lwip_setsockopt))
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.lwip_setsockopt)
</UL>
<P><STRONG><a name="[661]"></a>etharp_find_entry</STRONG> (ARM, 808 bytes, Stack size 48 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[662]"></a>etharp_free_entry</STRONG> (ARM, 280 bytes, Stack size 24 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6_arm
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[669]"></a>etharp_output_to_arp_index</STRONG> (ARM, 244 bytes, Stack size 40 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_raw &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[668]"></a>etharp_raw</STRONG> (ARM, 524 bytes, Stack size 56 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[d0]"></a>low_level_output</STRONG> (ARM, 184 bytes, Stack size 24 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = low_level_output &rArr; ftmac110_xmit_wait_dma_done &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmac110_xmit_wait_dma_done
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmac110_xmit
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[6a5]"></a>icmp_send_response</STRONG> (ARM, 412 bytes, Stack size 48 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
</UL>

<P><STRONG><a name="[e4]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ip4_addr.o(i.ip4addr_aton))
<BR>[Address Reference Count : 1]<UL><LI> ip4_addr.o(i.ip4addr_aton)
</UL>
<P><STRONG><a name="[643]"></a>dns_call_found</STRONG> (ARM, 304 bytes, Stack size 40 bytes, dns.o(i.dns_call_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[644]"></a>dns_check_entry</STRONG> (ARM, 428 bytes, Stack size 40 bytes, dns.o(i.dns_check_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Random
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[ce]"></a>dns_recv</STRONG> (ARM, 844 bytes, Stack size 96 bytes, dns.o(i.dns_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = dns_recv &rArr; dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(i.dns_gethostbyname_addrtype)
</UL>
<P><STRONG><a name="[645]"></a>dns_send</STRONG> (ARM, 484 bytes, Stack size 56 bytes, dns.o(i.dns_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[ca]"></a>cyclic_timer</STRONG> (ARM, 64 bytes, Stack size 8 bytes, timeouts.o(i.cyclic_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = cyclic_timer &rArr; sys_timeout_debug &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i.cyclic_timer)
<LI> timeouts.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[138]"></a>tcpip_tcp_timer</STRONG> (ARM, 104 bytes, Stack size 8 bytes, timeouts.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_recved &rArr; tcp_output &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i.tcp_timer_needed)
<LI> timeouts.o(i.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[6db]"></a>ip_reass_free_complete_datagram</STRONG> (ARM, 720 bytes, Stack size 24 bytes, ip4_frag.o(i.ip_reass_free_complete_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[e3]"></a>ipfrag_free_pbuf_custom</STRONG> (ARM, 148 bytes, Stack size 8 bytes, ip4_frag.o(i.ipfrag_free_pbuf_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip4_frag.o(i.ip4_frag)
</UL>
<P><STRONG><a name="[351]"></a>GetFile</STRONG> (ARM, 1820 bytes, Stack size 416 bytes, tutk_av_sample.o(i.GetFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 4256 + Unknown Stack Size
<LI>Call Chain = GetFile &rArr; ispUpdateAllload_Net &rArr; osdDrawISPNow &rArr; osdDrawPreviewIcon &rArr; Check_fw_ver_net &rArr; check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispUpdateAllload_Net
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDeadLockMonitor_OFF
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa_r
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_fw_net
</UL>

<P><STRONG><a name="[90]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, tutk_av_sample.o(i.Handle_IOCTRL_Cmd))
<BR>[Address Reference Count : 1]<UL><LI> tutk_av_sample.o(i.Handle_IOCTRL_Cmd)
</UL>
<P><STRONG><a name="[a0]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, tutk_av_sample.o(i.PrintErrHandling))
<BR>[Address Reference Count : 1]<UL><LI> tutk_av_sample.o(i.PrintErrHandling)
</UL>
<P><STRONG><a name="[2aa]"></a>SafeDelP2pPlayFileTask</STRONG> (ARM, 176 bytes, Stack size 120 bytes, tutk_av_sample.o(i.SafeDelP2pPlayFileTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = SafeDelP2pPlayFileTask &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Session_Status
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearP2PConnection
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Session_Status
</UL>

<P><STRONG><a name="[4b9]"></a>SendRegister</STRONG> (ARM, 672 bytes, Stack size 112 bytes, tutk_av_sample.o(i.SendRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = SendRegister &rArr; TcpConnect2 &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa_r
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpSetSendTimeout
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpSendAll
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpConnect2
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PSendEvent
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SessionHandler
</UL>

<P><STRONG><a name="[af]"></a>ShowOnlineUserNum</STRONG> (ARM, 192 bytes, Stack size 104 bytes, tutk_av_sample.o(i.ShowOnlineUserNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = ShowOnlineUserNum &rArr; IOTC_Session_Check &rArr; IOTC_Session_Check_Ex &rArr; iotc_netaddr_get_content &rArr; tutk_platform_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrStart
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrReset
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tutk_av_sample.o(i.Task_SessionHandler)
</UL>
<P><STRONG><a name="[a2]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, tutk_av_sample.o(i.Start_P2P_Session))
<BR>[Address Reference Count : 1]<UL><LI> tutk_av_sample.o(i.Start_P2P_Session)
</UL>
<P><STRONG><a name="[c8]"></a>StopSendIOCtrl</STRONG> (ARM, 72 bytes, Stack size 16 bytes, tutk_av_sample.o(i.StopSendIOCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = StopSendIOCtrl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrlExit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tutk_av_sample.o(i.avSendIOCtrlWithTimeout)
</UL>
<P><STRONG><a name="[ab]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, tutk_av_sample.o(i.Task_Listen))
<BR>[Address Reference Count : 1]<UL><LI> tutk_av_sample.o(i.Task_Listen)
</UL>
<P><STRONG><a name="[148]"></a>Task_SessionHandler</STRONG> (ARM, 6188 bytes, Stack size 5312 bytes, tutk_av_sample.o(i.Task_SessionHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 10592 + Unknown Stack Size
<LI>Call Chain = Task_SessionHandler &rArr; Handle_IOCTRL_Cmd &rArr; Remoteplayback_busy &rArr; SendVideoFrameData &rArr; avSendFrameData &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiChannelGetCaptureVideoStatus
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCountRead
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDeadLockMonitor_Reset
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Session_Status
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Time_To_Second
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRegister
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avInitialize
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avGetAVApiVer
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrStart
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrSetT
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrInit
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrCfgFnct
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Setup_Session_Alive_Timeout
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Set_Max_Session_Number
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Set_Connection_Option
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Mem_Init
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Initialize2
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Get_Version
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Get_Login_Info_ByCallBackFn
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Get_Login_Info
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateH264Header
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVideoFrameData
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintErrHandling
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Session_Status
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tutk_av_sample.o(i.tutk_av_sample)
</UL>
<P><STRONG><a name="[ad]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, tutk_av_sample.o(i.Task_SessionHandler))
<BR>[Address Reference Count : 1]<UL><LI> tutk_av_sample.o(i.Task_SessionHandler)
</UL>
<P><STRONG><a name="[380]"></a>avSendIOCtrlWithTimeout</STRONG> (ARM, 108 bytes, Stack size 24 bytes, tutk_av_sample.o(i.avSendIOCtrlWithTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 4880 + Unknown Stack Size
<LI>Call Chain = avSendIOCtrlWithTimeout &rArr; avSendIOCtrl &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrl
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrStop
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrStart
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrSetT
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmrCfgFnct
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_recorded_filelist
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_remote_file_playback
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IOCTRL_Cmd
</UL>

<P><STRONG><a name="[2ad]"></a>check_fw</STRONG> (ARM, 1548 bytes, Stack size 1256 bytes, tutk_av_sample.o(i.check_fw))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704 + Unknown Stack Size
<LI>Call Chain = check_fw &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa_r
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_fw_ver_net
</UL>

<P><STRONG><a name="[b6]"></a>TmrTask</STRONG> (ARM, 132 bytes, Stack size 0 bytes, tmr.o(i.TmrTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = TmrTask &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPUSaveSR (via Veneer)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCPURestoreSR (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tmr.o(i.TmrInit)
</UL>
<P><STRONG><a name="[b0]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, timer.o(i.TimerGetTimerCounter))
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TimerGetTimerCounter)
</UL>
<P><STRONG><a name="[d7]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, idu.o(i.iduIntHandler))
<BR>[Address Reference Count : 1]<UL><LI> idu.o(i.iduIntHandler)
</UL>
<P><STRONG><a name="[d8]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, idu.o(i.iduIntHandler))
<BR>[Address Reference Count : 1]<UL><LI> idu.o(i.iduIntHandler)
</UL>
<P><STRONG><a name="[d9]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, idu.o(i.iduOSDDisable))
<BR>[Address Reference Count : 1]<UL><LI> idu.o(i.iduOSDDisable)
</UL>
<P><STRONG><a name="[da]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, idu.o(i.iduOSDDisable_All))
<BR>[Address Reference Count : 1]<UL><LI> idu.o(i.iduOSDDisable_All)
</UL>
<P><STRONG><a name="[db]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, idu.o(i.iduOSDEnable))
<BR>[Address Reference Count : 1]<UL><LI> idu.o(i.iduOSDEnable)
</UL>
<P><STRONG><a name="[dc]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, idu.o(i.iduOSDGetYStartEnd))
<BR>[Address Reference Count : 1]<UL><LI> idu.o(i.iduOSDGetYStartEnd)
</UL>
<P><STRONG><a name="[dd]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, idu.o(i.iduTVOSDDisable))
<BR>[Address Reference Count : 1]<UL><LI> idu.o(i.iduTVOSDDisable)
</UL>
<P><STRONG><a name="[de]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, idu.o(i.iduTVOSDDisable_All))
<BR>[Address Reference Count : 1]<UL><LI> idu.o(i.iduTVOSDDisable_All)
</UL>
<P><STRONG><a name="[df]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, idu.o(i.iduTVOSDEnable))
<BR>[Address Reference Count : 1]<UL><LI> idu.o(i.iduTVOSDEnable)
</UL>
<P><STRONG><a name="[9e]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, multichannelh264.o(i.MultiChannelH264Enc_CompressOneFrame))
<BR>[Address Reference Count : 1]<UL><LI> multichannelh264.o(i.MultiChannelH264Enc_CompressOneFrame)
</UL>
<P><STRONG><a name="[9f]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, multichannelh264.o(i.MultiChannelH264Enc_InitBuf))
<BR>[Address Reference Count : 1]<UL><LI> multichannelh264.o(i.MultiChannelH264Enc_InitBuf)
</UL>
<P><STRONG><a name="[8f]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, h264.o(i.H264Dec_ParseHeader))
<BR>[Address Reference Count : 1]<UL><LI> h264.o(i.H264Dec_ParseHeader)
</UL>
<P><STRONG><a name="[69b]"></a>usb_clear_port_feature</STRONG> (ARM, 148 bytes, Stack size 40 bytes, usb-hub.o(i.usb_clear_port_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = usb_clear_port_feature &rArr; usb_control_msg &rArr; submit_control_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_control_msg
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_port_reset
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_event_handle
</UL>

<P><STRONG><a name="[984]"></a>usb_hub_configure</STRONG> (ARM, 2684 bytes, Stack size 584 bytes, usb-hub.o(i.usb_hub_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = usb_hub_configure &rArr;  usb_hub_port_connect_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_control_msg
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_mdelay
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_probe
</UL>

<P><STRONG><a name="[cc]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, usb_storage.o(i.dev_print))
<BR>[Address Reference Count : 1]<UL><LI> usb_storage.o(i.dev_print)
</UL>
<P><STRONG><a name="[174]"></a>usb_stor_BBB_reset</STRONG> (ARM, 292 bytes, Stack size 32 bytes, usb_storage.o(i.usb_stor_BBB_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = usb_stor_BBB_reset &rArr; usb_clear_halt &rArr; usb_control_msg &rArr; submit_control_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_halt
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_control_msg
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_BBB_transport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_storage.o(i.usb_storage_probe)
</UL>
<P><STRONG><a name="[175]"></a>usb_stor_irq</STRONG> (ARM, 28 bytes, Stack size 0 bytes, usb_storage.o(i.usb_stor_irq))
<BR>[Address Reference Count : 1]<UL><LI> usb_storage.o(i.usb_storage_probe)
</UL>
<P><STRONG><a name="[992]"></a>usb_test_unit_ready</STRONG> (ARM, 256 bytes, Stack size 40 bytes, usb_storage.o(i.usb_test_unit_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = usb_test_unit_ready &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stop_remove
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_write
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_get_info
</UL>

<P><STRONG><a name="[16e]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, usb-transfer.o(i.usb_hid_bit_format))
<BR>[Address Reference Count : 1]<UL><LI> usb-transfer.o(i.usb_hid_bit_format)
</UL>
<P><STRONG><a name="[16f]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, usb-transfer.o(i.usb_hid_report_descriptor_handler))
<BR>[Address Reference Count : 1]<UL><LI> usb-transfer.o(i.usb_hid_report_descriptor_handler)
</UL>
<P><STRONG><a name="[170]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, usb-transfer.o(i.usb_hid_report_descriptor_handler))
<BR>[Address Reference Count : 1]<UL><LI> usb-transfer.o(i.usb_hid_report_descriptor_handler)
</UL>
<P><STRONG><a name="[999]"></a>usb_string_sub</STRONG> (ARM, 556 bytes, Stack size 80 bytes, usb-transfer.o(i.usb_string_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = usb_string_sub &rArr; usb_control_msg &rArr; submit_control_msg &rArr; ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_control_msg
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_string
</UL>

<P><STRONG><a name="[657]"></a>ehci_submit_async</STRONG> (ARM, 1508 bytes, Stack size 88 bytes, ehci-hcd.o(i.ehci_submit_async))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ehci_submit_async &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_maxpacket
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handshake
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;submit_control_msg
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;submit_bulk_msg
</UL>

<P><STRONG><a name="[656]"></a>handshake</STRONG> (ARM, 136 bytes, Stack size 40 bytes, ehci-hcd.o(i.handshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = handshake
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marsTimerCountRead
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_submit_async
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ehci_reset
</UL>

<P><STRONG><a name="[446]"></a>Transform</STRONG> (ARM, 2740 bytes, Stack size 132 bytes, encrypt.o(i.Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[321]"></a>_FS_fat_create_directory</STRONG> (ARM, 1684 bytes, Stack size 120 bytes, fat_dir.o(i._FS_fat_create_directory))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = _FS_fat_create_directory &rArr; FSFATNewEntry &rArr; FSFATAllocateFreeCluster &rArr; FSFATOrderFreeCluster &rArr; FSFATFindFreeCluster &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Time
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_write
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_dir_realsec
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFATNewEntry
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strncpy
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_memset
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__CLIB_strlen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_MkRmDir
</UL>

<P><STRONG><a name="[32e]"></a>_FS_fat_GetTotalFree</STRONG> (ARM, 1824 bytes, Stack size 88 bytes, fat_ioct.o(i._FS_fat_GetTotalFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = _FS_fat_GetTotalFree &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcpu_FATZeroScan (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_mul_read
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMalloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSFree
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_ioctl
</UL>

<P><STRONG><a name="[55b]"></a>_FS_CheckBPB</STRONG> (ARM, 1588 bytes, Stack size 24 bytes, fat_misc.o(i._FS_CheckBPB))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = _FS_CheckBPB &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTotalBlockCount
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_ReadBPB
</UL>

<P><STRONG><a name="[327]"></a>_FS_ReadBPB</STRONG> (ARM, 2100 bytes, Stack size 48 bytes, fat_misc.o(i._FS_ReadBPB))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = _FS_ReadBPB &rArr; _FS_CheckBPB &rArr; FS__lb_sin_read &rArr; FS__lb_read &rArr; FSLBSyncSinReadCache &rArr; FS__lb_SD_RDretry &rArr; sdcMount &rArr; sdcDataTransferMode &rArr; sdcCheckTransferState &rArr; sdcCheckCommandResponseComplete &rArr; errHandle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_LB_Cache_Enable
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FS_CheckBPB
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__lb_sin_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_free
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTotalBlockCount
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS__fat_checkunit
</UL>

<P><STRONG><a name="[485]"></a>OS_FlagBlock</STRONG> (ARM, 148 bytes, Stack size 16 bytes, ucos_ii.o(i.OS_FlagBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_FlagBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[28d]"></a>AddTryPortNode</STRONG> (ARM, 1228 bytes, Stack size 80 bytes, iotcapis.o(i.AddTryPortNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = AddTryPortNode &rArr; monopool_alloc &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
</UL>

<P><STRONG><a name="[2a1]"></a>CheckRecentClosedClientRandomID</STRONG> (ARM, 300 bytes, Stack size 40 bytes, iotcapis.o(i.CheckRecentClosedClientRandomID))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = CheckRecentClosedClientRandomID &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_SESSION_INFO2
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_REQUEST_R2
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_RR
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_R
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH_R_3
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[2af]"></a>CleanDeviceVPG</STRONG> (ARM, 168 bytes, Stack size 8 bytes, iotcapis.o(i.CleanDeviceVPG))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = CleanDeviceVPG &rArr; __Search_VPGServerList &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_VPGServerList
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_DeviceInfo
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3d8]"></a>IOTC_Handler_MSG_LAN_SEARCH</STRONG> (ARM, 1768 bytes, Stack size 1512 bytes, iotcapis.o(i.IOTC_Handler_MSG_LAN_SEARCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 4800 + Unknown Stack Size
<LI>Call Chain = IOTC_Handler_MSG_LAN_SEARCH &rArr; _IOTC_Send_Search_R &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_SessionByClientRandomID
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_PreSessionByClientRandomID
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IsExceedSession
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Get_Free_Session
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Get_Free_PreSession
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSendPath
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Search_R
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRecentClosedClientRandomID
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_rand
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Create
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_put_content
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskCleanAllNodes
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSendLANSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3e3]"></a>IOTC_Handler_MSG_LAN_SEARCH_R_3</STRONG> (ARM, 800 bytes, Stack size 80 bytes, iotcapis.o(i.IOTC_Handler_MSG_LAN_SEARCH_R_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 3472 + Unknown Stack Size
<LI>Call Chain = IOTC_Handler_MSG_LAN_SEARCH_R_3 &rArr; SendConnectResult &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_SessionByClientRandomID
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateLanDeviceList
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSendPath
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResponseTimeAck
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Search
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLanSearchInfoList
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPrivateIP
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRecentClosedClientRandomID
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectResult
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3ea]"></a>IOTC_Handler_MSG_P2P_KNOCK_R</STRONG> (ARM, 1928 bytes, Stack size 72 bytes, iotcapis.o(i.IOTC_Handler_MSG_P2P_KNOCK_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 3464 + Unknown Stack Size
<LI>Call Chain = IOTC_Handler_MSG_P2P_KNOCK_R &rArr; SendConnectResult &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_SessionByClientRandomID
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_PreSessionByClientRandomID
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_OnConnectSessionByUID
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Get_Free_Session
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSendPath
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResponseTimeAck
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Knock_RR
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseTryPortNode
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPrivateIP
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRecentClosedClientRandomID
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskCleanNodesWithType
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectResult
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3ef]"></a>IOTC_Handler_MSG_P2P_KNOCK_RR</STRONG> (ARM, 1608 bytes, Stack size 64 bytes, iotcapis.o(i.IOTC_Handler_MSG_P2P_KNOCK_RR))
<BR><BR>[Stack]<UL><LI>Max Depth = 3456 + Unknown Stack Size
<LI>Call Chain = IOTC_Handler_MSG_P2P_KNOCK_RR &rArr; SendConnectResult &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_SessionByClientRandomID
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_PreSessionByClientRandomID
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_OnConnectSessionByUID
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Get_Free_Session
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSendPath
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResponseTimeAck
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseTryPortNode
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPrivateIP
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRecentClosedClientRandomID
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskCleanNodesWithType
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectResult
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3f0]"></a>IOTC_Handler_MSG_P2P_PUNCH_TO2</STRONG> (ARM, 2612 bytes, Stack size 360 bytes, iotcapis.o(i.IOTC_Handler_MSG_P2P_PUNCH_TO2))
<BR><BR>[Stack]<UL><LI>Max Depth = 3768 + Unknown Stack Size
<LI>Call Chain = IOTC_Handler_MSG_P2P_PUNCH_TO2 &rArr; _IOTC_SendDeviceLogin1 &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_SessionByClientRandomID
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_PreSessionByClientRandomID
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Get_Free_PreSession
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResponseTimeTest
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Search
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Knock
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_SendDeviceLogin1
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRecentClosedClientRandomID
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTryPortNode
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Create
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_sockaddr_to_ip_string
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_put_content
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_get_content
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSendLANSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3f6]"></a>IOTC_Handler_MSG_RLY_REQUEST_R2</STRONG> (ARM, 760 bytes, Stack size 1528 bytes, iotcapis.o(i.IOTC_Handler_MSG_RLY_REQUEST_R2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4944 + Unknown Stack Size
<LI>Call Chain = IOTC_Handler_MSG_RLY_REQUEST_R2 &rArr; _UpdateUdpServerRelayRequestRStatus &rArr; _UdpRelaySessionInfoRequestServer &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_SessionByClientRandomID
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateUdpServerRelayRequestRStatus
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResponseTimeAck
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRecentClosedClientRandomID
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[99]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, iotcapis.o(i.IOTC_Handler_MSG_RLY_REQUEST_R2))
<BR>[Address Reference Count : 1]<UL><LI> iotcapis.o(i.IOTC_Handler_MSG_RLY_REQUEST_R2)
</UL>
<P><STRONG><a name="[3f8]"></a>IOTC_Handler_MSG_RLY_SESSION_INFO2</STRONG> (ARM, 1540 bytes, Stack size 1512 bytes, iotcapis.o(i.IOTC_Handler_MSG_RLY_SESSION_INFO2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904 + Unknown Stack Size
<LI>Call Chain = IOTC_Handler_MSG_RLY_SESSION_INFO2 &rArr; SendConnectResult &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_SessionByClientRandomID
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_PreSessionByClientRandomID
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Get_Free_Session
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSendPath
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResponseTimeAck
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRecentClosedClientRandomID
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_put_content
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskCleanNodesWithType
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectResult
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3cf]"></a>IOTC_OpenUDP_LANSocket</STRONG> (ARM, 272 bytes, Stack size 40 bytes, iotcapis.o(i.IOTC_OpenUDP_LANSocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IOTC_OpenUDP_LANSocket
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
</UL>

<P><STRONG><a name="[3ce]"></a>IOTC_OpenUDP_P2PSocket</STRONG> (ARM, 272 bytes, Stack size 40 bytes, iotcapis.o(i.IOTC_OpenUDP_P2PSocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IOTC_OpenUDP_P2PSocket
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceLoginCB
</UL>

<P><STRONG><a name="[3d2]"></a>IOTC_Query_VPGServerList</STRONG> (ARM, 460 bytes, Stack size 40 bytes, iotcapis.o(i.IOTC_Query_VPGServerList))
<BR><BR>[Stack]<UL><LI>Max Depth = 3336 + Unknown Stack Size
<LI>Call Chain = IOTC_Query_VPGServerList &rArr; sendIOTC_Query_Device &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr1_12_arm
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_VPGServerList
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_DeviceInfo
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendIOTC_Query_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
</UL>

<P><STRONG><a name="[3d0]"></a>InitSessionInfo</STRONG> (ARM, 128 bytes, Stack size 8 bytes, iotcapis.o(i.InitSessionInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InitSessionInfo &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
</UL>

<P><STRONG><a name="[3e8]"></a>IsPrivateIP</STRONG> (ARM, 584 bytes, Stack size 48 bytes, iotcapis.o(i.IsPrivateIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = IsPrivateIP &rArr; ipaddr_addr &rArr; ip4addr_aton &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check_Client
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_RR
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_R
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH_R_3
</UL>

<P><STRONG><a name="[97]"></a>LanSearchPrecheckRTaskCB</STRONG> (ARM, 192 bytes, Stack size 64 bytes, iotcapis.o(i.LanSearchPrecheckRTaskCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 3352 + Unknown Stack Size
<LI>Call Chain = LanSearchPrecheckRTaskCB &rArr; _IOTC_Send_Search_R &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Search_R
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_get_content
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskDeleteNode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iotcapis.o(i.IOTC_Handler_MSG_LAN_SEARCH)
</UL>
<P><STRONG><a name="[8d]"></a>P2PConnectionRecvCallback</STRONG> (ARM, 236 bytes, Stack size 1456 bytes, iotcapis.o(i.P2PConnectionRecvCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 7880 + Unknown Stack Size
<LI>Call Chain = P2PConnectionRecvCallback &rArr; _IOTC_Packet_Handler &rArr; IOTC_Handler_MSG_RLY_REQUEST_R2 &rArr; _UpdateUdpServerRelayRequestRStatus &rArr; _UdpRelaySessionInfoRequestServer &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseTransCodePartial
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>
<BR>[Address Reference Count : 3]<UL><LI> iotcapis.o(i.AddTryPortNode)
<LI> iotcapis.o(i.IOTC_OpenUDP_LANSocket)
<LI> iotcapis.o(i.IOTC_OpenUDP_P2PSocket)
</UL>
<P><STRONG><a name="[3ec]"></a>ReleaseTryPortNode</STRONG> (ARM, 288 bytes, Stack size 24 bytes, iotcapis.o(i.ReleaseTryPortNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ReleaseTryPortNode &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseSession
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check_Client
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_RR
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_R
</UL>

<P><STRONG><a name="[4b7]"></a>ReverseTransCodePartial</STRONG> (ARM, 932 bytes, Stack size 64 bytes, iotcapis.o(i.ReverseTransCodePartial))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ReverseTransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PConnectionRecvCallback
</UL>

<P><STRONG><a name="[93]"></a>SendDeviceLoginCB</STRONG> (ARM, 840 bytes, Stack size 80 bytes, iotcapis.o(i.SendDeviceLoginCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 3488 + Unknown Stack Size
<LI>Call Chain = SendDeviceLoginCB &rArr; _IOTC_SendDeviceLogin1 &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_VPGServerList
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_DeviceInfo
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_SendDeviceLogin1
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_OpenUDP_P2PSocket
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Delete
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Create
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_get_content
</UL>
<BR>[Address Reference Count : 3]<UL><LI> iotcapis.o(i.IOTC_Device_Login)
<LI> iotcapis.o(i.SendDeviceLoginCB)
<LI> iotcapis.o(i._IOTC_Packet_Handler)
</UL>
<P><STRONG><a name="[95]"></a>SendKeepNATCB</STRONG> (ARM, 264 bytes, Stack size 104 bytes, iotcapis.o(i.SendKeepNATCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = SendKeepNATCB &rArr; iotc_netaddr_get_content &rArr; tutk_platform_snprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_VPGServerList
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_DeviceInfo
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_get_content
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iotcapis.o(i.IOTC_Device_Login)
</UL>
<P><STRONG><a name="[8c]"></a>SendLanSearchTaskCB</STRONG> (ARM, 316 bytes, Stack size 96 bytes, iotcapis.o(i.SendLanSearchTaskCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 3392 + Unknown Stack Size
<LI>Call Chain = SendLanSearchTaskCB &rArr; _IOTC_Send_Search &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Search_R
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Search
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Delete
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_get_content
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iotcapis.o(i.AddSendLANSearch)
</UL>
<P><STRONG><a name="[52e]"></a>TransCodePartial</STRONG> (ARM, 944 bytes, Stack size 72 bytes, iotcapis.o(i.TransCodePartial))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
</UL>

<P><STRONG><a name="[bf]"></a>UDPRelaySessionInfoRequestTaskCB</STRONG> (ARM, 108 bytes, Stack size 8 bytes, iotcapis.o(i.UDPRelaySessionInfoRequestTaskCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 3368 + Unknown Stack Size
<LI>Call Chain = UDPRelaySessionInfoRequestTaskCB &rArr; _UdpRelaySessionInfoRequestServer &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UdpRelaySessionInfoRequestServer
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskDeleteNode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iotcapis.o(i._UpdateUdpServerRelayRequestRStatus)
</UL>
<P><STRONG><a name="[3e4]"></a>UpdateLanSearchInfoList</STRONG> (ARM, 516 bytes, Stack size 88 bytes, iotcapis.o(i.UpdateLanSearchInfoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = UpdateLanSearchInfoList &rArr; monopool_alloc &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_lan_search_record
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_lan_search_record_found
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_convert_to_IPv4_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH_R_3
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[55a]"></a>_Check_Nat_Type</STRONG> (ARM, 372 bytes, Stack size 24 bytes, iotcapis.o(i._Check_Nat_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = _Check_Nat_Type &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3d6]"></a>_IOTC_GetLocalIPAddr</STRONG> (ARM, 328 bytes, Stack size 128 bytes, iotcapis.o(i._IOTC_GetLocalIPAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _IOTC_GetLocalIPAddr &rArr; ipaddr_addr &rArr; ip4addr_aton &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_sockaddr_to_ip_string
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[55f]"></a>_IOTC_P2P_Connection_Check</STRONG> (ARM, 484 bytes, Stack size 56 bytes, iotcapis.o(i._IOTC_P2P_Connection_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = _IOTC_P2P_Connection_Check &rArr; _SetSendPath &rArr; iotc_netaddr_put_content &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_PreSessionByClientRandomID
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Get_Free_Session
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSendPath
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseTryPortNode
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPrivateIP
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskCleanNodesWithType
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskCleanAllNodes
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[560]"></a>_IOTC_P2P_Connection_Check_Client</STRONG> (ARM, 408 bytes, Stack size 64 bytes, iotcapis.o(i._IOTC_P2P_Connection_Check_Client))
<BR><BR>[Stack]<UL><LI>Max Depth = 3456 + Unknown Stack Size
<LI>Call Chain = _IOTC_P2P_Connection_Check_Client &rArr; SendConnectResult &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSendPath
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResponseTimeAck
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseTryPortNode
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPrivateIP
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskCleanNodesWithType
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendConnectResult
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[be]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, iotcapis.o(i._IOTC_Packet_Handler))
<BR>[Address Reference Count : 1]<UL><LI> iotcapis.o(i._IOTC_Packet_Handler)
</UL>
<P><STRONG><a name="[3f5]"></a>_IOTC_SendDeviceLogin1</STRONG> (ARM, 560 bytes, Stack size 1592 bytes, iotcapis.o(i._IOTC_SendDeviceLogin1))
<BR><BR>[Stack]<UL><LI>Max Depth = 3408 + Unknown Stack Size
<LI>Call Chain = _IOTC_SendDeviceLogin1 &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_sockaddr_to_ip_string
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceLoginCB
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3f2]"></a>_IOTC_Send_Knock</STRONG> (ARM, 416 bytes, Stack size 1496 bytes, iotcapis.o(i._IOTC_Send_Knock))
<BR><BR>[Stack]<UL><LI>Max Depth = 3312 + Unknown Stack Size
<LI>Call Chain = _IOTC_Send_Knock &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_OnConnectSessionByUID
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IsExceedSession
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[569]"></a>_IOTC_Send_Knock_R</STRONG> (ARM, 272 bytes, Stack size 1496 bytes, iotcapis.o(i._IOTC_Send_Knock_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 3312 + Unknown Stack Size
<LI>Call Chain = _IOTC_Send_Knock_R &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IsExceedSession
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3ed]"></a>_IOTC_Send_Knock_RR</STRONG> (ARM, 308 bytes, Stack size 1496 bytes, iotcapis.o(i._IOTC_Send_Knock_RR))
<BR><BR>[Stack]<UL><LI>Max Depth = 3312 + Unknown Stack Size
<LI>Call Chain = _IOTC_Send_Knock_RR &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IsExceedSession
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_R
</UL>

<P><STRONG><a name="[40f]"></a>_IOTC_Send_P2PClose</STRONG> (ARM, 312 bytes, Stack size 1528 bytes, iotcapis.o(i._IOTC_Send_P2PClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 3344 + Unknown Stack Size
<LI>Call Chain = _IOTC_Send_P2PClose &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_get_content
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSendPath
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Close
</UL>

<P><STRONG><a name="[40e]"></a>_IOTC_Send_RLYClose</STRONG> (ARM, 312 bytes, Stack size 1528 bytes, iotcapis.o(i._IOTC_Send_RLYClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 3344 + Unknown Stack Size
<LI>Call Chain = _IOTC_Send_RLYClose &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_get_content
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSendPath
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Close
</UL>

<P><STRONG><a name="[568]"></a>_IOTC_Send_Rly_Knock_R</STRONG> (ARM, 312 bytes, Stack size 1496 bytes, iotcapis.o(i._IOTC_Send_Rly_Knock_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 3312 + Unknown Stack Size
<LI>Call Chain = _IOTC_Send_Rly_Knock_R &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3e6]"></a>_IOTC_Send_Search</STRONG> (ARM, 288 bytes, Stack size 1480 bytes, iotcapis.o(i._IOTC_Send_Search))
<BR><BR>[Stack]<UL><LI>Max Depth = 3296 + Unknown Stack Size
<LI>Call Chain = _IOTC_Send_Search &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLanSearchTaskCB
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH_R_3
</UL>

<P><STRONG><a name="[3dc]"></a>_IOTC_Send_Search_R</STRONG> (ARM, 228 bytes, Stack size 1472 bytes, iotcapis.o(i._IOTC_Send_Search_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 3288 + Unknown Stack Size
<LI>Call Chain = _IOTC_Send_Search_R &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLanSearchTaskCB
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LanSearchPrecheckRTaskCB
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
</UL>

<P><STRONG><a name="[98]"></a>_IOTC_callback_Try_Port</STRONG> (ARM, 1820 bytes, Stack size 1592 bytes, iotcapis.o(i._IOTC_callback_Try_Port))
<BR><BR>[Stack]<UL><LI>Max Depth = 3408 + Unknown Stack Size
<LI>Call Chain = _IOTC_callback_Try_Port &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_rand
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Delete
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Create
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_sockaddr_to_ip_string
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
</UL>
<BR>[Address Reference Count : 2]<UL><LI> iotcapis.o(i.IOTC_Handler_MSG_P2P_PUNCH_TO2)
<LI> iotcapis.o(i._IOTC_callback_Try_Port)
</UL>
<P><STRONG><a name="[9b]"></a>_IOTC_thread_Session_Alive</STRONG> (ARM, 1032 bytes, Stack size 1560 bytes, iotcapis.o(i._IOTC_thread_Session_Alive))
<BR><BR>[Stack]<UL><LI>Max Depth = 3376 + Unknown Stack Size
<LI>Call Chain = _IOTC_thread_Session_Alive &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_get_content
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSendPath
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iotcapis.o(i.IOTC_Initialize2)
</UL>
<P><STRONG><a name="[3c9]"></a>_ReleaseSession</STRONG> (ARM, 520 bytes, Stack size 32 bytes, iotcapis.o(i._ReleaseSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = _ReleaseSession &rArr; ReleaseTryPortNode &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseTryPortNode
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_DeInitialize
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Close
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceSessionRecyclingTask
</UL>

<P><STRONG><a name="[3e7]"></a>_ResponseTimeAck</STRONG> (ARM, 128 bytes, Stack size 24 bytes, iotcapis.o(i._ResponseTimeAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ResponseTimeAck &rArr; gettimeofday
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check_Client
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_SESSION_INFO2
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_REQUEST_R2
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_RR
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_R
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH_R_3
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3f3]"></a>_ResponseTimeTest</STRONG> (ARM, 160 bytes, Stack size 24 bytes, iotcapis.o(i._ResponseTimeTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ResponseTimeTest &rArr; gettimeofday
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3da]"></a>_SetSendPath</STRONG> (ARM, 264 bytes, Stack size 48 bytes, iotcapis.o(i._SetSendPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = _SetSendPath &rArr; iotc_netaddr_put_content &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_put_content
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check_Client
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_SESSION_INFO2
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_RR
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_R
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH_R_3
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_LAN_Connection_Check
</UL>

<P><STRONG><a name="[52f]"></a>_UdpRelaySessionInfoRequestServer</STRONG> (ARM, 332 bytes, Stack size 1544 bytes, iotcapis.o(i._UdpRelaySessionInfoRequestServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 3360 + Unknown Stack Size
<LI>Call Chain = _UdpRelaySessionInfoRequestServer &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_get_content
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateUdpServerRelayRequestRStatus
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPRelaySessionInfoRequestTaskCB
</UL>

<P><STRONG><a name="[56a]"></a>_UpdateDeviceStatus</STRONG> (ARM, 380 bytes, Stack size 48 bytes, iotcapis.o(i._UpdateDeviceStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = _UpdateDeviceStatus &rArr; iotc_netaddr_put_content &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_put_content
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3e5]"></a>_UpdateLanDeviceList</STRONG> (ARM, 368 bytes, Stack size 40 bytes, iotcapis.o(i._UpdateLanDeviceList))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = _UpdateLanDeviceList &rArr; monopool_alloc &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_lan_search_record
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH_R_3
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[56e]"></a>_UpdateSendPathAddres</STRONG> (ARM, 188 bytes, Stack size 24 bytes, iotcapis.o(i._UpdateSendPathAddres))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = _UpdateSendPathAddres &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[561]"></a>_UpdateServerProtocolVersion</STRONG> (ARM, 456 bytes, Stack size 56 bytes, iotcapis.o(i._UpdateServerProtocolVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = _UpdateServerProtocolVersion &rArr; iotc_netaddr_put_content &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_VPGServerList
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_DeviceInfo
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_put_content
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[565]"></a>_UpdateUdpServerList</STRONG> (ARM, 324 bytes, Stack size 48 bytes, iotcapis.o(i._UpdateUdpServerList))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = _UpdateUdpServerList &rArr; __Search_VPGServerList &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_VPGServerList
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_DeviceInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3f7]"></a>_UpdateUdpServerRelayRequestRStatus</STRONG> (ARM, 680 bytes, Stack size 56 bytes, iotcapis.o(i._UpdateUdpServerRelayRequestRStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 3416 + Unknown Stack Size
<LI>Call Chain = _UpdateUdpServerRelayRequestRStatus &rArr; _UdpRelaySessionInfoRequestServer &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UdpRelaySessionInfoRequestServer
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Create
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_put_content
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_REQUEST_R2
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[402]"></a>__GetNotYetReturnConnectedSession</STRONG> (ARM, 156 bytes, Stack size 8 bytes, iotcapis.o(i.__GetNotYetReturnConnectedSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __GetNotYetReturnConnectedSession &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Listen
</UL>

<P><STRONG><a name="[3de]"></a>__Get_Free_PreSession</STRONG> (ARM, 140 bytes, Stack size 16 bytes, iotcapis.o(i.__Get_Free_PreSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __Get_Free_PreSession &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3e0]"></a>__Get_Free_Session</STRONG> (ARM, 268 bytes, Stack size 16 bytes, iotcapis.o(i.__Get_Free_Session))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __Get_Free_Session &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_SESSION_INFO2
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_RR
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_R
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3df]"></a>__IsExceedSession</STRONG> (ARM, 104 bytes, Stack size 8 bytes, iotcapis.o(i.__IsExceedSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __IsExceedSession &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Listen
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Knock_RR
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Knock_R
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Knock
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[56c]"></a>__RemoteSiteClose_Session</STRONG> (ARM, 200 bytes, Stack size 32 bytes, iotcapis.o(i.__RemoteSiteClose_Session))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __RemoteSiteClose_Session
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[2b0]"></a>__Search_DeviceInfo</STRONG> (ARM, 120 bytes, Stack size 16 bytes, iotcapis.o(i.__Search_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __Search_DeviceInfo &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateUdpServerList
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateServerProtocolVersion
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeepNATCB
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceLoginCB
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Query_VPGServerList
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanDeviceVPG
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check_Ex
</UL>

<P><STRONG><a name="[3ee]"></a>__Search_OnConnectSessionByUID</STRONG> (ARM, 156 bytes, Stack size 16 bytes, iotcapis.o(i.__Search_OnConnectSessionByUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __Search_OnConnectSessionByUID &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Send_Knock
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_RR
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_R
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3dd]"></a>__Search_PreSessionByClientRandomID</STRONG> (ARM, 268 bytes, Stack size 16 bytes, iotcapis.o(i.__Search_PreSessionByClientRandomID))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __Search_PreSessionByClientRandomID &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_SESSION_INFO2
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_RR
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_R
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[56d]"></a>__Search_Session</STRONG> (ARM, 196 bytes, Stack size 32 bytes, iotcapis.o(i.__Search_Session))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = __Search_Session &rArr; iotc_netaddr_put_content &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_put_content
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[3d9]"></a>__Search_SessionByClientRandomID</STRONG> (ARM, 252 bytes, Stack size 16 bytes, iotcapis.o(i.__Search_SessionByClientRandomID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Search_SessionByClientRandomID
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_SESSION_INFO2
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_RLY_REQUEST_R2
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_RR
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_R
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH_R_3
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[567]"></a>__Search_Session_ByRelaySID</STRONG> (ARM, 208 bytes, Stack size 24 bytes, iotcapis.o(i.__Search_Session_ByRelaySID))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = __Search_Session_ByRelaySID &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[2b1]"></a>__Search_VPGServerList</STRONG> (ARM, 224 bytes, Stack size 24 bytes, iotcapis.o(i.__Search_VPGServerList))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = __Search_VPGServerList &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateUdpServerList
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateServerProtocolVersion
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeepNATCB
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceLoginCB
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Query_VPGServerList
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanDeviceVPG
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[563]"></a>__Update_DeviceInfo</STRONG> (ARM, 160 bytes, Stack size 16 bytes, iotcapis.o(i.__Update_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __Update_DeviceInfo &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[564]"></a>__Update_VPGServerList</STRONG> (ARM, 1820 bytes, Stack size 224 bytes, iotcapis.o(i.__Update_VPGServerList))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = __Update_VPGServerList &rArr; iotc_sockaddr_to_ip_addr &rArr; ttk_host_get_sockaddr &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_sockaddr_to_ip_addr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_netaddr_get_content
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
</UL>

<P><STRONG><a name="[96]"></a>deviceSessionRecyclingTask</STRONG> (ARM, 156 bytes, Stack size 8 bytes, iotcapis.o(i.deviceSessionRecyclingTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = deviceSessionRecyclingTask &rArr; SessionTaskDeleteNode &rArr; tutk_TaskMng_Delete &rArr; tutk_TaskMng_Purge &rArr; tutk_bst_walk_purge &rArr;  tutk_bst_walk_purge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseSession
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskDeleteNode
</UL>
<BR>[Address Reference Count : 3]<UL><LI> iotcapis.o(i.IOTC_Handler_MSG_LAN_SEARCH)
<LI> iotcapis.o(i.IOTC_Handler_MSG_P2P_PUNCH_TO2)
<LI> iotcapis.o(i._IOTC_Packet_Handler)
</UL>
<P><STRONG><a name="[540]"></a>is_lan_search_record_found</STRONG> (ARM, 532 bytes, Stack size 48 bytes, iotcapis.o(i.is_lan_search_record_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = is_lan_search_record_found &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLanSearchInfoList
</UL>

<P><STRONG><a name="[9c]"></a>setupFailedCallback</STRONG> (ARM, 4 bytes, Stack size 0 bytes, iotcapis.o(i.setupFailedCallback))
<BR>[Address Reference Count : 1]<UL><LI> iotcapis.o(i.IOTC_OpenUDP_P2PSocket)
</UL>
<P><STRONG><a name="[9d]"></a>setupSuccessCallback</STRONG> (ARM, 4 bytes, Stack size 0 bytes, iotcapis.o(i.setupSuccessCallback))
<BR>[Address Reference Count : 1]<UL><LI> iotcapis.o(i.IOTC_OpenUDP_P2PSocket)
</UL>
<P><STRONG><a name="[288]"></a>tutk_platform_mutex_lock</STRONG> (ARM, 76 bytes, Stack size 16 bytes, iotcapis.o(i.tutk_platform_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_DeInitialize
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Set_Partial_Encryption
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Get_Free_Channel
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Close
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Listen
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceSessionRecyclingTask
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Update_VPGServerList
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Update_DeviceInfo
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_VPGServerList
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_Session_ByRelaySID
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_Session
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_PreSessionByClientRandomID
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_OnConnectSessionByUID
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_DeviceInfo
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IsExceedSession
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Get_Free_Session
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Get_Free_PreSession
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetNotYetReturnConnectedSession
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateUdpServerRelayRequestRStatus
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateUdpServerList
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateServerProtocolVersion
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseSession
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_thread_Session_Alive
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_callback_Try_Port
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check_Client
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLanSearchInfoList
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLanSearchTaskCB
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeepNATCB
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceLoginCB
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseTryPortNode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LanSearchPrecheckRTaskCB
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_RR
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_R
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanDeviceVPG
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRecentClosedClientRandomID
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTryPortNode
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_thread_resolve_master_name_new
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_resolve_master_all
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_resolve_master
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakTimeCallBack
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Check_Server
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskDeleteNode
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskCleanNodesWithType
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskCleanAllNodes
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Update_Server_ProtoVer
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Set_CloseCb
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Set_Channel_RcvCb
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Lock
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check_Ex
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Channel_ON
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Channel_OFF
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Get_Remote_ProtocolVersion
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Check_Session_Status
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSendLANSearch
</UL>

<P><STRONG><a name="[28b]"></a>tutk_platform_mutex_unlock</STRONG> (ARM, 76 bytes, Stack size 8 bytes, iotcapis.o(i.tutk_platform_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tutk_platform_mutex_unlock &rArr; OS_MutexUnLock &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexUnLock
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_DeInitialize
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Set_Partial_Encryption
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Get_Free_Channel
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Close
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Listen
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Device_Login
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceSessionRecyclingTask
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Update_VPGServerList
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Update_DeviceInfo
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_VPGServerList
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_Session_ByRelaySID
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_Session
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_PreSessionByClientRandomID
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_OnConnectSessionByUID
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Search_DeviceInfo
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IsExceedSession
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Get_Free_Session
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Get_Free_PreSession
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetNotYetReturnConnectedSession
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateUdpServerRelayRequestRStatus
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateUdpServerList
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateServerProtocolVersion
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseSession
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_thread_Session_Alive
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_callback_Try_Port
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check_Client
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_P2P_Connection_Check
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLanSearchInfoList
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLanSearchTaskCB
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendKeepNATCB
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDeviceLoginCB
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseTryPortNode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LanSearchPrecheckRTaskCB
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_PUNCH_TO2
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_RR
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_P2P_KNOCK_R
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Handler_MSG_LAN_SEARCH
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanDeviceVPG
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRecentClosedClientRandomID
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTryPortNode
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_thread_resolve_master_name_new
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_resolve_master_all
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotc_resolve_master
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakTimeCallBack
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Packet_Handler
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOTC_Check_Server
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskDeleteNode
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskCleanNodesWithType
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SessionTaskCleanAllNodes
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Update_Server_ProtoVer
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_unLock
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Set_CloseCb
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Set_Channel_RcvCb
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check_Ex
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Channel_ON
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Channel_OFF
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Get_Remote_ProtocolVersion
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Check_Session_Status
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSendLANSearch
</UL>

<P><STRONG><a name="[94]"></a>updateVPGServerListDailyRoutine</STRONG> (ARM, 72 bytes, Stack size 8 bytes, iotcapis.o(i.updateVPGServerListDailyRoutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = updateVPGServerListDailyRoutine &rArr; tutk_TaskMng_Create &rArr; tutk_TaskMng_Purge &rArr; tutk_bst_walk_purge &rArr;  tutk_bst_walk_purge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iotcapis.o(i.IOTC_Device_Login)
</UL>
<P><STRONG><a name="[541]"></a>update_lan_search_record</STRONG> (ARM, 752 bytes, Stack size 40 bytes, iotcapis.o(i.update_lan_search_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = update_lan_search_record &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateLanDeviceList
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLanSearchInfoList
</UL>

<P><STRONG><a name="[275]"></a>AVInfo_ResendReq</STRONG> (ARM, 580 bytes, Stack size 1360 bytes, avapis.o(i.AVInfo_ResendReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832 + Unknown Stack Size
<LI>Call Chain = AVInfo_ResendReq &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_Release
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoPutByPassSameBlock
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetMinFrmNo
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetMaxFrmNo
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetByFrmNo
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCalu
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
</UL>

<P><STRONG><a name="[285]"></a>AV_SendErrorCode</STRONG> (ARM, 72 bytes, Stack size 16 bytes, avapis.o(i.AV_SendErrorCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 3400 + Unknown Stack Size
<LI>Call Chain = AV_SendErrorCode &rArr; IOTC_SendErrorCode &rArr; SendConnectErrorCode_inner &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_SendErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart
</UL>

<P><STRONG><a name="[295]"></a>AvDoAuthCheck</STRONG> (ARM, 272 bytes, Stack size 32 bytes, avapis.o(i.AvDoAuthCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AvDoAuthCheck &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
</UL>

<P><STRONG><a name="[570]"></a>__Audio_Fill_Slot_Data</STRONG> (ARM, 248 bytes, Stack size 32 bytes, avapis.o(i.__Audio_Fill_Slot_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __Audio_Fill_Slot_Data &rArr; monopool_alloc &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
</UL>

<P><STRONG><a name="[589]"></a>__Audio_Get_Empty_READY_Slot</STRONG> (ARM, 244 bytes, Stack size 8 bytes, avapis.o(i.__Audio_Get_Empty_READY_Slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __Audio_Get_Empty_READY_Slot
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
</UL>

<P><STRONG><a name="[58a]"></a>__Audio_Get_Empty_Slot</STRONG> (ARM, 112 bytes, Stack size 0 bytes, avapis.o(i.__Audio_Get_Empty_Slot))
<BR><BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
</UL>

<P><STRONG><a name="[571]"></a>__Audio_Request_Resend</STRONG> (ARM, 192 bytes, Stack size 1352 bytes, avapis.o(i.__Audio_Request_Resend))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824 + Unknown Stack Size
<LI>Call Chain = __Audio_Request_Resend &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCalu
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvAudioData
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
</UL>

<P><STRONG><a name="[572]"></a>__Audio_Retrive_Slot_Data</STRONG> (ARM, 300 bytes, Stack size 32 bytes, avapis.o(i.__Audio_Retrive_Slot_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __Audio_Retrive_Slot_Data &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvAudioData
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendAudioDataResend
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
</UL>

<P><STRONG><a name="[588]"></a>__Audio_Scan_Slot_Data</STRONG> (ARM, 132 bytes, Stack size 8 bytes, avapis.o(i.__Audio_Scan_Slot_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __Audio_Scan_Slot_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvAudioData
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendAudioDataResend
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
</UL>

<P><STRONG><a name="[573]"></a>__Audio_Search_Lost_Data</STRONG> (ARM, 224 bytes, Stack size 280 bytes, avapis.o(i.__Audio_Search_Lost_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = __Audio_Search_Lost_Data &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
</UL>

<P><STRONG><a name="[5cb]"></a>_allocFreeAVIndex</STRONG> (ARM, 456 bytes, Stack size 20 bytes, avapis.o(i._allocFreeAVIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _allocFreeAVIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
</UL>

<P><STRONG><a name="[294]"></a>_doClientAVCtrl</STRONG> (ARM, 1892 bytes, Stack size 1448 bytes, avapis.o(i._doClientAVCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4920 + Unknown Stack Size
<LI>Call Chain = _doClientAVCtrl &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Check
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoSize
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRemoveAllFramesBiggerThanFrmNo
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoPut
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoExist
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoEmpty
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_Alloc
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpCodeSupportVer1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculatSendPacketInterval
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doIOTypeInner
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Get_Remote_ProtocolVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvClientRecvIotcData
</UL>

<P><STRONG><a name="[292]"></a>_doClientAVTrans</STRONG> (ARM, 4652 bytes, Stack size 4000 bytes, avapis.o(i._doClientAVTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 8824 + Unknown Stack Size
<LI>Call Chain = _doClientAVTrans &rArr; __Audio_Request_Resend &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_Release
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoSize
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoSeekByFrmNoPos
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoPutByPassSameBlock
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoPut
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetLostPos
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetByFrmNo
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoCountByFrmNo
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_Alloc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCalu
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___av_diff
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Search_Lost_Data
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Scan_Slot_Data
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Retrive_Slot_Data
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Request_Resend
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Get_Empty_Slot
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Get_Empty_READY_Slot
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Fill_Slot_Data
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvClientRecvIotcData
</UL>

<P><STRONG><a name="[c0]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, avapis.o(i._doClientAVTrans))
<BR>[Address Reference Count : 1]<UL><LI> avapis.o(i._doClientAVTrans)
</UL>
<P><STRONG><a name="[581]"></a>_doIOTypeInner</STRONG> (ARM, 764 bytes, Stack size 48 bytes, avapis.o(i._doIOTypeInner))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = _doIOTypeInner &rArr; avCleanVideoPreBuffer &rArr; tutk_block_FifoEmpty &rArr; _BinaryTreeEmpty &rArr;  _BinaryTreeEmpty (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoEmpty
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCleanVideoPreBuffer
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCleanAudioPreBuffer
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVCtrl
</UL>

<P><STRONG><a name="[297]"></a>_doServAVCtrl</STRONG> (ARM, 4792 bytes, Stack size 1432 bytes, avapis.o(i._doServAVCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 9104 + Unknown Stack Size
<LI>Call Chain = _doServAVCtrl &rArr; avSendAudioDataResend &rArr; IOTC_Session_Write &rArr; iotc_SendMessage &rArr; TransCodePartial &rArr; memcpy_hw &rArr; mcpu_ByteMemcpy &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_Release
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoSize
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRemoveFrameByFrmNo
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoPutFrmNo
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoPutByPassSameBlock
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoPut
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetInfoByFrmNo
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetByFrmNoPos
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetByFrmNo
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoExist
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_Alloc
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpCodeBigEndianExchange
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpCodeSupportCurrent
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendVideoDataLost
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendAudioDataResend
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCalu
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculatSendPacketInterval
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doIOTypeInner
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Scan_Slot_Data
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Audio_Retrive_Slot_Data
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvDoAuthCheck
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Write
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Check_Session_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvSrvRecvIotcData
</UL>

<P><STRONG><a name="[594]"></a>_initAVInfo</STRONG> (ARM, 960 bytes, Stack size 32 bytes, avapis.o(i._initAVInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = _initAVInfo &rArr; tutk_block_FifoNew &rArr; monopool_alloc &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRelease
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoNew
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpCodeSupportVer1
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpCodeSupportCurrent
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
</UL>

<P><STRONG><a name="[59b]"></a>_unInitAVInfo</STRONG> (ARM, 796 bytes, Stack size 24 bytes, avapis.o(i._unInitAVInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = _unInitAVInfo &rArr; tutk_block_FifoRelease &rArr; _BinaryTreeEmpty &rArr;  _BinaryTreeEmpty (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexDelete
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_Release
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRelease
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_unLock
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTC_Session_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStop
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStop
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avIOTCSesstionCloseCB
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
</UL>

<P><STRONG><a name="[c5]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, avapis.o(i.avCalu))
<BR>[Address Reference Count : 1]<UL><LI> avapis.o(i.avCalu)
</UL>
<P><STRONG><a name="[278]"></a>tutk_platform_mutex_lock</STRONG> (ARM, 76 bytes, Stack size 16 bytes, avapis.o(i.tutk_platform_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServResetBuffer
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrl
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendFrameData
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvAudioData
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckResendRequest
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCaluDoStatistics
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCaluClientDoStatistics
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCalu
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doIOTypeInner
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVCtrl
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVInfo_ResendReq
</UL>

<P><STRONG><a name="[27e]"></a>tutk_platform_mutex_unlock</STRONG> (ARM, 76 bytes, Stack size 8 bytes, avapis.o(i.tutk_platform_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tutk_platform_mutex_unlock &rArr; OS_MutexUnLock &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexUnLock
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServStart
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avServResetBuffer
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendIOCtrl
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avSendFrameData
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvAudioData
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avRecvFrameData_new
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avClientStart_inner
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCheckResendRequest
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCaluDoStatistics
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCaluClientDoStatistics
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avCalu
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doServAVCtrl
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doIOTypeInner
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVTrans
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_doClientAVCtrl
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVInfo_ResendReq
</UL>

<P><STRONG><a name="[143]"></a>Fd_RootAction</STRONG> (ARM, 624 bytes, Stack size 40 bytes, tutk_taskmng.o(i.Fd_RootAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = Fd_RootAction &rArr; tutk_SockMng_Remove &rArr; TCP_PurgeFd &rArr;  TCP_RunAction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockMng_Remove
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tutk_taskmng.o(i.tutk_SockTaskMng_DeInit)
<LI> tutk_taskmng.o(i.tutk_SockTaskMng_Run)
</UL>
<P><STRONG><a name="[a4]"></a>TCP_Compare</STRONG> (ARM, 16 bytes, Stack size 0 bytes, tutk_taskmng.o(i.TCP_Compare))
<BR>[Address Reference Count : 2]<UL><LI> tutk_taskmng.o(i.TCP_RootAction)
<LI> tutk_taskmng.o(i.tutk_SockMng_Remove)
</UL>
<P><STRONG><a name="[a3]"></a>TCP_IsDeleted</STRONG> (ARM, 20 bytes, Stack size 0 bytes, tutk_taskmng.o(i.TCP_IsDeleted))
<BR>[Address Reference Count : 1]<UL><LI> tutk_taskmng.o(i.TCP_PurgeFd)
</UL>
<P><STRONG><a name="[4fc]"></a>TCP_PurgeFd</STRONG> (ARM, 148 bytes, Stack size 16 bytes, tutk_taskmng.o(i.TCP_PurgeFd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = TCP_PurgeFd &rArr;  TCP_RunAction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RunAction
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_walk_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RunAction
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RootAction
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockMng_Remove
</UL>

<P><STRONG><a name="[a5]"></a>TCP_RootAction</STRONG> (ARM, 592 bytes, Stack size 56 bytes, tutk_taskmng.o(i.TCP_RootAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = TCP_RootAction &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_PurgeFd
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_search
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tutk_taskmng.o(i.TCP_RunAction)
</UL>
<P><STRONG><a name="[4ff]"></a>TCP_RunAction</STRONG> (ARM, 176 bytes, Stack size 16 bytes, tutk_taskmng.o(i.TCP_RunAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = TCP_RunAction &rArr; TCP_PurgeFd &rArr;  TCP_RunAction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_PurgeFd
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_walkpre
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_PurgeFd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_Run
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_DeInit
</UL>

<P><STRONG><a name="[145]"></a>Task_Compare</STRONG> (ARM, 16 bytes, Stack size 0 bytes, tutk_taskmng.o(i.Task_Compare))
<BR>[Address Reference Count : 1]<UL><LI> tutk_taskmng.o(i.tutk_TaskMng_Create)
</UL>
<P><STRONG><a name="[146]"></a>Task_IsDeleted</STRONG> (ARM, 20 bytes, Stack size 0 bytes, tutk_taskmng.o(i.Task_IsDeleted))
<BR>[Address Reference Count : 1]<UL><LI> tutk_taskmng.o(i.tutk_TaskMng_Purge)
</UL>
<P><STRONG><a name="[ac]"></a>Task_RootAction</STRONG> (ARM, 548 bytes, Stack size 32 bytes, tutk_taskmng.o(i.Task_RootAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Task_RootAction &rArr; tutk_TaskMng_Purge &rArr; tutk_bst_walk_purge &rArr;  tutk_bst_walk_purge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Purge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tutk_taskmng.o(i.Task_RunAction)
</UL>
<P><STRONG><a name="[50d]"></a>Task_RunAction</STRONG> (ARM, 180 bytes, Stack size 16 bytes, tutk_taskmng.o(i.Task_RunAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = Task_RunAction &rArr;  tutk_TaskMng_Purge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_bst_walkpre
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Purge
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Purge
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_Run
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Create
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_DeInit
</UL>

<P><STRONG><a name="[4fd]"></a>tutk_platform_mutex_lock</STRONG> (ARM, 76 bytes, Stack size 16 bytes, tutk_taskmng.o(i.tutk_platform_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RootAction
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_PurgeFd
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Purge
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockMng_Remove
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockMng_Purge
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Delete
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Create
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_DeInit
</UL>

<P><STRONG><a name="[500]"></a>tutk_platform_mutex_unlock</STRONG> (ARM, 76 bytes, Stack size 8 bytes, tutk_taskmng.o(i.tutk_platform_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tutk_platform_mutex_unlock &rArr; OS_MutexUnLock &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexUnLock
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RootAction
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_PurgeFd
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Purge
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockMng_Remove
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockMng_Purge
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Delete
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_TaskMng_Create
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_SockTaskMng_DeInit
</UL>

<P><STRONG><a name="[198]"></a>LinuxConnMgr_createNewConnection</STRONG> (ARM, 316 bytes, Stack size 32 bytes, tconn_manager.o(i.LinuxConnMgr_createNewConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = LinuxConnMgr_createNewConnection &rArr; TConnection_new &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlistLength
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlistAppend
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnection_new
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tconn_manager.o(.constdata)
</UL>
<P><STRONG><a name="[199]"></a>LinuxConnMgr_destroyConnection</STRONG> (ARM, 164 bytes, Stack size 16 bytes, tconn_manager.o(i.LinuxConnMgr_destroyConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = LinuxConnMgr_destroyConnection &rArr; tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlistHead
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tconn_manager.o(.constdata)
</UL>
<P><STRONG><a name="[19a]"></a>LinuxConnMgr_setTimeout</STRONG> (ARM, 88 bytes, Stack size 4 bytes, tconn_manager.o(i.LinuxConnMgr_setTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LinuxConnMgr_setTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tconn_manager.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>LinuxTConnection_registerBreakTimeCB</STRONG> (ARM, 32 bytes, Stack size 0 bytes, tconn_manager.o(i.LinuxTConnection_registerBreakTimeCB))
<BR>[Address Reference Count : 1]<UL><LI> tconn_manager.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>TConnManager_destroy</STRONG> (ARM, 180 bytes, Stack size 24 bytes, tconn_manager.o(i.TConnManager_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = TConnManager_destroy &rArr; tlistDestroy &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexDelete
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlistLength
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlistForeach
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlistDestroy
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_unlock
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_mutex_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tconn_manager.o(i.TConnManager_create)
</UL>
<P><STRONG><a name="[a7]"></a>connectionHandlerThread</STRONG> (ARM, 2424 bytes, Stack size 72 bytes, tconn_manager.o(i.connectionHandlerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = connectionHandlerThread &rArr; LinuxTConnection_receivingMsg &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexUnLock
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexLock
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlistRemoveNode
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlistHead
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertErrorToConnErr
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_receivingMsg
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_handleError
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_connectedReadyToSend
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_acceptTCPconnection
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxTConnection_SetupFails
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_platform_set_thread_name
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tconn_manager.o(i.TConnManager_create)
</UL>
<P><STRONG><a name="[a8]"></a>freeConnItem</STRONG> (ARM, 52 bytes, Stack size 8 bytes, tconn_manager.o(i.freeConnItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = freeConnItem &rArr; monopool_free &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tconn_manager.o(i.TConnManager_destroy)
</UL>
<P><STRONG><a name="[431]"></a>tutk_platform_mutex_lock</STRONG> (ARM, 76 bytes, Stack size 16 bytes, tconn_manager.o(i.tutk_platform_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnManager_destroy
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxConnMgr_destroyConnection
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxConnMgr_createNewConnection
</UL>

<P><STRONG><a name="[433]"></a>tutk_platform_mutex_unlock</STRONG> (ARM, 76 bytes, Stack size 8 bytes, tconn_manager.o(i.tutk_platform_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tutk_platform_mutex_unlock &rArr; OS_MutexUnLock &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexUnLock
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TConnManager_destroy
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxConnMgr_destroyConnection
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinuxConnMgr_createNewConnection
</UL>

<P><STRONG><a name="[87b]"></a>tutk_platform_mutex_lock</STRONG> (ARM, 76 bytes, Stack size 16 bytes, block_fifo.o(i.tutk_platform_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tutk_platform_mutex_lock &rArr; OS_MutexLock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoSize
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoSeekByFrmNoPos
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRemoveFrameByFrmNo
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRemoveAllFramesLessThanFrmNo
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRemoveAllFramesBiggerThanFrmNo
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRelease
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoPutFrmNo
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoPutByPassSameBlock
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoPut
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetMinFrmNo
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetMaxFrmNo
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetLostPos
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetInfoByFrmNo
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetByFrmNoPos
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetByFrmNo
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGet
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoExist
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoEmpty
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoCountByFrmNo
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoCount
</UL>

<P><STRONG><a name="[87c]"></a>tutk_platform_mutex_unlock</STRONG> (ARM, 76 bytes, Stack size 8 bytes, block_fifo.o(i.tutk_platform_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tutk_platform_mutex_unlock &rArr; OS_MutexUnLock &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexUnLock
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoSize
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoSeekByFrmNoPos
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRemoveFrameByFrmNo
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRemoveAllFramesLessThanFrmNo
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRemoveAllFramesBiggerThanFrmNo
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoRelease
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoPutFrmNo
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoPutByPassSameBlock
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoPut
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetMinFrmNo
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetMaxFrmNo
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetLostPos
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetInfoByFrmNo
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetByFrmNoPos
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGetByFrmNo
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoGet
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoExist
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoEmpty
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoCountByFrmNo
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tutk_block_FifoCount
</UL>

<P><STRONG><a name="[1a3]"></a>LinuxTConnection_changeDistance</STRONG> (ARM, 96 bytes, Stack size 16 bytes, tconnection.o(i.LinuxTConnection_changeDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LinuxTConnection_changeDistance &rArr; lwip_setsockopt &rArr; sys_mutex_lock &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_convert_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(.constdata)
</UL>
<P><STRONG><a name="[1a5]"></a>LinuxTConnection_getAttribute</STRONG> (ARM, 40 bytes, Stack size 0 bytes, tconnection.o(i.LinuxTConnection_getAttribute))
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(.constdata)
</UL>
<P><STRONG><a name="[1a2]"></a>LinuxTConnection_getLocal</STRONG> (ARM, 120 bytes, Stack size 72 bytes, tconnection.o(i.LinuxTConnection_getLocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LinuxTConnection_getLocal &rArr; ipaddr_ntoa
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_getallnetdev
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(.constdata)
</UL>
<P><STRONG><a name="[1a1]"></a>LinuxTConnection_getStatus</STRONG> (ARM, 36 bytes, Stack size 0 bytes, tconnection.o(i.LinuxTConnection_getStatus))
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(.constdata)
</UL>
<P><STRONG><a name="[1a6]"></a>LinuxTConnection_keepRecvMessage</STRONG> (ARM, 68 bytes, Stack size 0 bytes, tconnection.o(i.LinuxTConnection_keepRecvMessage))
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(.constdata)
</UL>
<P><STRONG><a name="[1a0]"></a>LinuxTConnection_registerErrHandlingCB</STRONG> (ARM, 32 bytes, Stack size 0 bytes, tconnection.o(i.LinuxTConnection_registerErrHandlingCB))
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(.constdata)
</UL>
<P><STRONG><a name="[19f]"></a>LinuxTConnection_registerRecvMsgCb</STRONG> (ARM, 32 bytes, Stack size 0 bytes, tconnection.o(i.LinuxTConnection_registerRecvMsgCb))
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(.constdata)
</UL>
<P><STRONG><a name="[19d]"></a>LinuxTConnection_sendMessage</STRONG> (ARM, 332 bytes, Stack size 48 bytes, tconnection.o(i.LinuxTConnection_sendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = LinuxTConnection_sendMessage &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_convert_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(.constdata)
</UL>
<P><STRONG><a name="[19e]"></a>LinuxTConnection_sendMessageTo</STRONG> (ARM, 408 bytes, Stack size 72 bytes, tconnection.o(i.LinuxTConnection_sendMessageTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = LinuxTConnection_sendMessageTo &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_convert_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>LinuxTConnection_setAttribute</STRONG> (ARM, 64 bytes, Stack size 0 bytes, tconnection.o(i.LinuxTConnection_setAttribute))
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(.constdata)
</UL>
<P><STRONG><a name="[19c]"></a>LinuxTConnection_setup</STRONG> (ARM, 808 bytes, Stack size 56 bytes, tconnection.o(i.LinuxTConnection_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = LinuxTConnection_setup &rArr; ttk_lookup_hostname &rArr; lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_hw
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ttk_lookup_hostname
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_convert_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>TConnection_destroy</STRONG> (ARM, 96 bytes, Stack size 16 bytes, tconnection.o(i.TConnection_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = TConnection_destroy &rArr; lwip_close &rArr; netconn_delete &rArr; netconn_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monopool_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tconnection.o(i.TConnection_new)
</UL>
<P><STRONG><a name="[140]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, terror.o(i.tos_convert_error))
<BR>[Address Reference Count : 1]<UL><LI> terror.o(i.tos_convert_error)
</UL>
<P><STRONG><a name="[24e]"></a>__arm_div_large_positive</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[24d]"></a>__arm_div16</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[24c]"></a>__arm_div12</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[24b]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[24a]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[249]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[9ac]"></a>_dadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[99e]"></a>_dsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[87]"></a>_printf_input_char</STRONG> (ARM, 20 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>_scanf_char_input</STRONG> (ARM, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[232]"></a>_fp_digits</STRONG> (ARM, 632 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[20e]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[227]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[23d]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[23f]"></a>_scanf_longlong</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[241]"></a>_scanf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[23e]"></a>_scanf_real</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[243]"></a>_scanf_wctomb</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[240]"></a>_scanf_wstring</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<HR></body></html>
